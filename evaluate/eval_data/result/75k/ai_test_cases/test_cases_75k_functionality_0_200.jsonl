{"index": 36139, "preference": "functionality", "prompt": "You are tasked with creating a Python class that represents a dog breed and its sub-breeds. Your class should allow for the registration of sub-breeds and provide an admin interface for managing these sub-breeds.\n\nCreate a Python class `DogBreed` with the following requirements:\n- The class should have a constructor that takes the name of the breed as a parameter and initializes a list to store its sub-breeds.\n- It should have a method `register_sub_breed` that takes the name of a sub-breed as a parameter and adds it to the list of sub-breeds.\n- The class should also have a method `display_sub_breeds` that prints the list of sub-breeds.\n\nAdditionally, create a class `SubBreedAdmin` that registers the `DogBreed` class and provides an admin interface for managing sub-breeds.\n\nYour task is to implement the `DogBreed` class as described and then register it with the `SubBreedAdmin` class to enable the management of sub-breeds.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"DogBreed('Labrador')\",\n    \"expected_output\": \"Labrador with no sub-breeds registered.\",\n    \"test_aspect\": \"Test initialization of DogBreed class with a single breed.\"\n  },\n  \"test_case2\": {\n    \"input\": \"dog = DogBreed('Labrador'); dog.register_sub_breed('Golden'); dog.display_sub_breeds()\",\n    \"expected_output\": \"['Golden']\",\n    \"test_aspect\": \"Test registration of a single sub-breed.\"\n  },\n  \"test_case3\": {\n    \"input\": \"dog = DogBreed('Labrador'); dog.register_sub_breed('Golden'); dog.register_sub_breed('Black'); dog.display_sub_breeds()\",\n    \"expected_output\": \"['Golden', 'Black']\",\n    \"test_aspect\": \"Test registration of multiple sub-breeds.\"\n  },\n  \"test_case4\": {\n    \"input\": \"dog = DogBreed('Labrador'); dog.display_sub_breeds()\",\n    \"expected_output\": \"[]\",\n    \"test_aspect\": \"Test display of sub-breeds when none are registered.\"\n  },\n  \"test_case5\": {\n    \"input\": \"dog = DogBreed('Labrador'); dog.register_sub_breed('Golden'); dog.register_sub_breed('Golden'); dog.display_sub_breeds()\",\n    \"expected_output\": \"['Golden', 'Golden']\",\n    \"test_aspect\": \"Test registration of duplicate sub-breeds.\"\n  },\n  \"test_case6\": {\n    \"input\": \"dog = DogBreed('Beagle'); dog.register_sub_breed('Pocket'); dog.display_sub_breeds()\",\n    \"expected_output\": \"['Pocket']\",\n    \"test_aspect\": \"Test registration and display of sub-breeds for a different breed.\"\n  },\n  \"test_case7\": {\n    \"input\": \"dog = DogBreed('Poodle'); dog.register_sub_breed('Toy'); dog.register_sub_breed('Miniature'); dog.display_sub_breeds()\",\n    \"expected_output\": \"['Toy', 'Miniature']\",\n    \"test_aspect\": \"Test display of sub-breeds for a breed with multiple sub-breeds.\"\n  },\n  \"test_case8\": {\n    \"input\": \"dog = DogBreed('Bulldog'); dog.register_sub_breed('English'); dog.register_sub_breed('French'); dog.register_sub_breed('American'); dog.display_sub_breeds()\",\n    \"expected_output\": \"['English', 'French', 'American']\",\n    \"test_aspect\": \"Test registration of multiple diverse sub-breeds and their display.\"\n  },\n  \"test_case9\": {\n    \"input\": \"admin = SubBreedAdmin(); breed = DogBreed('Rottweiler'); admin.register_breed(breed); breed.register_sub_breed('Miniature'); breed.display_sub_breeds()\",\n    \"expected_output\": \"['Miniature']\",\n    \"test_aspect\": \"Test the interaction of SubBreedAdmin with DogBreed class.\"\n  },\n  \"test_case10\": {\n    \"input\": \"dog = DogBreed('Dachshund'); dog.register_sub_breed('Standard'); dog.register_sub_breed('Mini'); dog.display_sub_breeds()\",\n    \"expected_output\": \"['Standard', 'Mini']\",\n    \"test_aspect\": \"Test registration and display of sub-breeds for a breed with specific sub-breeds.\"\n  }\n}\n```"}
{"index": 1024, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that processes a dictionary and prints specific key-value pairs using a custom color printing utility. The function should extract specific keys from the dictionary and print their corresponding values in a light gray color.\n\nYou are given the following code snippet as a reference:\n\n```python\n        'checkpoint_tag': checkpoint_tag,\n        'arch_tag': arch_tag,\n        'datatype': datatype,\n    }\n    ut.colorprint('[netrun] * ds_tag=%r' % (ds_tag,), 'lightgray')\n    ut.colorprint('[netrun] * arch_tag=%r' % (arch_tag,), 'lightgray')\n    ut.colorprint('[netrun] * extern_ds_tag=%r' % (extern_ds_tag,), 'lightgray')\n    ut.colorprint('[netrun] * checkpoint_tag=%r' % (checkpoint_tag,), 'lightgray')\n    return requests, hyperparams, tags\n```\n\nYour task is to implement the `process_and_print` function that takes a dictionary `data` and a list of keys `keys_to_print`. For each key in `keys_to_print`, the function should print the corresponding key-value pair using the `ut.colorprint` utility with the value printed in light gray. If a key is not present in the dictionary, the function should print \"Key not found\" for that key.\n\nFunction Signature: `def process_and_print(data: dict, keys_to_print: list) -> None:`\n\nExample:\n```python\ndata = {\n    'ds_tag': 'dataset',\n    'arch_tag': 'architecture',\n    'datatype': 'type'\n}\n\nkeys_to_print = ['ds_tag', 'arch_tag', 'extern_ds_tag', 'checkpoint_tag']\n\nprocess_and_print(data, keys_to_print)\n```\n\nExpected Output:\n```\n[netrun] * ds_tag='dataset' (printed in light gray)\n[netrun] * arch_tag='architecture' (printed in light gray)\n[netrun] * extern_ds_tag='Key not found'\n[netrun] * checkpoint_tag='Key not found'\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"data\": {\n        \"ds_tag\": \"dataset\",\n        \"arch_tag\": \"architecture\",\n        \"datatype\": \"type\"\n      },\n      \"keys_to_print\": [\"ds_tag\", \"arch_tag\"]\n    },\n    \"expected_output\": \"[netrun] * ds_tag='dataset'\\n[netrun] * arch_tag='architecture'\",\n    \"test_aspect\": \"Basic functionality with all keys present\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"data\": {\n        \"ds_tag\": \"dataset\"\n      },\n      \"keys_to_print\": [\"ds_tag\", \"arch_tag\"]\n    },\n    \"expected_output\": \"[netrun] * ds_tag='dataset'\\n[netrun] * arch_tag='Key not found'\",\n    \"test_aspect\": \"Handling missing keys\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"data\": {},\n      \"keys_to_print\": [\"ds_tag\", \"arch_tag\"]\n    },\n    \"expected_output\": \"[netrun] * ds_tag='Key not found'\\n[netrun] * arch_tag='Key not found'\",\n    \"test_aspect\": \"Empty dictionary\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"data\": {\n        \"ds_tag\": \"dataset\",\n        \"arch_tag\": \"architecture\",\n        \"datatype\": \"type\"\n      },\n      \"keys_to_print\": [\"datatype\", \"ds_tag\", \"arch_tag\"]\n    },\n    \"expected_output\": \"[netrun] * datatype='type'\\n[netrun] * ds_tag='dataset'\\n[netrun] * arch_tag='architecture'\",\n    \"test_aspect\": \"All keys present including datatype\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"data\": {\n        \"ds_tag\": \"dataset\",\n        \"arch_tag\": \"architecture\"\n      },\n      \"keys_to_print\": [\"checkpoint_tag\"]\n    },\n    \"expected_output\": \"[netrun] * checkpoint_tag='Key not found'\",\n    \"test_aspect\": \"Single missing key\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"data\": {\n        \"ds_tag\": \"dataset\",\n        \"arch_tag\": \"architecture\",\n        \"checkpoint_tag\": \"checkpoint_value\"\n      },\n      \"keys_to_print\": [\"ds_tag\", \"arch_tag\", \"checkpoint_tag\", \"extern_ds_tag\"]\n    },\n    \"expected_output\": \"[netrun] * ds_tag='dataset'\\n[netrun] * arch_tag='architecture'\\n[netrun] * checkpoint_tag='checkpoint_value'\\n[netrun] * extern_ds_tag='Key not found'\",\n    \"test_aspect\": \"Mix of present and missing keys\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"data\": {\n        \"ds_tag\": \"dataset\"\n      },\n      \"keys_to_print\": []\n    },\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Empty list of keys to print\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"data\": {\n        \"ds_tag\": \"dataset\",\n        \"arch_tag\": \"architecture\"\n      },\n      \"keys_to_print\": [\"ds_tag\", \"ds_tag\"]\n    },\n    \"expected_output\": \"[netrun] * ds_tag='dataset'\\n[netrun] * ds_tag='dataset'\",\n    \"test_aspect\": \"Duplicate keys in keys_to_print\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"data\": {\n        \"arch_tag\": \"architecture\",\n        \"datatype\": \"type\"\n      },\n      \"keys_to_print\": [\"ds_tag\", \"arch_tag\", \"datatype\"]\n    },\n    \"expected_output\": \"[netrun] * ds_tag='Key not found'\\n[netrun] * arch_tag='architecture'\\n[netrun] * datatype='type'\",\n    \"test_aspect\": \"Missing keys among existing\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"data\": {\n        \"ds_tag\": \"data_set\",\n        \"arch_tag\": \"arch_type\"\n      },\n      \"keys_to_print\": [\"checkpoint_tag\", \"arch_tag\", \"ds_tag\"]\n    },\n    \"expected_output\": \"[netrun] * checkpoint_tag='Key not found'\\n[netrun] * arch_tag='arch_type'\\n[netrun] * ds_tag='data_set'\",\n    \"test_aspect\": \"Non-existing key with existing keys\"\n  }\n}\n```"}
{"index": 27798, "preference": "functionality", "prompt": "You are tasked with creating a Python function that calculates the rate of a given list of numbers. The function should take a list of numbers as input and return the rate as a percentage. The rate is calculated as the sum of all numbers in the list divided by the total count of numbers in the list, multiplied by 100.\n\nWrite a function `calculate_rate` that takes a list of numbers `x` as input and returns the rate calculated as described above. The function should handle the case where the input list is empty and return 0 in such cases.\n\nFor example:\n- If the input list is [10, 20, 30, 40], the function should return 25.0, as (10+20+30+40)/4 * 100 = 25.0.\n- If the input list is [5, 5, 5, 5, 5], the function should return 100.0, as (5+5+5+5+5)/5 * 100 = 100.0.\n- If the input list is empty, the function should return 0.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [10, 20, 30, 40],\n    \"expected_output\": 25.0,\n    \"test_aspect\": \"Basic functionality with positive integers\"\n  },\n  \"test_case2\": {\n    \"input\": [5, 5, 5, 5, 5],\n    \"expected_output\": 100.0,\n    \"test_aspect\": \"All elements are the same, should return 100%\"\n  },\n  \"test_case3\": {\n    \"input\": [],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Empty input list should return 0\"\n  },\n  \"test_case4\": {\n    \"input\": [0, 0, 0],\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"List with zeros, should return 0%\"\n  },\n  \"test_case5\": {\n    \"input\": [-10, -20, -30],\n    \"expected_output\": -20.0,\n    \"test_aspect\": \"All negative integers, should return average as negative percentage\"\n  },\n  \"test_case6\": {\n    \"input\": [10.5, 20.5, 30.5],\n    \"expected_output\": 20.5,\n    \"test_aspect\": \"List with float numbers, should return correct average in percentage\"\n  },\n  \"test_case7\": {\n    \"input\": [1, 2, 3, 4, 5],\n    \"expected_output\": 30.0,\n    \"test_aspect\": \"Basic arithmetic with a range of integers\"\n  },\n  \"test_case8\": {\n    \"input\": [100, 200, 300],\n    \"expected_output\": 200.0,\n    \"test_aspect\": \"Larger integers, should return correct average\"\n  },\n  \"test_case9\": {\n    \"input\": [0, 100, 200, 300],\n    \"expected_output\": 125.0,\n    \"test_aspect\": \"Mixed values including zero, should return correct percentage\"\n  },\n  \"test_case10\": {\n    \"input\": [-1, 1, -1, 1],\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"Mixed negative and positive numbers that average to zero\"\n  }\n}\n```"}
{"index": 37310, "preference": "functionality", "prompt": "You are tasked with creating a program that simulates a simple banking system. The program should be able to handle basic banking operations such as account creation, deposit, withdrawal, and balance inquiry.\n\nYour task is to implement a Python class called `BankAccount` with the following specifications:\n- The class should have a constructor that takes the account holder's name and initializes the account balance to 0.\n- It should have methods for depositing funds, withdrawing funds, and checking the current balance.\n- The deposit and withdrawal methods should update the account balance accordingly.\n- The withdrawal method should ensure that the account has sufficient funds before processing the withdrawal.\n\nYour program should also include a simple user interface to interact with the `BankAccount` class. The user interface should allow the user to create an account, deposit funds, withdraw funds, and check the account balance.\n\nYour task is to implement the `BankAccount` class and the user interface to fulfill the requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Create account with name 'Alice'\",\n    \"expected_output\": \"Account created for Alice with balance $0\",\n    \"test_aspect\": \"Account creation functionality\"\n  },\n  \"test_case2\": {\n    \"input\": \"Create account with name 'Bob'\",\n    \"expected_output\": \"Account created for Bob with balance $0\",\n    \"test_aspect\": \"Account creation functionality\"\n  },\n  \"test_case3\": {\n    \"input\": \"Deposit $100 into Alice's account\",\n    \"expected_output\": \"Deposited $100. New balance: $100\",\n    \"test_aspect\": \"Deposit functionality and balance update\"\n  },\n  \"test_case4\": {\n    \"input\": \"Withdraw $50 from Alice's account\",\n    \"expected_output\": \"Withdrew $50. Remaining balance: $50\",\n    \"test_aspect\": \"Withdrawal functionality and sufficient funds check\"\n  },\n  \"test_case5\": {\n    \"input\": \"Withdraw $100 from Alice's account\",\n    \"expected_output\": \"Insufficient funds for withdrawal\",\n    \"test_aspect\": \"Withdrawal functionality with insufficient funds\"\n  },\n  \"test_case6\": {\n    \"input\": \"Check balance for Alice's account\",\n    \"expected_output\": \"$50\",\n    \"test_aspect\": \"Balance inquiry functionality\"\n  },\n  \"test_case7\": {\n    \"input\": \"Deposit $200 into Bob's account\",\n    \"expected_output\": \"Deposited $200. New balance: $200\",\n    \"test_aspect\": \"Deposit functionality and balance update\"\n  },\n  \"test_case8\": {\n    \"input\": \"Withdraw $250 from Bob's account\",\n    \"expected_output\": \"Insufficient funds for withdrawal\",\n    \"test_aspect\": \"Withdrawal functionality with insufficient funds\"\n  },\n  \"test_case9\": {\n    \"input\": \"Withdraw $150 from Bob's account\",\n    \"expected_output\": \"Withdrew $150. Remaining balance: $50\",\n    \"test_aspect\": \"Withdrawal functionality and sufficient funds check\"\n  },\n  \"test_case10\": {\n    \"input\": \"Check balance for Bob's account\",\n    \"expected_output\": \"$50\",\n    \"test_aspect\": \"Balance inquiry functionality\"\n  }\n}\n```"}
{"index": 15125, "preference": "functionality", "prompt": "You are tasked with creating a program that simulates a simple online auction system. The program should allow users to place bids on items and display the current highest bid for each item. The auction system should also keep track of the bidding history for each item.\n\nYour task is to implement the `AuctionItem` class, which represents an item being auctioned. The class should have the following functionalities:\n- Initialize with a name and a starting price.\n- Allow users to place bids on the item.\n- Keep track of the current highest bid and the bidder's information.\n- Provide a method to display the bidding history for the item.\n\nYou should also implement the `AuctionSystem` class, which manages multiple auction items. The class should have the following functionalities:\n- Allow users to add new items to the auction.\n- Display the current highest bid for each item.\n- Provide a method to display the bidding history for a specific item.\n\nYou should use the provided code snippet as a starting point and expand upon it to create the auction system.\n\nExample:\n```python\n# Create an auction system\nauction_system = AuctionSystem()\n\n# Add items to the auction\nauction_system.add_item(\"Painting\", 100)\nauction_system.add_item(\"Antique Vase\", 200)\n\n# Place bids on items\nauction_system.place_bid(\"Painting\", \"John Doe\", 150)\nauction_system.place_bid(\"Antique Vase\", \"Jane Smith\", 250)\nauction_system.place_bid(\"Painting\", \"Michael Johnson\", 200)\n\n# Display current highest bids\nauction_system.display_highest_bids()\n# Output:\n# Painting - Current highest bid: $200 by Michael Johnson\n# Antique Vase - Current highest bid: $250 by Jane Smith\n\n# Display bidding history for an item\nauction_system.display_bidding_history(\"Painting\")\n# Output:\n# Bidding history for Painting:\n# - $100 by Starting Bidder\n# - $150 by John Doe\n# - $200 by Michael Johnson\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Painting', 100)\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Verify that an item can be added to the auction system\"\n  },\n  \"test_case2\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Painting', 100)\\nauction_system.display_highest_bids()\",\n    \"expected_output\": \"Painting - Current highest bid: $100 by Starting Bidder\",\n    \"test_aspect\": \"Check the display of the current highest bid when only the starting bid is placed\"\n  },\n  \"test_case3\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Antique Vase', 200)\\nauction_system.place_bid('Antique Vase', 'Jane Smith', 250)\\nauction_system.display_highest_bids()\",\n    \"expected_output\": \"Antique Vase - Current highest bid: $250 by Jane Smith\",\n    \"test_aspect\": \"Verify that the current highest bid updates correctly after a bid is placed\"\n  },\n  \"test_case4\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Art Sculpture', 300)\\nauction_system.place_bid('Art Sculpture', 'Alice', 350)\\nauction_system.place_bid('Art Sculpture', 'Bob', 320)\\nauction_system.display_highest_bids()\",\n    \"expected_output\": \"Art Sculpture - Current highest bid: $350 by Alice\",\n    \"test_aspect\": \"Ensure that the highest bid reflects the highest value and correct bidder\"\n  },\n  \"test_case5\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Collectible Coin', 50)\\nauction_system.place_bid('Collectible Coin', 'Charlie', 60)\\nauction_system.place_bid('Collectible Coin', 'Diana', 70)\\nauction_system.place_bid('Collectible Coin', 'Eve', 65)\\nauction_system.display_bidding_history('Collectible Coin')\",\n    \"expected_output\": \"Bidding history for Collectible Coin:\\n- $50 by Starting Bidder\\n- $60 by Charlie\\n- $70 by Diana\\n- $65 by Eve\",\n    \"test_aspect\": \"Check that bidding history records all bids for an item correctly\"\n  },\n  \"test_case6\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Vintage Watch', 500)\\nauction_system.place_bid('Vintage Watch', 'Fiona', 550)\\nauction_system.place_bid('Vintage Watch', 'Gerry', 600)\\nauction_system.display_bidding_history('Vintage Watch')\",\n    \"expected_output\": \"Bidding history for Vintage Watch:\\n- $500 by Starting Bidder\\n- $550 by Fiona\\n- $600 by Gerry\",\n    \"test_aspect\": \"Ensure the bidding history tracks the correct progression of bids\"\n  },\n  \"test_case7\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Old Book', 10)\\nauction_system.place_bid('Old Book', 'Henry', 15)\\nauction_system.place_bid('Old Book', 'Ivy', 12)\\nauction_system.display_highest_bids()\",\n    \"expected_output\": \"Old Book - Current highest bid: $15 by Henry\",\n    \"test_aspect\": \"Check that an item does not allow a lower bid to update the highest bid\"\n  },\n  \"test_case8\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Rare Stamp', 200)\\naction_system.place_bid('Rare Stamp', 'Jack', 300)\\naction_system.place_bid('Rare Stamp', 'Kerry', 350)\\naction_system.place_bid('Rare Stamp', 'Liam', 330)\\naction_system.display_bidding_history('Rare Stamp')\",\n    \"expected_output\": \"Bidding history for Rare Stamp:\\n- $200 by Starting Bidder\\n- $300 by Jack\\n- $350 by Kerry\\n- $330 by Liam\",\n    \"test_aspect\": \"Verify that the bidding history includes all bids correctly\"\n  },\n  \"test_case9\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Guitar', 150)\\naction_system.place_bid('Guitar', 'Mona', 175)\\naction_system.place_bid('Guitar', 'Nathan', 175)\\naction_system.display_highest_bids()\",\n    \"expected_output\": \"Guitar - Current highest bid: $175 by Mona\",\n    \"test_aspect\": \"Check that the highest bid remains with the first bidder in case of ties\"\n  },\n  \"test_case10\": {\n    \"input\": \"auction_system = AuctionSystem()\\nauction_system.add_item('Diamond Ring', 800)\\naction_system.display_highest_bids()\",\n    \"expected_output\": \"Diamond Ring - Current highest bid: $800 by Starting Bidder\",\n    \"test_aspect\": \"Ensure that a new item shows the starting bid correctly before any bids are placed\"\n  }\n}\n```"}
{"index": 2396, "preference": "functionality", "prompt": "You are tasked with creating a Java class that interacts with a database repository to retrieve user data. Your goal is to implement a method that takes a user ID as input and returns the user's information in JSON format. The repository class has a method `getById` that takes a user ID as input and returns the user's data in a JSON array format. Your task is to complete the implementation of the `UserManager` class by writing the `getById` method.\n\nYou are provided with the following code snippet as a starting point:\n\n```java\nimport org.json.JSONArray;\nimport java.sql.SQLException;\n\npublic class UserManager {\n    private UserRepository repository;\n\n    public UserManager(UserRepository repository) {\n        this.repository = repository;\n    }\n\n    public JSONArray getById(Long user_id) throws SQLException {\n        // Your implementation here\n    }\n}\n```\n\nYour task is to complete the `getById` method in the `UserManager` class to call the `getById` method of the `UserRepository` and return the JSON array of user data.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": 1,\n    \"expected_output\": \"[{\\\"id\\\":1,\\\"name\\\":\\\"John Doe\\\",\\\"email\\\":\\\"john.doe@example.com\\\"}]\",\n    \"test_aspect\": \"Valid user ID that exists in the database.\"\n  },\n  \"test_case2\": {\n    \"input\": 9999,\n    \"expected_output\": \"[]\",\n    \"test_aspect\": \"Valid user ID that does not exist in the database.\"\n  },\n  \"test_case3\": {\n    \"input\": null,\n    \"expected_output\": \"SQLException\",\n    \"test_aspect\": \"Null user ID should throw SQLException.\"\n  },\n  \"test_case4\": {\n    \"input\": -5,\n    \"expected_output\": \"SQLException\",\n    \"test_aspect\": \"Negative user ID should throw SQLException.\"\n  },\n  \"test_case5\": {\n    \"input\": 0,\n    \"expected_output\": \"SQLException\",\n    \"test_aspect\": \"Zero user ID should throw SQLException.\"\n  },\n  \"test_case6\": {\n    \"input\": 2,\n    \"expected_output\": \"[{\\\"id\\\":2,\\\"name\\\":\\\"Jane Smith\\\",\\\"email\\\":\\\"jane.smith@example.com\\\"}]\",\n    \"test_aspect\": \"Valid user ID that exists in the database with different details.\"\n  },\n  \"test_case7\": {\n    \"input\": 3,\n    \"expected_output\": \"[{\\\"id\\\":3,\\\"name\\\":\\\"Alice Johnson\\\",\\\"email\\\":\\\"alice.johnson@example.com\\\"}]\",\n    \"test_aspect\": \"Valid user ID that exists in the database with unique details.\"\n  },\n  \"test_case8\": {\n    \"input\": 4,\n    \"expected_output\": \"[{\\\"id\\\":4,\\\"name\\\":\\\"Robert Brown\\\",\\\"email\\\":\\\"robert.brown@example.com\\\"}]\",\n    \"test_aspect\": \"Valid user ID returning a different user's data.\"\n  },\n  \"test_case9\": {\n    \"input\": 100,\n    \"expected_output\": \"SQLException\",\n    \"test_aspect\": \"ID that causes an internal database error (e.g., too high) should throw SQLException.\"\n  },\n  \"test_case10\": {\n    \"input\": 5,\n    \"expected_output\": \"[{\\\"id\\\":5,\\\"name\\\":\\\"Michael White\\\",\\\"email\\\":\\\"michael.white@example.com\\\"}]\",\n    \"test_aspect\": \"Valid user ID that exists in the database returning another unique user's data.\"\n  }\n}\n```"}
{"index": 3803, "preference": "functionality", "prompt": "You are tasked with implementing a Java class that reads configuration data from different formats. The class has two private fields: `configFormat` of type `ConfigurationFormat` and `resource` of type `URL`. The `ConfigurationFormat` enum represents the supported configuration formats, and the `URL` represents the resource to be read.\n\nYour task is to implement the constructor for the class, ensuring that it initializes the `configFormat` and `resource` fields correctly. Additionally, you need to provide a method `readConfiguration` that reads the configuration data from the specified resource based on the format and returns it as a string.\n\nYou should also handle any potential exceptions that may occur during the resource reading process.\n\nYour implementation should adhere to the following requirements:\n1. The class should be named `ConfigurationReader`.\n2. The constructor should take two parameters: `format` of type `ConfigurationFormat` and `resource` of type `URL`.\n3. The `readConfiguration` method should return the configuration data as a string and handle any potential exceptions.\n\nYou can assume that the `ConfigurationFormat` enum is already defined and contains the necessary formats.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"format\": \"JSON\",\n      \"resource\": \"http://example.com/config.json\"\n    },\n    \"expected_output\": \"{...}\",  // Expected JSON configuration data as a string\n    \"test_aspect\": \"Valid JSON format and valid URL\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"format\": \"XML\",\n      \"resource\": \"http://example.com/config.xml\"\n    },\n    \"expected_output\": \"<config>...</config>\",  // Expected XML configuration data as a string\n    \"test_aspect\": \"Valid XML format and valid URL\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"format\": \"YAML\",\n      \"resource\": \"http://example.com/config.yaml\"\n    },\n    \"expected_output\": \"key: value\\nanother_key: another_value\\n\",  // Expected YAML configuration data as a string\n    \"test_aspect\": \"Valid YAML format and valid URL\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"format\": \"JSON\",\n      \"resource\": \"http://example.com/invalid-resource.json\"\n    },\n    \"expected_output\": \"Resource not found or invalid format exception\",  // Expected exception output\n    \"test_aspect\": \"Valid format but invalid URL, check exception handling\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"format\": \"XML\",\n      \"resource\": \"http://example.com/malformed.xml\"\n    },\n    \"expected_output\": \"Malformed XML exception\",  // Expected exception output for malformed XML\n    \"test_aspect\": \"Valid URL but malformed XML, check exception handling\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"format\": \"YAML\",\n      \"resource\": \"http://example.com/empty.yaml\"\n    },\n    \"expected_output\": \"Empty configuration data exception\",  // Expected exception output for empty config\n    \"test_aspect\": \"Valid URL but empty configuration, check exception handling\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"format\": \"XML\",\n      \"resource\": \"\"\n    },\n    \"expected_output\": \"Invalid URL exception\",  // Expected exception output for empty URL\n    \"test_aspect\": \"Valid format but empty URL, check exception handling\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"format\": \"INVALID_FORMAT\",\n      \"resource\": \"http://example.com/config.txt\"\n    },\n    \"expected_output\": \"Unsupported configuration format exception\",  // Expected exception for invalid format\n    \"test_aspect\": \"Invalid format, check format validation exception handling\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"format\": \"JSON\",\n      \"resource\": \"http://localhost/config.json\"\n    },\n    \"expected_output\": \"{...}\",  // Expected JSON configuration data as a string (local resource)\n    \"test_aspect\": \"Valid JSON format with local URL\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"format\": \"XML\",\n      \"resource\": \"http://example.com/config.xml\"\n    },\n    \"expected_output\": \"<config>...</config>\",  // Expected XML configuration data as a string\n    \"test_aspect\": \"Valid XML format and valid URL (re-test for consistency)\"\n  }\n}\n```"}
{"index": 1904, "preference": "functionality", "prompt": "You are tasked with implementing a logging system for a software application. The logging system should support different log levels and be able to log messages with variable arguments. Your task is to create a class that provides this logging functionality.\n\nYou need to implement a class `Logger` with the following requirements:\n1. The class should have a method `log` that takes a log level and a message with variable arguments and logs the message according to the specified log level.\n2. The log levels should include `LOGGER_INFO`, `LOGGER_WARNING`, and `LOGGER_ERROR`.\n3. The `log` method should format and output the log message along with any variable arguments provided.\n4. The log messages should be printed to the console.\n\nYour implementation should be able to handle the following log message formats:\n- \"is equivalent.\"\n- \"results in counterexample %s .\", where %s is a string representation of a counterexample.\n\nYou should use the provided code snippet as a reference for the log message formats and the use of the `my_logger` function.\n\nYour task is to implement the `Logger` class and demonstrate its usage by logging messages with different log levels and variable arguments.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_INFO\",\n      \"message\": \"This is an info message.\"\n    },\n    \"expected_output\": \"INFO: This is an info message.\",\n    \"test_aspect\": \"Testing logging at INFO level with a simple message.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_WARNING\",\n      \"message\": \"This is a warning message.\"\n    },\n    \"expected_output\": \"WARNING: This is a warning message.\",\n    \"test_aspect\": \"Testing logging at WARNING level with a simple message.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_ERROR\",\n      \"message\": \"This is an error message.\"\n    },\n    \"expected_output\": \"ERROR: This is an error message.\",\n    \"test_aspect\": \"Testing logging at ERROR level with a simple message.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_INFO\",\n      \"message\": \"Counterexample %s.\",\n      \"args\": [\"example1\"]\n    },\n    \"expected_output\": \"INFO: Counterexample example1.\",\n    \"test_aspect\": \"Testing INFO level logging with a formatted message including variable arguments.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_WARNING\",\n      \"message\": \"This will result in counterexample %s .\",\n      \"args\": [\"example2\"]\n    },\n    \"expected_output\": \"WARNING: This will result in counterexample example2.\",\n    \"test_aspect\": \"Testing WARNING level logging with a formatted message including variable arguments.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_ERROR\",\n      \"message\": \"Error occurred while processing the item %s.\",\n      \"args\": [\"item123\"]\n    },\n    \"expected_output\": \"ERROR: Error occurred while processing the item item123.\",\n    \"test_aspect\": \"Testing ERROR level logging with a formatted message including variable arguments.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_INFO\",\n      \"message\": \"is equivalent.\"\n    },\n    \"expected_output\": \"INFO: is equivalent.\",\n    \"test_aspect\": \"Testing INFO level logging with a specific message format.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_WARNING\",\n      \"message\": \"An unexpected condition was encountered: %s.\",\n      \"args\": [\"low disk space\"]\n    },\n    \"expected_output\": \"WARNING: An unexpected condition was encountered: low disk space.\",\n    \"test_aspect\": \"Testing WARNING level logging with a specific message format and variable arguments.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_ERROR\",\n      \"message\": \"Critical failure in the module: %s.\",\n      \"args\": [\"moduleXYZ\"]\n    },\n    \"expected_output\": \"ERROR: Critical failure in the module: moduleXYZ.\",\n    \"test_aspect\": \"Testing ERROR level logging with a specific message format and variable arguments.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"log_level\": \"LOGGER_WARNING\",\n      \"message\": \"This is a warning about a possible issue.\"\n    },\n    \"expected_output\": \"WARNING: This is a warning about a possible issue.\",\n    \"test_aspect\": \"Testing logging at WARNING level with a message without variable arguments.\"\n  }\n}\n```"}
{"index": 1219, "preference": "functionality", "prompt": "You are tasked with implementing a function that processes a given text and returns a modified version of the text. The function should perform the following operations:\n1. Remove any leading or trailing whitespace from the text.\n2. Convert the text to lowercase.\n3. Replace all occurrences of the word \"apple\" with \"orange\".\n\nYou need to implement the `processText` function, which takes a string `text` as input and returns the modified text based on the operations mentioned above.\n\nFunction Signature: \n```python\ndef processText(text: str) -> str:\n    # Your implementation\n```\n\nExample:\nInput:\n```\ntext = \"  An APPLE a day keeps the doctor away  \"\n```\nOutput:\n```\n\"an orange a day keeps the doctor away\"\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Test with an empty string\"\n  },\n  \"test_case2\": {\n    \"input\": \"   Hello World!   \",\n    \"expected_output\": \"hello world!\",\n    \"test_aspect\": \"Test with leading and trailing whitespace and no occurrences of 'apple'\"\n  },\n  \"test_case3\": {\n    \"input\": \"An APPLE a day keeps the doctor away\",\n    \"expected_output\": \"an orange a day keeps the doctor away\",\n    \"test_aspect\": \"Test with the word 'apple' in different cases\"\n  },\n  \"test_case4\": {\n    \"input\": \"   APPLE   is a fruit   \",\n    \"expected_output\": \"orange is a fruit\",\n    \"test_aspect\": \"Test with leading and trailing whitespace around 'apple'\"\n  },\n  \"test_case5\": {\n    \"input\": \"This text does not have the keyword.\",\n    \"expected_output\": \"this text does not have the keyword.\",\n    \"test_aspect\": \"Test with text that does not contain 'apple'\"\n  },\n  \"test_case6\": {\n    \"input\": \" APPLE   and   apple  are the same word.\",\n    \"expected_output\": \"orange and orange are the same word.\",\n    \"test_aspect\": \"Test mixed case occurrences of 'apple' with whitespace\"\n  },\n  \"test_case7\": {\n    \"input\": \"Apple pie is delicious.\",\n    \"expected_output\": \"orange pie is delicious.\",\n    \"test_aspect\": \"Test with 'apple' at the start of the sentence\"\n  },\n  \"test_case8\": {\n    \"input\": \"   I love apple!   \",\n    \"expected_output\": \"i love orange!\",\n    \"test_aspect\": \"Test with punctuation following 'apple' and whitespace\"\n  },\n  \"test_case9\": {\n    \"input\": \"Multiple apples in the basket.\",\n    \"expected_output\": \"multiple oranges in the basket.\",\n    \"test_aspect\": \"Test with plural form 'apples'\"\n  },\n  \"test_case10\": {\n    \"input\": \"  A day without apple is a day wasted.  \",\n    \"expected_output\": \"a day without orange is a day wasted.\",\n    \"test_aspect\": \"Test a sentence with leading and trailing whitespace and a single occurrence of 'apple'\"\n  }\n}\n```"}
{"index": 3194, "preference": "functionality", "prompt": "You are given a C++ header file `example.h` containing the following code snippet:\n\n```cpp\n#ifndef EXAMPLE_H\n#define EXAMPLE_H\n\n// Your task is to complete the implementation of the function below.\n\n#endif\n```\n\nYour task is to implement the missing function inside the `example.h` header file. The function signature is as follows:\n\n```cpp\n/**\n * Takes an integer array and its size as input and returns the sum of all elements.\n * \n * @param arr The input integer array\n * @param size The size of the input array\n * @return The sum of all elements in the array\n */\nint sumArray(const int arr[], int size);\n```\n\nYou need to write the complete implementation of the `sumArray` function inside the `example.h` header file. The function should calculate and return the sum of all elements in the input array.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"arr\": [1, 2, 3, 4, 5], \"size\": 5},\n    \"expected_output\": 15,\n    \"test_aspect\": \"Standard case with positive integers\"\n  },\n  \"test_case2\": {\n    \"input\": {\"arr\": [-1, -2, -3, -4, -5], \"size\": 5},\n    \"expected_output\": -15,\n    \"test_aspect\": \"Standard case with negative integers\"\n  },\n  \"test_case3\": {\n    \"input\": {\"arr\": [0, 0, 0, 0, 0], \"size\": 5},\n    \"expected_output\": 0,\n    \"test_aspect\": \"All elements are zero\"\n  },\n  \"test_case4\": {\n    \"input\": {\"arr\": [10], \"size\": 1},\n    \"expected_output\": 10,\n    \"test_aspect\": \"Single element array with a positive integer\"\n  },\n  \"test_case5\": {\n    \"input\": {\"arr\": [-5], \"size\": 1},\n    \"expected_output\": -5,\n    \"test_aspect\": \"Single element array with a negative integer\"\n  },\n  \"test_case6\": {\n    \"input\": {\"arr\": [], \"size\": 0},\n    \"expected_output\": 0,\n    \"test_aspect\": \"Empty array case\"\n  },\n  \"test_case7\": {\n    \"input\": {\"arr\": [1, -1, 1, -1], \"size\": 4},\n    \"expected_output\": 0,\n    \"test_aspect\": \"Array with alternating positive and negative integers\"\n  },\n  \"test_case8\": {\n    \"input\": {\"arr\": [1000, 2000, 3000], \"size\": 3},\n    \"expected_output\": 6000,\n    \"test_aspect\": \"Array with large positive integers\"\n  },\n  \"test_case9\": {\n    \"input\": {\"arr\": [-1000, -2000, 1000], \"size\": 3},\n    \"expected_output\": -2000,\n    \"test_aspect\": \"Array with mixed large integers\"\n  },\n  \"test_case10\": {\n    \"input\": {\"arr\": [0, -1, -2, 3], \"size\": 4},\n    \"expected_output\": 0,\n    \"test_aspect\": \"Array with zero and a mix of negative and positive integers\"\n  }\n}\n```"}
{"index": 10026, "preference": "functionality", "prompt": "You are tasked with creating a Python function that extracts specific values from a nested dictionary. The function should take in a dictionary `valueDict` and a list of keys `keyList`. It should then return the value associated with the last key in the list, if all the keys in the list exist in the dictionary. If any key is missing, the function should return None.\n\nThe function signature should be:\n```python\ndef extract_value(valueDict: dict, keyList: list) -> any:\n    pass\n```\n\nFor example, given the following dictionary and key list:\n```python\nvalueDict = {\n    'metadata': {\n        'namespace': 'production',\n        'version': 1.0\n    }\n}\nkeyList = ['metadata', 'namespace']\n```\nThe function should return `'production'` since all the keys in the list exist in the dictionary and the last key in the list is `'namespace'`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"valueDict\": {\n        \"metadata\": {\n          \"namespace\": \"production\",\n          \"version\": 1.0\n        }\n      },\n      \"keyList\": [\"metadata\", \"namespace\"]\n    },\n    \"expected_output\": \"production\",\n    \"test_aspect\": \"Basic case with all keys present.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"valueDict\": {\n        \"user\": {\n          \"name\": \"Alice\",\n          \"age\": 30\n        }\n      },\n      \"keyList\": [\"user\", \"age\"]\n    },\n    \"expected_output\": 30,\n    \"test_aspect\": \"Checking integer value as output.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"valueDict\": {\n        \"settings\": {\n          \"theme\": \"dark\",\n          \"notifications\": True\n        }\n      },\n      \"keyList\": [\"settings\", \"notifications\"]\n    },\n    \"expected_output\": True,\n    \"test_aspect\": \"Extracting boolean value from nested dictionary.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"valueDict\": {\n        \"config\": {\n          \"enabled\": False,\n          \"max_connections\": 5\n        }\n      },\n      \"keyList\": [\"config\", \"max_connections\"]\n    },\n    \"expected_output\": 5,\n    \"test_aspect\": \"Extracting maximum connections from the config.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"valueDict\": {\n        \"data\": {\n          \"value\": [1, 2, 3],\n          \"label\": \"sample\"\n        }\n      },\n      \"keyList\": [\"data\", \"label\"]\n    },\n    \"expected_output\": \"sample\",\n    \"test_aspect\": \"Extracting string from a nested list.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"valueDict\": {},\n      \"keyList\": [\"nonexistent\"]\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Handling case with an empty dictionary.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"valueDict\": {\n        \"level1\": {\n          \"level2\": {\n            \"level3\": \"deep_value\"\n          }\n        }\n      },\n      \"keyList\": [\"level1\", \"level2\", \"level3\"]\n    },\n    \"expected_output\": \"deep_value\",\n    \"test_aspect\": \"Extracting value from multiple nested levels.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"valueDict\": {\n        \"root\": {\n          \"child\": {}\n        }\n      },\n      \"keyList\": [\"root\", \"child\", \"missing_key\"]\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Testing with a missing key in deeply nested structure.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"valueDict\": {\n        \"info\": {\n          \"details\": {\n            \"description\": \"Test description\"\n          }\n        }\n      },\n      \"keyList\": [\"info\", \"details\", \"description\"]\n    },\n    \"expected_output\": \"Test description\",\n    \"test_aspect\": \"Extracting string from fully nested structure.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"valueDict\": {\n        \"config\": {\n          \"options\": {\n            \"enabled\": True\n          }\n        }\n      },\n      \"keyList\": [\"config\", \"options\", \"enabled\"]\n    },\n    \"expected_output\": True,\n    \"test_aspect\": \"Verifying boolean output in a nested dictionary.\"\n  }\n}\n```"}
{"index": 37281, "preference": "functionality", "prompt": "You are tasked with implementing a function to generate adversarial examples using the DeepFool algorithm. The DeepFool algorithm is a method for crafting adversarial perturbations to fool a machine learning model. The provided code snippet is a part of a function to configure the parameters for the DeepFool algorithm.\n\nYour task is to complete the implementation of the `config_deepfool` function by adding the remaining parameters and returning the configured DeepFool parameters as a dictionary.\n\nThe function signature and the parameters to be added are as follows:\n```python\ndef config_deepfool(targeted, adv_ys):\n    \"\"\"\n    Configure the parameters for the DeepFool algorithm.\n\n    Args:\n    - targeted: A boolean indicating whether the attack is targeted or untargeted.\n    - adv_ys: The adversarial targets if the attack is targeted.\n\n    Returns:\n    - deepfool_params: A dictionary containing the configured DeepFool parameters.\n    \"\"\"\n    # Add remaining parameters and return the configured DeepFool parameters as a dictionary\n```\n\nThe parameters to be added are:\n- `yname`: A string representing the name of the target label, which is 'y_target' if the attack is targeted, and 'y' if the attack is untargeted.\n- `nb_candidate`: An integer representing the number of candidate classes to consider during the attack.\n- `overshoot`: A float representing the desired margin by which the adversarial perturbation should surpass the decision boundary.\n- `max_iter`: An integer representing the maximum number of iterations for the DeepFool algorithm.\n\nYour task is to complete the `config_deepfool` function by adding the remaining parameters and returning the configured DeepFool parameters as a dictionary.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"targeted\": true, \"adv_ys\": \"target_label\"},\n    \"expected_output\": {\n      \"yname\": \"y_target\",\n      \"nb_candidate\": 10,\n      \"overshoot\": 0.02,\n      \"max_iter\": 50\n    },\n    \"test_aspect\": \"Test with targeted attack\"\n  },\n  \"test_case2\": {\n    \"input\": {\"targeted\": false, \"adv_ys\": None},\n    \"expected_output\": {\n      \"yname\": \"y\",\n      \"nb_candidate\": 10,\n      \"overshoot\": 0.02,\n      \"max_iter\": 50\n    },\n    \"test_aspect\": \"Test with untargeted attack\"\n  },\n  \"test_case3\": {\n    \"input\": {\"targeted\": true, \"adv_ys\": \"class_3\"},\n    \"expected_output\": {\n      \"yname\": \"y_target\",\n      \"nb_candidate\": 10,\n      \"overshoot\": 0.02,\n      \"max_iter\": 50\n    },\n    \"test_aspect\": \"Test with different target label in targeted attack\"\n  },\n  \"test_case4\": {\n    \"input\": {\"targeted\": false, \"adv_ys\": None},\n    \"expected_output\": {\n      \"yname\": \"y\",\n      \"nb_candidate\": 5,\n      \"overshoot\": 0.01,\n      \"max_iter\": 100\n    },\n    \"test_aspect\": \"Test with reduced candidates, lower overshoot, and higher max_iter\"\n  },\n  \"test_case5\": {\n    \"input\": {\"targeted\": true, \"adv_ys\": \"class_2\"},\n    \"expected_output\": {\n      \"yname\": \"y_target\",\n      \"nb_candidate\": 15,\n      \"overshoot\": 0.03,\n      \"max_iter\": 80\n    },\n    \"test_aspect\": \"Test with increased candidate classes and overshoot in targeted attack\"\n  },\n  \"test_case6\": {\n    \"input\": {\"targeted\": false, \"adv_ys\": None},\n    \"expected_output\": {\n      \"yname\": \"y\",\n      \"nb_candidate\": 10,\n      \"overshoot\": 0.02,\n      \"max_iter\": 150\n    },\n    \"test_aspect\": \"Test with max_iter increased for untargeted attack\"\n  },\n  \"test_case7\": {\n    \"input\": {\"targeted\": true, \"adv_ys\": \"class_1\"},\n    \"expected_output\": {\n      \"yname\": \"y_target\",\n      \"nb_candidate\": 10,\n      \"overshoot\": 0.02,\n      \"max_iter\": 50\n    },\n    \"test_aspect\": \"Test with different target label in targeted attack with default params\"\n  },\n  \"test_case8\": {\n    \"input\": {\"targeted\": false, \"adv_ys\": None},\n    \"expected_output\": {\n      \"yname\": \"y\",\n      \"nb_candidate\": 10,\n      \"overshoot\": 0.02,\n      \"max_iter\": 50\n    },\n    \"test_aspect\": \"Test with default parameters for untargeted attack\"\n  },\n  \"test_case9\": {\n    \"input\": {\"targeted\": true, \"adv_ys\": \"class_4\"},\n    \"expected_output\": {\n      \"yname\": \"y_target\",\n      \"nb_candidate\": 10,\n      \"overshoot\": 0.02,\n      \"max_iter\": 50\n    },\n    \"test_aspect\": \"Test with another target label in targeted attack\"\n  },\n  \"test_case10\": {\n    \"input\": {\"targeted\": false, \"adv_ys\": None},\n    \"expected_output\": {\n      \"yname\": \"y\",\n      \"nb_candidate\": 20,\n      \"overshoot\": 0.05,\n      \"max_iter\": 200\n    },\n    \"test_aspect\": \"Test with higher number of candidates, overshoot and max_iter for untargeted attack\"\n  }\n}\n```"}
{"index": 38000, "preference": "functionality", "prompt": "You are given a list of integers representing the scores of students in a class. The task is to find the highest score achieved by any student in the class.\n\nWrite a function `find_highest_score` that takes in a list of integers representing the scores and returns the highest score achieved by any student.\n\nExample:\nInput:\nscores = [85, 92, 78, 90, 88]\nOutput:\n92\n\nInput:\nscores = [70, 65, 80, 75, 85, 90]\nOutput:\n90", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [85, 92, 78, 90, 88],\n    \"expected_output\": 92,\n    \"test_aspect\": \"Typical case with multiple scores.\"\n  },\n  \"test_case2\": {\n    \"input\": [70, 65, 80, 75, 85, 90],\n    \"expected_output\": 90,\n    \"test_aspect\": \"Another typical case with different scores.\"\n  },\n  \"test_case3\": {\n    \"input\": [100, 100, 100],\n    \"expected_output\": 100,\n    \"test_aspect\": \"All scores are the same and are the highest.\"\n  },\n  \"test_case4\": {\n    \"input\": [0, 0, 0],\n    \"expected_output\": 0,\n    \"test_aspect\": \"All scores are zero.\"\n  },\n  \"test_case5\": {\n    \"input\": [-5, -10, -1],\n    \"expected_output\": -1,\n    \"test_aspect\": \"All scores are negative, testing handling of negatives.\"\n  },\n  \"test_case6\": {\n    \"input\": [10],\n    \"expected_output\": 10,\n    \"test_aspect\": \"Single score in the list.\"\n  },\n  \"test_case7\": {\n    \"input\": [],\n    \"expected_output\": null,\n    \"test_aspect\": \"Empty list, should handle edge case gracefully.\"\n  },\n  \"test_case8\": {\n    \"input\": [150, 200, 50, 175],\n    \"expected_output\": 200,\n    \"test_aspect\": \"Case with higher values.\"\n  },\n  \"test_case9\": {\n    \"input\": [95, 85, 75, 65, 55],\n    \"expected_output\": 95,\n    \"test_aspect\": \"Descending order of scores.\"\n  },\n  \"test_case10\": {\n    \"input\": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n    \"expected_output\": 100,\n    \"test_aspect\": \"Ascending order of scores.\"\n  }\n}\n```"}
{"index": 23844, "preference": "functionality", "prompt": "You are tasked with implementing a custom Enum class in Python that defaults to the first value in the Enum list. Your task is to create a class `DefaultEnum` that inherits from `Enum` and overrides the `__prepare__` method to set the default value.\n\nYour `DefaultEnum` class should have the following behavior:\n- If no default value is specified, the first value in the Enum list should be considered as the default.\n- If a default value is specified, it should be used as the default.\n- The `DefaultEnum` class should be able to be used as a regular Enum, with the added default behavior.\n\nYour task is to implement the `DefaultEnum` class and demonstrate its usage with a simple example.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ncolor = Color.RED\\n\",\n    \"expected_output\": \"Color.RED\",\n    \"test_aspect\": \"Default value should be the first Enum value when no default is specified.\"\n  },\n  \"test_case2\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ncolor = Color.GREEN\\n\",\n    \"expected_output\": \"Color.GREEN\",\n    \"test_aspect\": \"Enum should allow assignment to any value without issues.\"\n  },\n  \"test_case3\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ncolor = Color.BLUE\\n\",\n    \"expected_output\": \"Color.BLUE\",\n    \"test_aspect\": \"Enum should allow assignment to any value without issues.\"\n  },\n  \"test_case4\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ncolor = Color()\\n\",\n    \"expected_output\": \"Color.RED\",\n    \"test_aspect\": \"Default value should automatically be assigned when instantiated.\"\n  },\n  \"test_case5\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\nclass CustomColor(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n    DEFAULT = Color.GREEN\\n\\ncolor = CustomColor.DEFAULT\\n\",\n    \"expected_output\": \"CustomColor.GREEN\",\n    \"test_aspect\": \"Custom default value should be honored when specified.\"\n  },\n  \"test_case6\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ncolor = Color()\\n\\ncolor = Color(color)\\n\",\n    \"expected_output\": \"Color.RED\",\n    \"test_aspect\": \"Reassignment should maintain the behavior of default Enum value.\"\n  },\n  \"test_case7\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ncolor = Color.RED\\n\\nprint(color.value)\\n\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Enum value should correctly return the assigned integer value.\"\n  },\n  \"test_case8\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ntry:\\n    color = Color(4)\\nexcept ValueError as e:\\n    output = str(e)\\n\",\n    \"expected_output\": \"'4 is not a valid Color'\",\n    \"test_aspect\": \"Invalid Enum assignment should raise a ValueError.\"\n  },\n  \"test_case9\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ncolor = Color.GREEN\\n\\ncolor = Color(color)\\n\",\n    \"expected_output\": \"Color.GREEN\",\n    \"test_aspect\": \"Reassignment from existing Enum value should remain valid.\"\n  },\n  \"test_case10\": {\n    \"input\": \"class Color(DefaultEnum):\\n    RED = 1\\n    GREEN = 2\\n    BLUE = 3\\n\\ncolor = Color()\\n\\nassert color is Color.RED\\n\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Ensure that the default value is correctly asserted as Color.RED.\"\n  }\n}\n```"}
{"index": 10527, "preference": "functionality", "prompt": "You are tasked with implementing a function to calculate the correlation coefficient and create a scatter plot to visualize the relationship between two given arrays of numerical data. The function should handle cases where the input arrays have different lengths and raise a ValueError in such instances. Additionally, the function should include error handling for cases where the input arrays have insufficient data points to calculate the correlation coefficient. \n\nYou are provided with a code snippet that includes assertions and tests for the function. The snippet uses the `npt.assert_equal` and `pytest.raises` functions to validate the behavior of the function. Your task is to create the `scatter_correlation` function and ensure that it satisfies the requirements and passes the provided tests.", "test_cases": "{\n  \"test_case1\": {\n    \"input\": {\n      \"x\": [1, 2, 3, 4, 5],\n      \"y\": [2, 3, 4, 5, 6]\n    },\n    \"expected_output\": {\n      \"correlation_coefficient\": 1.0,\n      \"plot\": \"scatter_plot_displayed\"\n    },\n    \"test_aspect\": \"Basic functionality with positive correlation\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"x\": [1, 2, 3],\n      \"y\": [1, 2, 3]\n    },\n    \"expected_output\": {\n      \"correlation_coefficient\": 1.0,\n      \"plot\": \"scatter_plot_displayed\"\n    },\n    \"test_aspect\": \"Basic functionality with equal values\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"x\": [1, 2, 3, 4, 5],\n      \"y\": [5, 4, 3, 2, 1]\n    },\n    \"expected_output\": {\n      \"correlation_coefficient\": -1.0,\n      \"plot\": \"scatter_plot_displayed\"\n    },\n    \"test_aspect\": \"Negative correlation\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"x\": [1, 2],\n      \"y\": [1]\n    },\n    \"expected_output\": \"ValueError\",\n    \"test_aspect\": \"Handling arrays of different lengths\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"x\": [],\n      \"y\": []\n    },\n    \"expected_output\": \"ValueError\",\n    \"test_aspect\": \"Insufficient data points (empty arrays)\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"x\": [1],\n      \"y\": [2]\n    },\n    \"expected_output\": \"ValueError\",\n    \"test_aspect\": \"Insufficient data points (single point)\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"x\": [1, 2, 3],\n      \"y\": [2, 4]\n    },\n    \"expected_output\": \"ValueError\",\n    \"test_aspect\": \"Handling arrays of different lengths with valid numeric data\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"x\": [1, 2, 3, 4, 5],\n      \"y\": [2, 2, 2, 2, 2]\n    },\n    \"expected_output\": {\n      \"correlation_coefficient\": 0.0,\n      \"plot\": \"scatter_plot_displayed\"\n    },\n    \"test_aspect\": \"Zero correlation with constant values\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"x\": [5, 6, 7, 8, 9],\n      \"y\": [1, 2, 3, 4, 5]\n    },\n    \"expected_output\": {\n      \"correlation_coefficient\": -0.9999999999999999,\n      \"plot\": \"scatter_plot_displayed\"\n    },\n    \"test_aspect\": \"Near-perfect negative correlation\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"x\": [1, 2, 3, 4],\n      \"y\": [1, 1, 2, 2]\n    },\n    \"expected_output\": {\n      \"correlation_coefficient\": 0.5,\n      \"plot\": \"scatter_plot_displayed\"\n    },\n    \"test_aspect\": \"Partial correlation\"\n  }\n}"}
{"index": 21406, "preference": "functionality", "prompt": "You are given a code snippet that initializes a variable `num` to 1 and an empty list `items`. The code then enters an infinite loop. Your task is to complete the code by adding functionality that allows the user to input integers and store them in the `items` list until the user enters a negative number. Once a negative number is entered, the loop should terminate, and the program should output the sum of all the positive numbers entered before the negative number.\n\nComplete the code snippet to achieve the described functionality.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"5\\n10\\n15\\n-1\\n\",\n    \"expected_output\": \"30\\n\",\n    \"test_aspect\": \"Basic functionality - positive integers followed by a negative number\"\n  },\n  \"test_case2\": {\n    \"input\": \"0\\n0\\n-1\\n\",\n    \"expected_output\": \"0\\n\",\n    \"test_aspect\": \"Handling of zeros - sum should be zero when only zeros are entered\"\n  },\n  \"test_case3\": {\n    \"input\": \"-5\\n\",\n    \"expected_output\": \"0\\n\",\n    \"test_aspect\": \"Immediate termination - negative number entered first\"\n  },\n  \"test_case4\": {\n    \"input\": \"10\\n20\\n30\\n40\\n-5\\n\",\n    \"expected_output\": \"100\\n\",\n    \"test_aspect\": \"Multiple positive inputs - sum all positive numbers correctly\"\n  },\n  \"test_case5\": {\n    \"input\": \"1\\n-2\\n\",\n    \"expected_output\": \"1\\n\",\n    \"test_aspect\": \"Single positive followed by a negative - verify sum with minimal input\"\n  },\n  \"test_case6\": {\n    \"input\": \"100\\n50\\n-50\\n\",\n    \"expected_output\": \"150\\n\",\n    \"test_aspect\": \"Large positive inputs - check correct summation of larger numbers\"\n  },\n  \"test_case7\": {\n    \"input\": \"3\\n3\\n3\\n3\\n-1\\n\",\n    \"expected_output\": \"12\\n\",\n    \"test_aspect\": \"Identical positive inputs - ensure sum is calculated properly\"\n  },\n  \"test_case8\": {\n    \"input\": \"2\\n-2\\n\",\n    \"expected_output\": \"2\\n\",\n    \"test_aspect\": \"Immediate negative after positive - should return positive input\"\n  },\n  \"test_case9\": {\n    \"input\": \"-10\\n1\\n2\\n3\\n-1\\n\",\n    \"expected_output\": \"6\\n\",\n    \"test_aspect\": \"Mixed negative first - should ignore the first negative\"\n  },\n  \"test_case10\": {\n    \"input\": \"5\\n-100\\n\",\n    \"expected_output\": \"5\\n\",\n    \"test_aspect\": \"Positive followed by a large negative - sum should be just the positive\"\n  }\n}\n```"}
{"index": 3928, "preference": "functionality", "prompt": "You are tasked with implementing a simple Java Spring Boot application for managing teams. The application uses Spring's dependency injection and JPA for data persistence. Your task is to complete the implementation of the `TeamServiceImpl` class, which provides methods for creating and retrieving teams.\n\nThe `TeamServiceImpl` class is annotated with `@Service` to indicate that it is a Spring-managed service. It implements the `TeamService` interface, which defines the contract for managing teams.\n\nYour task is to complete the `TeamServiceImpl` class by implementing the `getTeamById` method, which retrieves a team by its ID from the database using the `TeamRepository` dependency. The `TeamRepository` interface provides methods for accessing the team data in the database.\n\nYou should use the `@Autowired` annotation to inject the `TeamRepository` dependency into the `TeamServiceImpl` class. The `getTeamById` method should use the injected `TeamRepository` to retrieve the team with the specified ID.\n\nYour task is to complete the `TeamServiceImpl` class by implementing the `getTeamById` method according to the given requirements.\n\n```java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class TeamServiceImpl implements TeamService {\n\n    @Autowired\n    TeamRepository teamRepository;\n\n    @Override\n    public Team createTeam(Team team) {\n        return teamRepository.save(team);\n    }\n\n    @Override\n    public Team getTeamById(Long teamId) {\n        // TODO: Implement this method to retrieve a team by its ID from the database\n        return teamRepository.findById(teamId).orElse(null);\n    }\n}\n```", "test_cases": "{\n  \"test_case1\": {\n    \"input\": {\n      \"teamId\": 1\n    },\n    \"expected_output\": {\n      \"id\": 1,\n      \"name\": \"Team A\",\n      \"members\": []\n    },\n    \"test_aspect\": \"Standard case for retrieving an existing team by its ID.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"teamId\": 2\n    },\n    \"expected_output\": {\n      \"id\": 2,\n      \"name\": \"Team B\",\n      \"members\": [\"Member 1\", \"Member 2\"]\n    },\n    \"test_aspect\": \"Retrieve a team with members to ensure the retrieval includes related data.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"teamId\": 0\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Test with a non-existent ID to verify that the method returns null.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"teamId\": -1\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Test with a negative ID to ensure it handles invalid input correctly.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"teamId\": 9999\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Test with a large non-existent ID to verify the method handles out-of-range values.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"teamId\": 3\n    },\n    \"expected_output\": {\n      \"id\": 3,\n      \"name\": \"Team C\",\n      \"members\": [\"Member A\", \"Member B\", \"Member C\"]\n    },\n    \"test_aspect\": \"Retrieve a team that has multiple members to ensure that the data is retrieved correctly.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"teamId\": 4\n    },\n    \"expected_output\": {\n      \"id\": 4,\n      \"name\": \"Team D\",\n      \"members\": []\n    },\n    \"test_aspect\": \"Test with a team that has no members to verify that empty lists are handled properly.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"teamId\": null\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Test with a null ID to ensure the method handles null input gracefully.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"teamId\": 5\n    },\n    \"expected_output\": {\n      \"id\": 5,\n      \"name\": \"Team E\",\n      \"members\": [\"Member X\"]\n    },\n    \"test_aspect\": \"Attempt to retrieve a team that contains one member to verify proper data retrieval.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"teamId\": 6\n    },\n    \"expected_output\": {\n      \"id\": 6,\n      \"name\": \"Team F\",\n      \"members\": []\n    },\n    \"test_aspect\": \"Check retrieval of another existing team to ensure consistent access to the database.\"\n  }\n}"}
{"index": 1184, "preference": "functionality", "prompt": "You are tasked with implementing a class for handling XML import operations in a document processing application. The given code snippet is a part of a method responsible for creating an appropriate import context based on the input parameters. The method attempts to obtain a stream for a graphic object URL from a base64-encoded string and then creates an XML import context based on the obtained stream. If the base64 stream is available, an XMLBase64ImportContext is created; otherwise, a default SvXMLImportContext is created. Your task is to design a class structure and method to handle this import context creation logic.\n\nYour task is to implement a class named `XMLImportHandler` with a method `createImportContext` that takes the following parameters:\n- `import`: An object representing the import operation.\n- `nPrefix`: An integer representing the prefix for the import context.\n- `rLocalName`: A string representing the local name for the import context.\n- `xAttrList`: A list of attributes for the import context.\n- `xBase64Stream`: A stream for the base64-encoded graphic object URL.\n\nThe `createImportContext` method should create and return the appropriate import context based on the availability of the base64 stream. If the base64 stream is available, an `XMLBase64ImportContext` should be created; otherwise, a default `SvXMLImportContext` should be created.\n\nYour implementation should adhere to the following assumptions:\n- The `XMLBase64ImportContext` and `SvXMLImportContext` classes are already defined and available for use.\n- The `GetImport()` function returns the import object for the current operation.\n- The `is()` method is used to check the availability of the base64 stream.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": 1,\n      \"rLocalName\": \"testName\",\n      \"xAttrList\": [\"attr1\", \"attr2\"],\n      \"xBase64Stream\": \"valid_base64_stream\"\n    },\n    \"expected_output\": \"XMLBase64ImportContext\",\n    \"test_aspect\": \"Tests creation of XMLBase64ImportContext when a valid base64 stream is provided.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": 2,\n      \"rLocalName\": \"sampleName\",\n      \"xAttrList\": [],\n      \"xBase64Stream\": null\n    },\n    \"expected_output\": \"SvXMLImportContext\",\n    \"test_aspect\": \"Tests creation of SvXMLImportContext when no base64 stream is provided.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": -1,\n      \"rLocalName\": \"negativePrefix\",\n      \"xAttrList\": [\"attr1\"],\n      \"xBase64Stream\": \"valid_base64_stream\"\n    },\n    \"expected_output\": \"XMLBase64ImportContext\",\n    \"test_aspect\": \"Tests handling of negative prefix value with a valid base64 stream.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": 0,\n      \"rLocalName\": \"\",\n      \"xAttrList\": [\"attr1\", \"attr2\"],\n      \"xBase64Stream\": \"valid_base64_stream\"\n    },\n    \"expected_output\": \"XMLBase64ImportContext\",\n    \"test_aspect\": \"Tests handling of an empty local name with a valid base64 stream.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": 3,\n      \"rLocalName\": \"nullStreamTest\",\n      \"xAttrList\": [\"attr1\"],\n      \"xBase64Stream\": \"\"\n    },\n    \"expected_output\": \"SvXMLImportContext\",\n    \"test_aspect\": \"Tests creation of SvXMLImportContext when an empty string is provided as base64 stream.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": 5,\n      \"rLocalName\": \"longAttrList\",\n      \"xAttrList\": [\"attr1\", \"attr2\", \"attr3\", \"attr4\", \"attr5\"],\n      \"xBase64Stream\": \"valid_base64_stream\"\n    },\n    \"expected_output\": \"XMLBase64ImportContext\",\n    \"test_aspect\": \"Tests handling of long attribute lists with a valid base64 stream.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": 10,\n      \"rLocalName\": \"boundaryTest\",\n      \"xAttrList\": [\"attr1\"],\n      \"xBase64Stream\": \"valid_base64_stream\"\n    },\n    \"expected_output\": \"XMLBase64ImportContext\",\n    \"test_aspect\": \"Tests creation with a high prefix value but valid base64 stream.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"import\": null,\n      \"nPrefix\": 1,\n      \"rLocalName\": \"nullImport\",\n      \"xAttrList\": [],\n      \"xBase64Stream\": null\n    },\n    \"expected_output\": \"SvXMLImportContext\",\n    \"test_aspect\": \"Tests behavior when import object is null, checking if it defaults correctly.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": 2,\n      \"rLocalName\": \"unicodeName\",\n      \"xAttrList\": [\"attr1\", \"attr2\"],\n      \"xBase64Stream\": \"valid_base64_stream_with_special_chars_©\"\n    },\n    \"expected_output\": \"XMLBase64ImportContext\",\n    \"test_aspect\": \"Tests creation of XMLBase64ImportContext with special characters in base64 stream.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"import\": \"valid_import_object\",\n      \"nPrefix\": 4,\n      \"rLocalName\": \"emptyAttrList\",\n      \"xAttrList\": [],\n      \"xBase64Stream\": null\n    },\n    \"expected_output\": \"SvXMLImportContext\",\n    \"test_aspect\": \"Tests handling of empty attribute list with no base64 stream.\"\n  }\n}\n```"}
{"index": 38543, "preference": "functionality", "prompt": "You are tasked with implementing a function that splits an array into subarrays of a specified size. The function should take an array and a size as input and return a list of subarrays, each of the specified size.\n\nWrite a function `split(arr, size)` where:\n- `arr` is a list of integers\n- `size` is an integer representing the size of each subarray\n\nThe function should return a list of subarrays, where each subarray has a maximum size of `size`. If the length of `arr` is not evenly divisible by `size`, the last subarray should contain the remaining elements.\n\nFor example, given the input `arr = [1, 2, 3, 4, 5]` and `size = 2`, the function should return `[[1, 2], [3, 4], [5]]`.\n\nYour task is to implement the `split` function to achieve this behavior.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"arr\": [1, 2, 3, 4, 5],\n      \"size\": 2\n    },\n    \"expected_output\": [[1, 2], [3, 4], [5]],\n    \"test_aspect\": \"Basic functionality with even split and one remaining element.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"arr\": [1, 2, 3, 4, 5, 6],\n      \"size\": 3\n    },\n    \"expected_output\": [[1, 2, 3], [4, 5, 6]],\n    \"test_aspect\": \"Basic functionality with even split.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"arr\": [1],\n      \"size\": 1\n    },\n    \"expected_output\": [[1]],\n    \"test_aspect\": \"Single element array with size 1.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"arr\": [],\n      \"size\": 1\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Empty array input.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"arr\": [1, 2, 3, 4, 5],\n      \"size\": 6\n    },\n    \"expected_output\": [[1, 2, 3, 4, 5]],\n    \"test_aspect\": \"Size greater than array length.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"arr\": [1, 2, 3, 4, 5],\n      \"size\": 1\n    },\n    \"expected_output\": [[1], [2], [3], [4], [5]],\n    \"test_aspect\": \"Each element as a separate subarray.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"arr\": [1, 2, 3],\n      \"size\": 0\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Invalid size, should handle size equal to zero.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"arr\": [10, 20, 30, 40],\n      \"size\": 2\n    },\n    \"expected_output\": [[10, 20], [30, 40]],\n    \"test_aspect\": \"Basic functionality with even split and multiple elements.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"arr\": [1, 2, 3, 4, 5, 6, 7],\n      \"size\": 4\n    },\n    \"expected_output\": [[1, 2, 3, 4], [5, 6, 7]],\n    \"test_aspect\": \"Array length not evenly divisible by size.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"arr\": [1, 2, 3, 4, 5, 6, 7, 8, 9],\n      \"size\": 3\n    },\n    \"expected_output\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    \"test_aspect\": \"Array with multiple subarrays where last is complete.\"\n  }\n}\n```"}
{"index": 39144, "preference": "functionality", "prompt": "You are tasked with creating a Python function that retrieves metrics for a specified component of a given topology within a specified time window. The function should take into account the limitations of the Topology master, which stores data for a maximum duration of 3 hours. Your task is to implement the function `retrieve_metrics` that accepts the `topology_id`, `component_id`, `start_time`, and `end_time` as arguments and returns the metrics gathered for the specified component within the given time window.\n\nThe function signature should be:\n```python\ndef retrieve_metrics(topology_id: str, component_id: str, start_time: datetime, end_time: datetime) -> List[Dict[str, Union[str, int, float]]]:\n    pass\n```\n\nWhere:\n- `topology_id` (str): The identification string of the topology.\n- `component_id` (str): The identification string of the component for which metrics are to be retrieved.\n- `start_time` (datetime): The start time of the time window for gathering metrics.\n- `end_time` (datetime): The end time of the time window for gathering metrics.\n\nThe function should return a list of dictionaries, where each dictionary represents the metrics gathered for the specified component within the given time window. Each dictionary should contain key-value pairs representing the specific metrics and their corresponding values.\n\nEnsure that the function considers the 3-hour limit of data storage in the Topology master and handles any potential errors or edge cases related to the input parameters.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"topology_id\": \"topo1\",\n      \"component_id\": \"comp1\",\n      \"start_time\": \"2023-10-01T12:00:00\",\n      \"end_time\": \"2023-10-01T12:30:00\"\n    },\n    \"expected_output\": [\n      {\"metric\": \"cpu_usage\", \"value\": 75.5},\n      {\"metric\": \"memory_usage\", \"value\": 2048}\n    ],\n    \"test_aspect\": \"Normal case within the 3-hour limit and valid time range.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"topology_id\": \"topo2\",\n      \"component_id\": \"comp2\",\n      \"start_time\": \"2023-10-01T11:00:00\",\n      \"end_time\": \"2023-10-01T12:00:00\"\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Case where no data is available for the specified component.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"topology_id\": \"topo3\",\n      \"component_id\": \"comp3\",\n      \"start_time\": \"2023-10-01T10:00:00\",\n      \"end_time\": \"2023-10-01T11:00:00\"\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Case where the requested time window exceeds the 3-hour limit.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"topology_id\": \"topo4\",\n      \"component_id\": \"comp4\",\n      \"start_time\": \"2023-10-01T12:30:00\",\n      \"end_time\": \"2023-10-01T13:30:00\"\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Case where the start time is after the end time.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"topology_id\": \"topo5\",\n      \"component_id\": \"comp5\",\n      \"start_time\": \"2023-10-01T12:00:00\",\n      \"end_time\": \"2023-10-01T15:00:00\"\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Case where the end time exceeds the maximum data retention period.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"topology_id\": \"topo6\",\n      \"component_id\": \"comp6\",\n      \"start_time\": \"2023-10-01T12:00:00\",\n      \"end_time\": \"2023-10-01T12:15:00\"\n    },\n    \"expected_output\": [\n      {\"metric\": \"disk_io\", \"value\": 150},\n      {\"metric\": \"network_errors\", \"value\": 0}\n    ],\n    \"test_aspect\": \"Valid case with a specific component and expected metrics.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"topology_id\": \"topo7\",\n      \"component_id\": \"comp7\",\n      \"start_time\": \"2023-10-01T12:00:00\",\n      \"end_time\": \"2023-10-01T12:00:00\"\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Case where start time and end time are the same, resulting in no data.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"topology_id\": \"topo8\",\n      \"component_id\": \"comp8\",\n      \"start_time\": \"2023-10-01T12:00:00\",\n      \"end_time\": \"2023-10-01T13:00:00\"\n    },\n    \"expected_output\": [\n      {\"metric\": \"latency\", \"value\": 200},\n      {\"metric\": \"throughput\", \"value\": 5000}\n    ],\n    \"test_aspect\": \"Case where metrics exist and are within the valid time range.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"topology_id\": \"topo9\",\n      \"component_id\": \"comp9\",\n      \"start_time\": \"2023-10-01T12:00:00\",\n      \"end_time\": \"2023-10-01T15:00:00\"\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Test to ensure that data beyond the 3-hour limit is not returned.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"topology_id\": \"topo10\",\n      \"component_id\": \"comp10\",\n      \"start_time\": \"2023-10-01T12:00:00\",\n      \"end_time\": \"2023-10-01T12:45:00\"\n    },\n    \"expected_output\": [\n      {\"metric\": \"cpu_usage\", \"value\": 60.0},\n      {\"metric\": \"memory_usage\", \"value\": 1024}\n    ],\n    \"test_aspect\": \"Check for retrieval of metrics within the valid range and correct format.\"\n  }\n}\n```"}
{"index": 21986, "preference": "functionality", "prompt": "You are given a directed graph represented by a collection of nodes and their connections. Each node has a unique identifier and a list of neighboring nodes it is connected to. The graph is not necessarily acyclic and may contain cycles. Your task is to implement a function that finds all possible paths from a given start node to any other node in the graph.\n\nThe function `visite_node(node, current_path)` takes two parameters:\n- `node`: The current node being visited.\n- `current_path`: The list of nodes visited so far in the current path.\n\nThe code snippet provided initializes an empty list `paths` and then calls the `visite_node` function with the start node and an empty list as the current path. After all paths are found, the code prints the total number of paths found.\n\nYour task is to implement the `visite_node` function and ensure that it correctly populates the `paths` list with all possible paths from the start node to any other node in the graph.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [\"B\", \"C\"],\n        \"B\": [\"D\"],\n        \"C\": [\"D\", \"E\"],\n        \"D\": [],\n        \"E\": []\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\", \"B\", \"D\"], [\"A\", \"C\", \"D\"], [\"A\", \"C\", \"E\"]],\n      \"path_count\": 3\n    },\n    \"test_aspect\": \"Basic functionality with multiple paths from the start node\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [\"B\"],\n        \"B\": [\"C\"],\n        \"C\": [\"D\"],\n        \"D\": []\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\", \"B\", \"C\", \"D\"]],\n      \"path_count\": 1\n    },\n    \"test_aspect\": \"Linear path with no branches\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [\"B\", \"C\"],\n        \"B\": [\"C\"],\n        \"C\": [\"A\"],\n        \"D\": []\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\", \"B\", \"C\"], [\"A\", \"C\"]],\n      \"path_count\": 2\n    },\n    \"test_aspect\": \"Graph with cycles\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [],\n        \"B\": [],\n        \"C\": []\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\"]],\n      \"path_count\": 1\n    },\n    \"test_aspect\": \"Start node with no outgoing edges\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"graph\": {\n        \"X\": [\"Y\"],\n        \"Y\": [\"Z\"],\n        \"Z\": [\"X\", \"W\"],\n        \"W\": []\n      },\n      \"start_node\": \"X\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"X\", \"Y\", \"Z\", \"W\"]],\n      \"path_count\": 1\n    },\n    \"test_aspect\": \"Path leading to a node with multiple outgoing edges\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [\"B\"],\n        \"B\": [\"A\", \"C\"],\n        \"C\": []\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\", \"B\", \"C\"]],\n      \"path_count\": 1\n    },\n    \"test_aspect\": \"Handling cycles leading back to a previous node\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [\"B\", \"C\"],\n        \"B\": [\"C\"],\n        \"C\": [\"D\"],\n        \"D\": [\"C\"]\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\", \"B\", \"C\", \"D\"], [\"A\", \"C\", \"D\"], [\"A\", \"B\", \"C\", \"D\", \"C\"], [\"A\", \"C\", \"D\", \"C\"]],\n      \"path_count\": 4\n    },\n    \"test_aspect\": \"Complex graph with multiple paths including cycles\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [\"B\"],\n        \"B\": [\"A\"]\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\", \"B\"], [\"A\", \"B\", \"A\"]],\n      \"path_count\": 2\n    },\n    \"test_aspect\": \"Simple cycle between two nodes\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [\"B\", \"C\"],\n        \"B\": [],\n        \"C\": []\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\", \"B\"], [\"A\", \"C\"]],\n      \"path_count\": 2\n    },\n    \"test_aspect\": \"Multiple branches leading to leaf nodes\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"graph\": {\n        \"A\": [\"B\"],\n        \"B\": [\"C\", \"D\"],\n        \"C\": [],\n        \"D\": []\n      },\n      \"start_node\": \"A\"\n    },\n    \"expected_output\": {\n      \"paths\": [[\"A\", \"B\", \"C\"], [\"A\", \"B\", \"D\"]],\n      \"path_count\": 2\n    },\n    \"test_aspect\": \"Branching paths with leaf nodes\"\n  }\n}\n```"}
{"index": 511, "preference": "functionality", "prompt": "You are tasked with creating a program to manage dependencies for a modular system. The system consists of modules, each represented by a directory on the file system. Your program needs to handle the reloading of dependencies when changes occur in the module directories.\n\nYou are given a Java code snippet that includes a method `testReloadMultipleDeps()` which is part of a test suite for the dependency management system. The method creates a module directory and another directory for a different module. It then calls a method `waitReload(dep)` to wait for the dependencies to reload.\n\nYour task is to implement the `waitReload(dep)` method, which should monitor the specified module directory for changes and trigger a reload when changes occur. The method should wait for a specified duration and then perform the reload if any changes are detected.\n\nYour implementation should use Java and may utilize any relevant libraries or built-in functions.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Module directory created with a text file.\",\n    \"expected_output\": \"Reload triggered due to file creation.\",\n    \"test_aspect\": \"Basic functionality of reload on file creation.\"\n  },\n  \"test_case2\": {\n    \"input\": \"Module directory with a text file modified.\",\n    \"expected_output\": \"Reload triggered due to file modification.\",\n    \"test_aspect\": \"Basic functionality of reload on file modification.\"\n  },\n  \"test_case3\": {\n    \"input\": \"Module directory with a text file deleted.\",\n    \"expected_output\": \"Reload triggered due to file deletion.\",\n    \"test_aspect\": \"Basic functionality of reload on file deletion.\"\n  },\n  \"test_case4\": {\n    \"input\": \"No changes in the module directory within specified duration.\",\n    \"expected_output\": \"No reload triggered.\",\n    \"test_aspect\": \"Proper handling of no changes scenario.\"\n  },\n  \"test_case5\": {\n    \"input\": \"Simultaneous changes in multiple files in the module directory.\",\n    \"expected_output\": \"Reload triggered due to changes in multiple files.\",\n    \"test_aspect\": \"Handling multiple changes during monitoring.\"\n  },\n  \"test_case6\": {\n    \"input\": \"Module directory with multiple types of files (e.g., text, image).\",\n    \"expected_output\": \"Reload triggered only for monitored file types.\",\n    \"test_aspect\": \"Filtering reload based on file type.\"\n  },\n  \"test_case7\": {\n    \"input\": \"Monitoring an empty module directory.\",\n    \"expected_output\": \"No reload triggered as no changes detected.\",\n    \"test_aspect\": \"Proper handling of empty directory scenario.\"\n  },\n  \"test_case8\": {\n    \"input\": \"Changing file permissions in the module directory.\",\n    \"expected_output\": \"No reload triggered as no content changes occurred.\",\n    \"test_aspect\": \"Handling of non-content changes.\"\n  },\n  \"test_case9\": {\n    \"input\": \"Changes occur exactly at the edge of the monitored duration.\",\n    \"expected_output\": \"Reload triggered if changes occur within monitored duration.\",\n    \"test_aspect\": \"Handling boundary conditions for timing.\"\n  },\n  \"test_case10\": {\n    \"input\": \"Simulated delay in monitoring using sleep.\",\n    \"expected_output\": \"Reload triggered based on changes after delay.\",\n    \"test_aspect\": \"Testing the stability and delay management in monitoring.\"\n  }\n}\n```"}
{"index": 19136, "preference": "functionality", "prompt": "You are tasked with implementing a Python decorator that adds caching functionality to a view method in a web application. The decorator should handle caching of responses based on the ETag and Last-Modified headers. The provided code snippet shows the skeleton of the decorator function, but it lacks the complete implementation. Your task is to complete the decorator function to enable caching based on ETag and Last-Modified headers.\n\nThe decorator function should take the following parameters:\n- `view_method`: The original view method to be decorated.\n- `etag_func`: A function that generates the ETag for the response.\n- `last_modified_func`: A function that determines the last modified time of the response.\n\nYour task is to complete the `decorator` function to return a new function that wraps the `view_method` and adds caching functionality based on the ETag and Last-Modified headers. The caching should be implemented in such a way that if the client sends an ETag or Last-Modified header in the request, the decorator should check if the response has been modified since the provided ETag or Last-Modified time and return a 304 Not Modified response if appropriate.\n\nYour implementation should handle the 304 Not Modified response, as well as the generation of ETag and Last-Modified headers for the response.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-None-Match\": \"W/\\\"12345\\\"\"\n      },\n      \"etag\": \"W/\\\"12345\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 304,\n      \"headers\": {}\n    },\n    \"test_aspect\": \"Check for 304 Not Modified response when ETag matches.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-None-Match\": \"W/\\\"12345\\\"\"\n      },\n      \"etag\": \"W/\\\"12346\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"ETag\": \"W/\\\"12346\\\"\",\n        \"Last-Modified\": \"2023-10-01T12:00:00Z\"\n      },\n      \"body\": \"Response Data\"\n    },\n    \"test_aspect\": \"Check for 200 OK response when ETag does not match.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-Modified-Since\": \"2023-09-30T12:00:00Z\"\n      },\n      \"etag\": \"W/\\\"12346\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"ETag\": \"W/\\\"12346\\\"\",\n        \"Last-Modified\": \"2023-10-01T12:00:00Z\"\n      },\n      \"body\": \"Response Data\"\n    },\n    \"test_aspect\": \"Check for 200 OK response when Last-Modified is more recent.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-Modified-Since\": \"2023-10-02T12:00:00Z\"\n      },\n      \"etag\": \"W/\\\"12346\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 304,\n      \"headers\": {}\n    },\n    \"test_aspect\": \"Check for 304 Not Modified response when Last-Modified is older.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"request_headers\": {},\n      \"etag\": \"W/\\\"12347\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"ETag\": \"W/\\\"12347\\\"\",\n        \"Last-Modified\": \"2023-10-01T12:00:00Z\"\n      },\n      \"body\": \"Response Data\"\n    },\n    \"test_aspect\": \"Check for 200 OK response when no headers are provided.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-None-Match\": \"W/\\\"invalid\\\"\"\n      },\n      \"etag\": \"W/\\\"12348\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"ETag\": \"W/\\\"12348\\\"\",\n        \"Last-Modified\": \"2023-10-01T12:00:00Z\"\n      },\n      \"body\": \"Response Data\"\n    },\n    \"test_aspect\": \"Check for 200 OK response when ETag is invalid.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-None-Match\": \"W/\\\"12349\\\"\"\n      },\n      \"etag\": \"W/\\\"12349\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 304,\n      \"headers\": {}\n    },\n    \"test_aspect\": \"Check for 304 Not Modified response when ETag matches exactly.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-None-Match\": \"W/\\\"12350\\\"\",\n        \"If-Modified-Since\": \"2023-10-01T12:00:01Z\"\n      },\n      \"etag\": \"W/\\\"12351\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"ETag\": \"W/\\\"12351\\\"\",\n        \"Last-Modified\": \"2023-10-01T12:00:00Z\"\n      },\n      \"body\": \"Response Data\"\n    },\n    \"test_aspect\": \"Check for 200 OK response when both ETag and Last-Modified headers are provided.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-None-Match\": \"\"\n      },\n      \"etag\": \"W/\\\"12352\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"ETag\": \"W/\\\"12352\\\"\",\n        \"Last-Modified\": \"2023-10-01T12:00:00Z\"\n      },\n      \"body\": \"Response Data\"\n    },\n    \"test_aspect\": \"Check for 200 OK response when If-None-Match header is empty.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"request_headers\": {\n        \"If-Modified-Since\": \"2023-10-01T12:00:00Z\"\n      },\n      \"etag\": \"W/\\\"12353\\\"\",\n      \"last_modified\": \"2023-10-01T12:00:00Z\"\n    },\n    \"expected_output\": {\n      \"status_code\": 304,\n      \"headers\": {}\n    },\n    \"test_aspect\": \"Check for 304 Not Modified response when If-Modified-Since is equal to Last-Modified.\"\n  }\n}\n```"}
{"index": 12674, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes a given directory and its subdirectories to find all Python files containing specific import statements. Your function should return a list of tuples, where each tuple contains the file path and the specific import statement found in that file.\n\nYour function should be named `find_import_statements` and should accept two parameters:\n- `directory_path` (string): The path to the directory to be searched.\n- `import_statement` (string): The specific import statement to be searched for in the Python files.\n\nThe import statement to be searched for will always be in the format `from <module> import <identifier>`. For example, `from ygo import globals`.\n\nYour function should search through all Python files (files with a `.py` extension) in the specified directory and its subdirectories. It should then extract the import statements matching the given `import_statement` and return a list of tuples, where each tuple contains the file path and the import statement found.\n\nFor example, given the following directory structure:\n```\nmain_directory/\n    ├── subdirectory1/\n    │   ├── file1.py\n    │   └── file2.py\n    └── subdirectory2/\n        ├── file3.py\n        └── file4.py\n```\nIf `import_statement` is `'from ygo import globals'`, and the import statement is found in `file2.py` and `file4.py`, your function should return:\n```\n[('main_directory/subdirectory1/file2.py', 'from ygo import globals'), ('main_directory/subdirectory2/file4.py', 'from ygo import globals')]\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\"main_directory/subdirectory1\", \"from ygo import globals\"],\n    \"expected_output\": [(\"main_directory/subdirectory1/file2.py\", \"from ygo import globals\"), (\"main_directory/subdirectory2/file4.py\", \"from ygo import globals\")],\n    \"test_aspect\": \"Basic functionality: Check if the function can correctly find the specified import statement in multiple files.\"\n  },\n  \"test_case2\": {\n    \"input\": [\"main_directory/subdirectory1\", \"from nonexistent import globals\"],\n    \"expected_output\": [],\n    \"test_aspect\": \"Non-existent import statement: Ensure the function returns an empty list when the import statement is not found in any file.\"\n  },\n  \"test_case3\": {\n    \"input\": [\"main_directory\", \"from ygo import globals\"],\n    \"expected_output\": [(\"main_directory/subdirectory1/file2.py\", \"from ygo import globals\"), (\"main_directory/subdirectory2/file4.py\", \"from ygo import globals\")],\n    \"test_aspect\": \"Directory processing: Validate the function's ability to search through subdirectories.\"\n  },\n  \"test_case4\": {\n    \"input\": [\"main_directory/subdirectory1\", \"from ygo import non_existent\"],\n    \"expected_output\": [],\n    \"test_aspect\": \"Partial match: Confirm the function does not return false positives for incorrect import statements.\"\n  },\n  \"test_case5\": {\n    \"input\": [\"empty_directory\", \"from ygo import globals\"],\n    \"expected_output\": [],\n    \"test_aspect\": \"Empty directory: Test if the function correctly handles an empty directory scenario.\"\n  },\n  \"test_case6\": {\n    \"input\": [\"main_directory/subdirectory1\", \"from ygo import globals\"],\n    \"expected_output\": [(\"main_directory/subdirectory1/file2.py\", \"from ygo import globals\")],\n    \"test_aspect\": \"Single file match: Ensure the function can find an import statement in a single file.\"\n  },\n  \"test_case7\": {\n    \"input\": [\"main_directory/subdirectory2\", \"from ygo import globals\"],\n    \"expected_output\": [(\"main_directory/subdirectory2/file4.py\", \"from ygo import globals\")],\n    \"test_aspect\": \"Specific subdirectory search: Validate that searches in specific subdirectories return correct results.\"\n  },\n  \"test_case8\": {\n    \"input\": [\"main_directory/subdirectory1\", \"from ygo import globals\"],\n    \"expected_output\": [(\"main_directory/subdirectory1/file2.py\", \"from ygo import globals\")],\n    \"test_aspect\": \"File with multiple matching imports: Validate that only the correct import is returned when multiple are present.\"\n  },\n  \"test_case9\": {\n    \"input\": [\"main_directory\", \"from ygo import globals\"],\n    \"expected_output\": [(\"main_directory/subdirectory1/file2.py\", \"from ygo import globals\"), (\"main_directory/subdirectory2/file4.py\", \"from ygo import globals\")],\n    \"test_aspect\": \"Multiple directories: Confirm that the function can aggregate results from multiple directories.\"\n  },\n  \"test_case10\": {\n    \"input\": [\"main_directory\", \"from ygo import globals\"],\n    \"expected_output\": [(\"main_directory/subdirectory1/file2.py\", \"from ygo import globals\"), (\"main_directory/subdirectory2/file4.py\", \"from ygo import globals\")],\n    \"test_aspect\": \"Special characters in file names: Ensure the function can handle file names with special characters without failure.\"\n  }\n}\n```"}
{"index": 581, "preference": "functionality", "prompt": "You are tasked with creating a program that converts temperatures from Fahrenheit to Celsius. The formula to convert Fahrenheit to Celsius is: \n\nCelsius = (Fahrenheit - 32) * 5/9\n\nYou need to write a function `celsius` that takes an integer parameter representing the temperature in Fahrenheit and returns the equivalent temperature in Celsius. Then, in the main program, iterate through temperatures from 0 to 20 in Fahrenheit and display the Fahrenheit temperature alongside its equivalent Celsius temperature in a tabular format.\n\nYour program should produce an output similar to the following:\n\n```\nFahrenheit    Celsius\n0             -17.78\n1             -17.22\n2             -16.67\n3             -16.11\n4             -15.56\n5             -15.00\n6             -14.44\n7             -13.89\n8             -13.33\n9             -12.78\n10            -12.22\n11            -11.67\n12            -11.11\n13            -10.56\n14            -10.00\n15            -9.44\n16            -8.89\n17            -8.33\n18            -7.78\n19            -7.22\n20            -6.67\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": 0,\n    \"expected_output\": -17.78,\n    \"test_aspect\": \"Basic conversion from Fahrenheit to Celsius\"\n  },\n  \"test_case2\": {\n    \"input\": 10,\n    \"expected_output\": -12.22,\n    \"test_aspect\": \"Conversion for mid-range Fahrenheit value\"\n  },\n  \"test_case3\": {\n    \"input\": 20,\n    \"expected_output\": -6.67,\n    \"test_aspect\": \"Conversion for upper limit of the specified range\"\n  },\n  \"test_case4\": {\n    \"input\": 15,\n    \"expected_output\": -9.44,\n    \"test_aspect\": \"Conversion for a specific Fahrenheit value in the range\"\n  },\n  \"test_case5\": {\n    \"input\": 5,\n    \"expected_output\": -15.00,\n    \"test_aspect\": \"Conversion for lower mid-range Fahrenheit value\"\n  },\n  \"test_case6\": {\n    \"input\": 1,\n    \"expected_output\": -17.22,\n    \"test_aspect\": \"Conversion for a low Fahrenheit value near zero\"\n  },\n  \"test_case7\": {\n    \"input\": 9,\n    \"expected_output\": -12.78,\n    \"test_aspect\": \"Conversion for a value just before 10 Fahrenheit\"\n  },\n  \"test_case8\": {\n    \"input\": -32,\n    \"expected_output\": -35.56,\n    \"test_aspect\": \"Conversion for negative Fahrenheit value\"\n  },\n  \"test_case9\": {\n    \"input\": 100,\n    \"expected_output\": 37.78,\n    \"test_aspect\": \"Conversion for a high Fahrenheit value outside of the specified range\"\n  },\n  \"test_case10\": {\n    \"input\": 32,\n    \"expected_output\": 0.00,\n    \"test_aspect\": \"Conversion at the freezing point of water\"\n  }\n}\n```"}
{"index": 2434, "preference": "functionality", "prompt": "You are given a code snippet that initializes three float variables `zy`, `zz`, and `x`. Your task is to write a function that calculates the value of `x` based on the following formula:\n\n\\[ x = \\frac{zy^2 + zz^2}{2} \\]\n\nYour function should take `zyInput` and `zzInput` as input parameters and return the calculated value of `x`.\n\nWrite a function `calculateX` that takes in two float parameters `zyInput` and `zzInput`, and returns the calculated value of `x` using the provided formula.\n\nFunction Signature: `float calculateX(float zyInput, float zzInput)`\n\nExample:\nInput:\n`zyInput = 3.0`\n`zzInput = 4.0`\nOutput:\n`x = 12.5`", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"zyInput\": 3.0, \"zzInput\": 4.0},\n    \"expected_output\": 12.5,\n    \"test_aspect\": \"Standard case with positive float inputs\"\n  },\n  \"test_case2\": {\n    \"input\": {\"zyInput\": 0.0, \"zzInput\": 0.0},\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"Case with zero inputs\"\n  },\n  \"test_case3\": {\n    \"input\": {\"zyInput\": 5.0, \"zzInput\": 0.0},\n    \"expected_output\": 12.5,\n    \"test_aspect\": \"Case with one zero input\"\n  },\n  \"test_case4\": {\n    \"input\": {\"zyInput\": -3.0, \"zzInput\": -4.0},\n    \"expected_output\": 12.5,\n    \"test_aspect\": \"Negative float inputs\"\n  },\n  \"test_case5\": {\n    \"input\": {\"zyInput\": -3.0, \"zzInput\": 4.0},\n    \"expected_output\": 12.5,\n    \"test_aspect\": \"Mixed sign inputs\"\n  },\n  \"test_case6\": {\n    \"input\": {\"zyInput\": 1.0e10, \"zzInput\": 1.0e10},\n    \"expected_output\": 1.0e20,\n    \"test_aspect\": \"Large float values\"\n  },\n  \"test_case7\": {\n    \"input\": {\"zyInput\": 1.0e-10, \"zzInput\": 1.0e-10},\n    \"expected_output\": 1.0e-20,\n    \"test_aspect\": \"Small float values\"\n  },\n  \"test_case8\": {\n    \"input\": {\"zyInput\": 1.1, \"zzInput\": 1.1},\n    \"expected_output\": 1.21,\n    \"test_aspect\": \"Standard case with small non-integer floats\"\n  },\n  \"test_case9\": {\n    \"input\": {\"zyInput\": 0.001, \"zzInput\": 0.002},\n    \"expected_output\": 2.5e-06,\n    \"test_aspect\": \"Very small float values\"\n  },\n  \"test_case10\": {\n    \"input\": {\"zyInput\": -1.5, \"zzInput\": 2.5},\n    \"expected_output\": 8.125,\n    \"test_aspect\": \"Negative and positive mixed inputs\"\n  }\n}\n```"}
{"index": 28092, "preference": "functionality", "prompt": "You are tasked with implementing a TrainController class that manages the progress of a train and its stopping behavior. The TrainController class has the following attributes and methods:\n\nAttributes:\n- trainProgress: an integer representing the progress of the train.\n- stopAt: an integer representing the point at which the train should stop.\n\nMethods:\n- stop(): a method that stops the train.\n- delay(name, delay, handler): a method that schedules a delay for a specified handler.\n\nYou need to implement the zero_out method, which resets the stopAt and trainProgress attributes to 0 after the train has stopped at the specified stopAt point.\n\nImplement the zero_out method in the TrainController class.\n\n```python\nclass TrainController:\n    def __init__(self):\n        self.trainProgress = 0\n        self.stopAt = 0\n\n    def stop(self):\n        # Implement the logic to stop the train\n        pass\n\n    def delay(self, name, delay, handler):\n        # Implement the logic to schedule a delay for the specified handler\n        pass\n\n    def zero_out(self):\n        # Implement the logic to reset stopAt and trainProgress to 0\n        self.stopAt = 0\n        self.trainProgress = 0\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"TrainController()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Initial State Check\"\n  },\n  \"test_case2\": {\n    \"input\": \"controller = TrainController(); controller.stopAt = 5; controller.stop(); controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out After Stop\"\n  },\n  \"test_case3\": {\n    \"input\": \"controller = TrainController(); controller.trainProgress = 10; controller.stopAt = 5; controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out with Non-zero Progress\"\n  },\n  \"test_case4\": {\n    \"input\": \"controller = TrainController(); controller.trainProgress = 100; controller.stopAt = 50; controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out with High Values\"\n  },\n  \"test_case5\": {\n    \"input\": \"controller = TrainController(); controller.trainProgress = 0; controller.stopAt = 0; controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out with Zero Values\"\n  },\n  \"test_case6\": {\n    \"input\": \"controller = TrainController(); controller.stopAt = -5; controller.trainProgress = -10; controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out with Negative Values\"\n  },\n  \"test_case7\": {\n    \"input\": \"controller = TrainController(); controller.delay('Task1', 5, 'handler1'); controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out after Delay Scheduling\"\n  },\n  \"test_case8\": {\n    \"input\": \"controller = TrainController(); controller.trainProgress = 50; controller.stopAt = 75; controller.stop(); controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out after Stop with Progress\"\n  },\n  \"test_case9\": {\n    \"input\": \"controller = TrainController(); controller.stopAt = 3; controller.trainProgress = 8; controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out with Arbitrary Values\"\n  },\n  \"test_case10\": {\n    \"input\": \"controller = TrainController(); controller.zero_out()\",\n    \"expected_output\": \"{'trainProgress': 0, 'stopAt': 0}\",\n    \"test_aspect\": \"Zero Out on Default Values\"\n  }\n}\n```"}
{"index": 39450, "preference": "functionality", "prompt": "You are working for a cloud computing company that provides various resources to its customers. Your task is to create a program that analyzes resource usage data and identifies resources that have exceeded a specified usage threshold. The program should calculate the percentage of resource usage and compare it against the threshold to determine if the resource is overused.\n\nYou are given a code snippet that is part of a larger program. The snippet includes a loop that iterates through a list of pages and calculates the usage of a specific resource based on a quota key. It then calculates the percentage of usage relative to a given value and checks if it exceeds a requested threshold. If the usage exceeds the threshold, it creates a resource object with a specific digest.\n\nYour task is to implement a function that takes in the necessary data and performs the resource analysis based on the given logic.\n\nWrite a function `analyze_resource_usage(pages, quota_data, value, threshold_requested)` that takes in the following parameters:\n- `pages`: A list of pages, where each page is a dictionary containing resource usage data.\n- `quota_data`: A dictionary containing the quota key used to calculate resource usage.\n- `value`: A numerical value used to calculate the percentage of resource usage.\n- `threshold_requested`: A numerical value representing the threshold for resource usage percentage.\n\nThe function should analyze the resource usage based on the given logic and return a list of resource objects that have exceeded the specified threshold. Each resource object should have a digest containing the quota code and type.\n\nExample:\n```python\nquota_data = {\"key\": \"storage_usage\"}\npages = [\n    {\"storage_usage\": [100, 200, 300]},\n    {\"storage_usage\": [150, 250, 350]},\n    {\"storage_usage\": [120, 220, 320]},\n]\nvalue = 1000\nthreshold_requested = 70\n\nprint(analyze_resource_usage(pages, quota_data, value, threshold_requested))\n```\nOutput:\n```\n[Resource(digest=ResourceDigest(id='quota_code', type='aws_limit'))]\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [100, 200, 300]},\n        {\"storage_usage\": [150, 250, 350]},\n        {\"storage_usage\": [120, 220, 320]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 1000,\n      \"threshold_requested\": 70\n    },\n    \"expected_output\": [\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}}\n    ],\n    \"test_aspect\": \"Standard case where usage exceeds threshold.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [0, 0, 0]},\n        {\"storage_usage\": [0, 0, 0]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 1000,\n      \"threshold_requested\": 50\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Edge case with zero usage, should not exceed threshold.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [500, 500, 500]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 1000,\n      \"threshold_requested\": 100\n    },\n    \"expected_output\": [\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}}\n    ],\n    \"test_aspect\": \"Exact match with threshold, should exceed.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [750, 250, 500]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 2000,\n      \"threshold_requested\": 25\n    },\n    \"expected_output\": [\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}}\n    ],\n    \"test_aspect\": \"Low threshold where resource usage percentage exceeds.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [100, 200, 300]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 1000,\n      \"threshold_requested\": 80\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Higher threshold where resource usage does not exceed.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"pages\": [],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 1000,\n      \"threshold_requested\": 50\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"No pages provided, should return empty output.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [100, 200, 300]},\n        {\"storage_usage\": [100, 200, 300]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 600,\n      \"threshold_requested\": 50\n    },\n    \"expected_output\": [\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}},\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}}\n    ],\n    \"test_aspect\": \"Multiple pages with exceeding usage.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [100, 200, 300]},\n        {\"storage_usage\": [0, 0, 0]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 1000,\n      \"threshold_requested\": 0\n    },\n    \"expected_output\": [\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}}\n    ],\n    \"test_aspect\": \"One page exceeds threshold while the other does not.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [300, 400, 500]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 1000,\n      \"threshold_requested\": 60\n    },\n    \"expected_output\": [\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}}\n    ],\n    \"test_aspect\": \"Single page with high resource usage.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"pages\": [\n        {\"storage_usage\": [1000, 2000, 3000]},\n        {\"storage_usage\": [1000, 1000, 1000]}\n      ],\n      \"quota_data\": {\"key\": \"storage_usage\"},\n      \"value\": 6000,\n      \"threshold_requested\": 50\n    },\n    \"expected_output\": [\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}},\n      {\"digest\": {\"id\": \"quota_code\", \"type\": \"aws_limit\"}}\n    ],\n    \"test_aspect\": \"Multiple pages with very high usage exceeding threshold.\"\n  }\n}\n```"}
{"index": 36634, "preference": "functionality", "prompt": "You are tasked with implementing a simple gradient descent algorithm for optimizing a linear regression model. The algorithm will be used to minimize the mean squared error (MSE) loss function. You are given a Python class `LinearRegression` with an incomplete `fit` method that needs to be implemented. The class has an `__init__` method that initializes the number of dimensions (`num_dims`), maximum iterations (`max_iter`), and learning rate (`learning_rate`). Your task is to complete the `fit` method to perform gradient descent and update the model parameters to minimize the MSE.\n\nThe `LinearRegression` class is defined as follows:\n```python\nclass LinearRegression:\n    def __init__(self, num_dims=None, max_iter=100, learning_rate=0.01):\n        self.num_dims = num_dims\n        self.max_iter = max_iter\n        self.learning_rate = learning_rate\n        self.weights = None\n\n    def fit(self, X, y):\n        # Your implementation here\n```\n\nYou need to implement the `fit` method to update the `self.weights` attribute using gradient descent. The input `X` is a 2D array of shape (n_samples, num_dims) containing the features, and `y` is a 1D array of shape (n_samples,) containing the target values.\n\nYour task is to complete the `fit` method to perform the following steps:\n1. Initialize the weights with zeros.\n2. Perform gradient descent for a maximum of `max_iter` iterations.\n3. Update the weights using the gradient of the MSE loss function with respect to the weights.\n4. Use the learning rate `learning_rate` for updating the weights.\n\nYour implementation should minimize the mean squared error (MSE) loss function given by:\n\\[ \\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2 \\]\nwhere \\( \\hat{y}_i \\) is the predicted value, and \\( n \\) is the number of samples.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"X\": [[1, 2], [2, 3], [3, 4]],\n      \"y\": [5, 6, 7]\n    },\n    \"expected_output\": [0.0, 1.0],\n    \"test_aspect\": \"Basic functionality with simple linear relationship.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"X\": [[1, 1], [1, 1], [1, 1]],\n      \"y\": [2, 2, 2]\n    },\n    \"expected_output\": [2.0, 0.0],\n    \"test_aspect\": \"Constant target values; weights should converge to represent the output.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"X\": [[0, 0], [1, 1], [2, 2]],\n      \"y\": [0, 1, 2]\n    },\n    \"expected_output\": [0.0, 0.5],\n    \"test_aspect\": \"Testing convergence with simple linear regression through the origin.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"X\": [[1, 0], [0, 1], [1, 1]],\n      \"y\": [1, 1, 2]\n    },\n    \"expected_output\": [1.0, 1.0],\n    \"test_aspect\": \"Multiple dimensions with correlated input.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"X\": [[1], [2], [3], [4]],\n      \"y\": [2, 3, 4, 5]\n    },\n    \"expected_output\": [1.0],\n    \"test_aspect\": \"Single feature to predict linear target.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"X\": [[1], [1], [1], [1]],\n      \"y\": [1, 1, 1, 1]\n    },\n    \"expected_output\": [1.0],\n    \"test_aspect\": \"Edge case with constant input and output; should return constant weight.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"X\": [[1, 0], [0, 1]],\n      \"y\": [1, 0]\n    },\n    \"expected_output\": [1.0, -1.0],\n    \"test_aspect\": \"Two-dimensional input with distinct target values.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"X\": [[1, -1], [-1, 1], [1, 1], [-1, -1]],\n      \"y\": [1, 1, 2, 0]\n    },\n    \"expected_output\": [0.5, 0.5],\n    \"test_aspect\": \"Testing with negative and positive values.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"X\": [[1], [2], [3]],\n      \"y\": [1, 2, 3]\n    },\n    \"expected_output\": [0.0],\n    \"test_aspect\": \"Identical input-output, should return zero weight for bias.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"X\": [[1, 2], [2, 3], [3, 4], [4, 5]],\n      \"y\": [2, 3, 4, 5]\n    },\n    \"expected_output\": [0.0, 1.0],\n    \"test_aspect\": \"Testing multiple iterations for convergence with a linear pattern.\"\n  }\n}\n```"}
{"index": 3334, "preference": "functionality", "prompt": "You are given the coordinates and radii of two circles in a 2D plane. Your task is to determine the relationship between the two circles based on their positions and radii. The relationship can be one of the following:\n- \"None\": The circles do not intersect at all.\n- \"More\": The circles are identical and completely overlap each other.\n- \"One\": One circle is completely inside the other, and they touch each other at exactly one point.\n\nYou need to write a function or method that takes the coordinates and radii of the two circles as input and returns the relationship between them based on the given conditions.\n\nFunction Signature: `string circleRelationship(double x1, double y1, double r1, double x2, double y2, double r2)`\n\nInput:\n- Six double values representing the coordinates (x1, y1) and radius (r1) of the first circle, and the coordinates (x2, y2) and radius (r2) of the second circle.\n\nOutput:\n- A string representing the relationship between the two circles: \"None\", \"More\", or \"One\".\n\nConstraints:\n- The coordinates and radii are all non-negative double values.\n\nExample:\n```\nInput:\nx1 = 0, y1 = 0, r1 = 3, x2 = 0, y2 = 0, r2 = 5\nOutput:\n\"One\"\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"0, 0, 3, 0, 0, 3\",\n    \"expected_output\": \"More\",\n    \"test_aspect\": \"Identical circles with the same center and radius.\"\n  },\n  \"test_case2\": {\n    \"input\": \"0, 0, 3, 0, 0, 5\",\n    \"expected_output\": \"One\",\n    \"test_aspect\": \"One circle is completely inside the other and they touch at one point.\"\n  },\n  \"test_case3\": {\n    \"input\": \"0, 0, 5, 0, 0, 3\",\n    \"expected_output\": \"One\",\n    \"test_aspect\": \"One circle is larger and contains the smaller circle, touching at one point.\"\n  },\n  \"test_case4\": {\n    \"input\": \"0, 0, 3, 6, 0, 3\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Circles are far apart and do not intersect.\"\n  },\n  \"test_case5\": {\n    \"input\": \"0, 0, 4, 3, 0, 2\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Circles are separate and do not touch or overlap.\"\n  },\n  \"test_case6\": {\n    \"input\": \"0, 0, 5, 0, 0, 10\",\n    \"expected_output\": \"One\",\n    \"test_aspect\": \"One circle is inside the other, touching at one point on the circumference.\"\n  },\n  \"test_case7\": {\n    \"input\": \"0, 0, 2, 0, 0, 4\",\n    \"expected_output\": \"One\",\n    \"test_aspect\": \"One smaller circle inside a larger circle, touching at one point.\"\n  },\n  \"test_case8\": {\n    \"input\": \"0, 0, 1, 2, 0, 1\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Circles are separate and do not intersect.\"\n  },\n  \"test_case9\": {\n    \"input\": \"1, 1, 3, 1, 1, 3\",\n    \"expected_output\": \"More\",\n    \"test_aspect\": \"Both circles are identical, located at the same coordinates.\"\n  },\n  \"test_case10\": {\n    \"input\": \"0, 0, 2, 3, 0, 2\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Circles are separate, one is to the right of the other.\"\n  }\n}\n```"}
{"index": 36861, "preference": "functionality", "prompt": "You are tasked with creating a Python function that will generate a connection string for various services based on the given configuration parameters. The function should take in the service name and the configuration parameters as input and return the connection string.\n\nThe configuration parameters are as follows:\n- MONGO_PORT: The port number for the MongoDB service.\n- RABBIT_DOCKER_SERVICE: The name of the Docker service for RabbitMQ.\n- RABBIT_HOST: The host IP address for RabbitMQ.\n- RABBIT_PORT: The port number for RabbitMQ.\n\nThe function signature should be:\n```python\ndef generate_connection_string(service_name, config_params):\n    pass\n```\n\nFor example, given the configuration parameters:\n```\nMONGO_PORT = 27017\nRABBIT_DOCKER_SERVICE = \"rabbit\"\nRABBIT_HOST = \"192.168.99.100\"\nRABBIT_PORT = 5672\n```\n\nThe function should behave as follows:\n```python\nconfig_params = {\n    \"MONGO_PORT\": 27017,\n    \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n    \"RABBIT_HOST\": \"192.168.99.100\",\n    \"RABBIT_PORT\": 5672\n}\n\ngenerate_connection_string(\"mongo\", config_params)\n# Output: \"mongodb://localhost:27017\"\n\ngenerate_connection_string(\"rabbit\", config_params)\n# Output: \"amqp://192.168.99.100:5672\"\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"service_name\": \"mongo\",\n      \"config_params\": {\n        \"MONGO_PORT\": 27017,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"192.168.99.100\",\n        \"RABBIT_PORT\": 5672\n      }\n    },\n    \"expected_output\": \"mongodb://localhost:27017\",\n    \"test_aspect\": \"Testing MongoDB connection string generation with standard parameters.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"service_name\": \"rabbit\",\n      \"config_params\": {\n        \"MONGO_PORT\": 27017,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"192.168.99.100\",\n        \"RABBIT_PORT\": 5672\n      }\n    },\n    \"expected_output\": \"amqp://192.168.99.100:5672\",\n    \"test_aspect\": \"Testing RabbitMQ connection string generation with standard parameters.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"service_name\": \"mongo\",\n      \"config_params\": {\n        \"MONGO_PORT\": 0,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"192.168.99.100\",\n        \"RABBIT_PORT\": 5672\n      }\n    },\n    \"expected_output\": \"mongodb://localhost:0\",\n    \"test_aspect\": \"Testing MongoDB connection string with port number set to 0.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"service_name\": \"rabbit\",\n      \"config_params\": {\n        \"MONGO_PORT\": 27017,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"localhost\",\n        \"RABBIT_PORT\": 0\n      }\n    },\n    \"expected_output\": \"amqp://localhost:0\",\n    \"test_aspect\": \"Testing RabbitMQ connection string with port number set to 0.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"service_name\": \"mongo\",\n      \"config_params\": {\n        \"MONGO_PORT\": 27017,\n        \"RABBIT_DOCKER_SERVICE\": \"\",\n        \"RABBIT_HOST\": \"\",\n        \"RABBIT_PORT\": 5672\n      }\n    },\n    \"expected_output\": \"mongodb://localhost:27017\",\n    \"test_aspect\": \"Testing MongoDB connection string with missing RabbitMQ parameters.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"service_name\": \"rabbit\",\n      \"config_params\": {\n        \"MONGO_PORT\": 27017,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"127.0.0.1\",\n        \"RABBIT_PORT\": 5672\n      }\n    },\n    \"expected_output\": \"amqp://127.0.0.1:5672\",\n    \"test_aspect\": \"Testing RabbitMQ connection string with localhost IP address.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"service_name\": \"rabbit\",\n      \"config_params\": {\n        \"MONGO_PORT\": 27017,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"192.168.1.1\",\n        \"RABBIT_PORT\": 99999\n      }\n    },\n    \"expected_output\": \"amqp://192.168.1.1:99999\",\n    \"test_aspect\": \"Testing RabbitMQ connection string with an out-of-range port number.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"service_name\": \"mongo\",\n      \"config_params\": {\n        \"MONGO_PORT\": -1,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"192.168.99.100\",\n        \"RABBIT_PORT\": 5672\n      }\n    },\n    \"expected_output\": \"mongodb://localhost:-1\",\n    \"test_aspect\": \"Testing MongoDB connection string with negative port number.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"service_name\": \"mongo\",\n      \"config_params\": {\n        \"MONGO_PORT\": 27017,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"localhost\",\n        \"RABBIT_PORT\": 5672\n      }\n    },\n    \"expected_output\": \"mongodb://localhost:27017\",\n    \"test_aspect\": \"Testing MongoDB connection string with both services using localhost.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"service_name\": \"rabbit\",\n      \"config_params\": {\n        \"MONGO_PORT\": 27017,\n        \"RABBIT_DOCKER_SERVICE\": \"rabbit\",\n        \"RABBIT_HOST\": \"192.168.99.100\",\n        \"RABBIT_PORT\": 5672\n      }\n    },\n    \"expected_output\": \"amqp://192.168.99.100:5672\",\n    \"test_aspect\": \"Testing RabbitMQ connection string with all valid standard parameters.\"\n  }\n}\n```"}
{"index": 39250, "preference": "functionality", "prompt": "You are tasked with creating a Python function that parses a Django URL configuration file and extracts the names of all the view functions defined for each URL pattern.\n\nYou are given a sample Django URL configuration file in the form of a Python list of URL patterns. Each URL pattern is represented as a tuple containing the URL pattern string, the corresponding view function, and the name of the URL pattern.\n\nYour task is to implement a function `extract_view_names(url_patterns)` that takes the list of URL patterns as input and returns a set of unique view function names used in the URL patterns.\n\nExample:\n```python\nurl_patterns = [\n    path('home/', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('contact/', views.contact, name='contact'),\n    path('json-endpoint/', views.json_endpoint, name='json-endpoint'),\n]\n\nextract_view_names(url_patterns)\n```\nOutput:\n```\n{'home', 'about', 'contact', 'json_endpoint'}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\n      \"path('home/', views.home, name='home')\",\n      \"path('about/', views.about, name='about')\"\n    ],\n    \"expected_output\": [\"home\", \"about\"],\n    \"test_aspect\": \"Basic functionality - extracting view names from standard URL patterns.\"\n  },\n  \"test_case2\": {\n    \"input\": [\n      \"path('contact/', views.contact, name='contact')\",\n      \"path('json-endpoint/', views.json_endpoint, name='json-endpoint')\"\n    ],\n    \"expected_output\": [\"contact\", \"json_endpoint\"],\n    \"test_aspect\": \"Basic functionality - extracting view names from standard URL patterns.\"\n  },\n  \"test_case3\": {\n    \"input\": [],\n    \"expected_output\": [],\n    \"test_aspect\": \"Handles empty input - should return an empty set when no URL patterns are provided.\"\n  },\n  \"test_case4\": {\n    \"input\": [\n      \"path('services/', views.services, name='services')\",\n      \"path('services/', views.services, name='services')\"\n    ],\n    \"expected_output\": [\"services\"],\n    \"test_aspect\": \"Handles duplicate view functions - should return unique view names.\"\n  },\n  \"test_case5\": {\n    \"input\": [\n      \"path('products/', views.products, name='products')\",\n      \"path('products/<int:id>/', views.product_detail, name='product_detail')\"\n    ],\n    \"expected_output\": [\"products\", \"product_detail\"],\n    \"test_aspect\": \"Handles URL patterns with parameters - ensures view names are extracted correctly.\"\n  },\n  \"test_case6\": {\n    \"input\": [\n      \"path('home/', views.home, name='home')\",\n      \"path('about/', views.about_function, name='about')\"\n    ],\n    \"expected_output\": [\"home\", \"about_function\"],\n    \"test_aspect\": \"Handles different function naming conventions - should extract various function names.\"\n  },\n  \"test_case7\": {\n    \"input\": [\n      \"path('', views.index, name='index')\",\n      \"path('404/', views.not_found, name='not_found')\"\n    ],\n    \"expected_output\": [\"index\", \"not_found\"],\n    \"test_aspect\": \"Handles root URL path - should correctly parse view names for root URL.\"\n  },\n  \"test_case8\": {\n    \"input\": [\n      \"path('api/v1/', views.api_v1_view, name='api_v1')\",\n      \"path('api/v2/', views.api_v2_view, name='api_v2')\"\n    ],\n    \"expected_output\": [\"api_v1_view\", \"api_v2_view\"],\n    \"test_aspect\": \"Handles API versioning in URL patterns - ensures all view names are extracted correctly.\"\n  },\n  \"test_case9\": {\n    \"input\": [\n      \"path('user/<int:id>/', views.user_profile, name='user_profile')\",\n      \"path('user/<str:username>/', views.user_profile_by_username, name='user_profile_by_username')\"\n    ],\n    \"expected_output\": [\"user_profile\", \"user_profile_by_username\"],\n    \"test_aspect\": \"Handles different types of URL parameters - confirms view names are extracted from parameterized URLs.\"\n  },\n  \"test_case10\": {\n    \"input\": [\n      \"path('blog/', views.blog_index, name='blog_index')\",\n      \"path('blog/<slug:slug>/', views.blog_detail, name='blog_detail')\",\n      \"path('blog/<int:year>/<int:month>/', views.blog_archive, name='blog_archive')\"\n    ],\n    \"expected_output\": [\"blog_index\", \"blog_detail\", \"blog_archive\"],\n    \"test_aspect\": \"Handles complex URL patterns with multiple parameters - ensures all view names are extracted correctly.\"\n  }\n}\n```"}
{"index": 26445, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that takes a list of integers as input and returns the sum of all the even numbers in the list. If the input list is empty or does not contain any even numbers, the function should return 0.\n\nThe function signature is:\n```python\ndef sum_of_even_numbers(nums: List[int]) -> int:\n    pass\n```\n\nFor example, given the input list `[1, 2, 3, 4, 5, 6]`, the function should return `12` (which is the sum of the even numbers 2, 4, and 6).", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [1, 2, 3, 4, 5, 6],\n    \"expected_output\": 12,\n    \"test_aspect\": \"Standard case with mixed odd and even numbers.\"\n  },\n  \"test_case2\": {\n    \"input\": [],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Edge case with an empty list.\"\n  },\n  \"test_case3\": {\n    \"input\": [1, 3, 5],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Case with no even numbers present.\"\n  },\n  \"test_case4\": {\n    \"input\": [2, 4, 6],\n    \"expected_output\": 12,\n    \"test_aspect\": \"Case with all even numbers.\"\n  },\n  \"test_case5\": {\n    \"input\": [0, 1, 2, 3],\n    \"expected_output\": 2,\n    \"test_aspect\": \"Case including zero, which is an even number.\"\n  },\n  \"test_case6\": {\n    \"input\": [-2, -4, -6],\n    \"expected_output\": -12,\n    \"test_aspect\": \"Case with negative even numbers.\"\n  },\n  \"test_case7\": {\n    \"input\": [-1, -3, -5],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Case with negative odd numbers only.\"\n  },\n  \"test_case8\": {\n    \"input\": [10, 21, 32, 43, 50],\n    \"expected_output\": 92,\n    \"test_aspect\": \"Case with a mix of positive even and odd numbers.\"\n  },\n  \"test_case9\": {\n    \"input\": [100],\n    \"expected_output\": 100,\n    \"test_aspect\": \"Case with a single even number.\"\n  },\n  \"test_case10\": {\n    \"input\": [1, 2, 3, 4, 5, 6, 8, 10],\n    \"expected_output\": 30,\n    \"test_aspect\": \"Case with multiple even numbers spread throughout the list.\"\n  }\n}\n```"}
{"index": 23335, "preference": "functionality", "prompt": "You are tasked with implementing a game management system for a casino. The system should be able to handle different types of games and manage the number of players for each game. To achieve this, you need to create a class hierarchy for different types of games and implement the necessary functionality to manage the player count for each game.\n\nYou are provided with a base class `Game` and a code snippet for a specific game class `GuessGame`. The `Game` class has the following attributes and methods:\n- `name`: A string representing the name of the game.\n- `player_count`: An integer representing the maximum number of players allowed for the game.\n\nThe `GuessGame` class inherits from the `Game` class and has the following additional attributes:\n- `name`: A string representing the specific name of the game, which is set to 'Deuce to Seven - Triple Draw'.\n- `player_count`: An integer representing the maximum number of players allowed for the game, which is set to 6.\n\nYour task is to complete the implementation by creating a new class for a different game and ensuring that the game management system can handle multiple games with different player counts.\n\nImplement the following:\n1. Create a new class `BlackjackGame` that inherits from the `Game` class.\n2. Set the `name` attribute of the `BlackjackGame` class to 'Blackjack'.\n3. Set the `player_count` attribute of the `BlackjackGame` class to 5.\n\nYour implementation should allow for easy addition of new game classes and should accurately manage the player count for each game.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Game class instantiation\",\n    \"expected_output\": \"Game instance with correct name and player_count\",\n    \"test_aspect\": \"Verify that the Game class can be instantiated with expected attributes\"\n  },\n  \"test_case2\": {\n    \"input\": \"GuessGame class instantiation\",\n    \"expected_output\": \"GuessGame instance with name 'Deuce to Seven - Triple Draw' and player_count 6\",\n    \"test_aspect\": \"Ensure GuessGame inherits correctly and has the right attributes\"\n  },\n  \"test_case3\": {\n    \"input\": \"BlackjackGame class instantiation\",\n    \"expected_output\": \"BlackjackGame instance with name 'Blackjack' and player_count 5\",\n    \"test_aspect\": \"Verify BlackjackGame is implemented correctly with expected attributes\"\n  },\n  \"test_case4\": {\n    \"input\": \"Instantiation of multiple games\",\n    \"expected_output\": \"List of Game instances: [Game, GuessGame, BlackjackGame]\",\n    \"test_aspect\": \"Ensure multiple games can be instantiated without error\"\n  },\n  \"test_case5\": {\n    \"input\": \"Player count retrieval for GuessGame\",\n    \"expected_output\": \"6\",\n    \"test_aspect\": \"Verify that player_count attribute for GuessGame returns the correct value\"\n  },\n  \"test_case6\": {\n    \"input\": \"Player count retrieval for BlackjackGame\",\n    \"expected_output\": \"5\",\n    \"test_aspect\": \"Verify that player_count attribute for BlackjackGame returns the correct value\"\n  },\n  \"test_case7\": {\n    \"input\": \"Check name attribute for GuessGame\",\n    \"expected_output\": \"'Deuce to Seven - Triple Draw'\",\n    \"test_aspect\": \"Ensure that the name attribute for GuessGame is set correctly\"\n  },\n  \"test_case8\": {\n    \"input\": \"Check name attribute for BlackjackGame\",\n    \"expected_output\": \"'Blackjack'\",\n    \"test_aspect\": \"Ensure that the name attribute for BlackjackGame is set correctly\"\n  },\n  \"test_case9\": {\n    \"input\": \"Extension of Game class with another game (e.g., PokerGame)\",\n    \"expected_output\": \"PokerGame instance with name 'Poker' and player_count 8\",\n    \"test_aspect\": \"Ensure new game class can be added and instantiated correctly\"\n  },\n  \"test_case10\": {\n    \"input\": \"Attempt to create a game with invalid player_count (e.g., negative)\",\n    \"expected_output\": \"Error or exception indicating invalid player_count\",\n    \"test_aspect\": \"Verify that the system handles invalid player count gracefully\"\n  }\n}\n```"}
{"index": 17387, "preference": "functionality", "prompt": "You are given a list of rules that describe which bags can contain other bags. Each rule is formatted as follows: \"light red bags contain 1 bright white bag, 2 muted yellow bags.\" This rule indicates that a \"light red\" bag can contain 1 \"bright white\" bag and 2 \"muted yellow\" bags.\n\nYou need to write a program to determine how many individual bags can eventually contain at least one shiny gold bag, following the rules provided.\n\nWrite a function `count_bags_containing_shiny_gold` that takes in the list of rules and returns the total number of bags that can contain at least one shiny gold bag.\n\nFor example, given the following rules:\n```\nlight red bags contain 1 bright white bag, 2 muted yellow bags.\ndark orange bags contain 3 bright white bags, 4 muted yellow bags.\nbright white bags contain 1 shiny gold bag.\nmuted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\nshiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\ndark olive bags contain 3 faded blue bags, 4 dotted black bags.\nvibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\nfaded blue bags contain no other bags.\ndotted black bags contain no other bags.\n```\nThe function should return 4, as the shiny gold bag can eventually be contained in 4 other individual bags: bright white, muted yellow, dark orange, and light red.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\n      \"light red bags contain 1 bright white bag, 2 muted yellow bags.\",\n      \"dark orange bags contain 3 bright white bags, 4 muted yellow bags.\",\n      \"bright white bags contain 1 shiny gold bag.\",\n      \"muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\",\n      \"shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\",\n      \"dark olive bags contain 3 faded blue bags, 4 dotted black bags.\",\n      \"vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\",\n      \"faded blue bags contain no other bags.\",\n      \"dotted black bags contain no other bags.\"\n    ],\n    \"expected_output\": 4,\n    \"test_aspect\": \"Basic functionality with a standard set of rules\"\n  },\n  \"test_case2\": {\n    \"input\": [\n      \"light red bags contain no other bags.\",\n      \"shiny gold bags contain no other bags.\"\n    ],\n    \"expected_output\": 0,\n    \"test_aspect\": \"No bags can contain shiny gold bag\"\n  },\n  \"test_case3\": {\n    \"input\": [\n      \"shiny gold bags contain 1 light red bag.\",\n      \"light red bags contain 1 bright white bag.\"\n    ],\n    \"expected_output\": 1,\n    \"test_aspect\": \"Single path to shiny gold bag\"\n  },\n  \"test_case4\": {\n    \"input\": [\n      \"light red bags contain 2 dark orange bags.\",\n      \"dark orange bags contain 1 shiny gold bag.\"\n    ],\n    \"expected_output\": 1,\n    \"test_aspect\": \"Multiple bags leading to shiny gold bag\"\n  },\n  \"test_case5\": {\n    \"input\": [\n      \"blue bags contain 1 shiny gold bag.\",\n      \"green bags contain 1 blue bag.\"\n    ],\n    \"expected_output\": 1,\n    \"test_aspect\": \"Indirect path to shiny gold bag with one intermediary\"\n  },\n  \"test_case6\": {\n    \"input\": [\n      \"red bags contain 1 blue bag, 1 green bag.\",\n      \"blue bags contain 1 shiny gold bag.\",\n      \"green bags contain no other bags.\"\n    ],\n    \"expected_output\": 1,\n    \"test_aspect\": \"Multiple types of bags leading to shiny gold bag\"\n  },\n  \"test_case7\": {\n    \"input\": [\n      \"gold bags contain 1 shiny gold bag.\",\n      \"silver bags contain 2 gold bags.\",\n      \"bronze bags contain 1 silver bag.\"\n    ],\n    \"expected_output\": 3,\n    \"test_aspect\": \"Complex hierarchy leading to shiny gold bag\"\n  },\n  \"test_case8\": {\n    \"input\": [\n      \"light red bags contain 1 bright white bag.\",\n      \"bright white bags contain 1 shiny gold bag.\",\n      \"dark orange bags contain 2 light red bags.\"\n    ],\n    \"expected_output\": 2,\n    \"test_aspect\": \"Multiple paths to shiny gold bag with shared bags\"\n  },\n  \"test_case9\": {\n    \"input\": [\n      \"shiny gold bags contain 1 dark blue bag.\",\n      \"dark blue bags contain no other bags.\"\n    ],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Shiny gold bag can contain others but is not contained by any\"\n  },\n  \"test_case10\": {\n    \"input\": [\n      \"light green bags contain 1 shiny gold bag.\",\n      \"dark purple bags contain 1 light green bag.\",\n      \"light blue bags contain 1 dark purple bag.\"\n    ],\n    \"expected_output\": 3,\n    \"test_aspect\": \"Several layers of containment leading to shiny gold bag\"\n  }\n}\n```"}
{"index": 39461, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that processes a dictionary of configuration settings and generates a formatted string representing the settings. Each setting consists of a key-value pair, and the function should handle the following cases:\n- If a setting has a default value and the `show_default` flag is set to `True`, the formatted string should include the default value in the format `key=default_value`.\n- If a setting does not have a default value or the `show_default` flag is set to `False`, the formatted string should only include the key and its value in the format `key=value`.\n\nYou need to implement the function `generate_config_string(config: dict) -> str` where:\n- `config`: A dictionary containing configuration settings where the keys are setting names and the values are dictionaries with keys `default` and `show_default`.\n- The function should return a string representing the formatted configuration settings.\n\nFor example, given the following `config` dictionary:\n```python\nconfig = {\n    \"timeout\": {\"default\": 30, \"show_default\": True},\n    \"max_connections\": {\"default\": 100, \"show_default\": False},\n    \"log_level\": {\"default\": \"INFO\", \"show_default\": True},\n    \"debug_mode\": {\"show_default\": False}\n}\n```\nThe function `generate_config_string(config)` should return the string:\n```\ntimeout=30,max_connections=100,log_level=INFO,debug_mode\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"timeout\": {\"default\": 30, \"show_default\": True},\n      \"max_connections\": {\"default\": 100, \"show_default\": False},\n      \"log_level\": {\"default\": \"INFO\", \"show_default\": True},\n      \"debug_mode\": {\"show_default\": False}\n    },\n    \"expected_output\": \"timeout=30,max_connections=100,log_level=INFO,debug_mode\",\n    \"test_aspect\": \"Standard case with default values and show_default flags.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"single_setting\": {\"default\": 5, \"show_default\": True}\n    },\n    \"expected_output\": \"single_setting=5\",\n    \"test_aspect\": \"Single setting with a default value and show_default set to True.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"single_setting\": {\"show_default\": False}\n    },\n    \"expected_output\": \"single_setting\",\n    \"test_aspect\": \"Single setting with no default value and show_default set to False.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"setting1\": {\"default\": \"enabled\", \"show_default\": True},\n      \"setting2\": {\"default\": \"disabled\", \"show_default\": True},\n      \"setting3\": {\"show_default\": False}\n    },\n    \"expected_output\": \"setting1=enabled,setting2=disabled,setting3\",\n    \"test_aspect\": \"Multiple settings with all combinations of default values and show_default flags.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"empty_setting\": {}\n    },\n    \"expected_output\": \"empty_setting\",\n    \"test_aspect\": \"Empty setting dictionary, should not raise an error and return just the key.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"timeout\": {\"default\": 30, \"show_default\": False},\n      \"max_connections\": {\"default\": 100, \"show_default\": True}\n    },\n    \"expected_output\": \"max_connections=100\",\n    \"test_aspect\": \"Test case where show_default is False for one setting but True for another.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"setting1\": {\"default\": 1, \"show_default\": True},\n      \"setting2\": {\"default\": 2, \"show_default\": True},\n      \"setting3\": {\"default\": 3, \"show_default\": True}\n    },\n    \"expected_output\": \"setting1=1,setting2=2,setting3=3\",\n    \"test_aspect\": \"All settings have default values and show_default set to True.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"settingA\": {\"default\": \"text\", \"show_default\": False},\n      \"settingB\": {\"show_default\": True}\n    },\n    \"expected_output\": \"settingB\",\n    \"test_aspect\": \"Test case with a default value set to False and another without a default.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"setting1\": {\"default\": 0, \"show_default\": True},\n      \"setting2\": {\"default\": -1, \"show_default\": True},\n      \"setting3\": {\"show_default\": True}\n    },\n    \"expected_output\": \"setting1=0,setting2=-1,setting3\",\n    \"test_aspect\": \"Boundary values with default values included.\"\n  },\n  \"test_case10\": {\n    \"input\": {},\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Empty config dictionary, should return an empty string.\"\n  }\n}\n```"}
{"index": 686, "preference": "functionality", "prompt": "You are given a snippet of code that sets the value of a variable `len` to 3. Your task is to write a program that utilizes the value of `len` to create a specific pattern of characters. The pattern should consist of a series of characters in a specific format based on the value of `len`. The pattern should be printed to the console.\n\nYour program should follow these rules:\n- If `len` is 1, the pattern should consist of a single character 'A'.\n- If `len` is 2, the pattern should consist of two lines:\n  - Line 1: 'A'\n  - Line 2: 'BB'\n- If `len` is 3, the pattern should consist of three lines:\n  - Line 1: 'A'\n  - Line 2: 'BB'\n  - Line 3: 'CCC'\n- If `len` is 4, the pattern should consist of four lines:\n  - Line 1: 'A'\n  - Line 2: 'BB'\n  - Line 3: 'CCC'\n  - Line 4: 'DDDD'\n- And so on...\n\nWrite a program that takes the value of `len` and prints the pattern as described above.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"1\",\n    \"expected_output\": \"A\",\n    \"test_aspect\": \"Base case with len = 1, should produce a single character 'A'.\"\n  },\n  \"test_case2\": {\n    \"input\": \"2\",\n    \"expected_output\": \"A\\nBB\",\n    \"test_aspect\": \"Base case with len = 2, should produce 'A' on the first line and 'BB' on the second line.\"\n  },\n  \"test_case3\": {\n    \"input\": \"3\",\n    \"expected_output\": \"A\\nBB\\nCCC\",\n    \"test_aspect\": \"Base case with len = 3, should produce 'A', 'BB', and 'CCC' on separate lines.\"\n  },\n  \"test_case4\": {\n    \"input\": \"4\",\n    \"expected_output\": \"A\\nBB\\nCCC\\nDDDD\",\n    \"test_aspect\": \"Base case with len = 4, should produce 'A', 'BB', 'CCC', and 'DDDD' on separate lines.\"\n  },\n  \"test_case5\": {\n    \"input\": \"5\",\n    \"expected_output\": \"A\\nBB\\nCCC\\nDDDD\\nEEEEE\",\n    \"test_aspect\": \"Base case with len = 5, should produce 'A', 'BB', 'CCC', 'DDDD', and 'EEEEE' on separate lines.\"\n  },\n  \"test_case6\": {\n    \"input\": \"0\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Edge case with len = 0, should not produce any output as there are no lines.\"\n  },\n  \"test_case7\": {\n    \"input\": \"-1\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Edge case with a negative value of len, should not produce any output.\"\n  },\n  \"test_case8\": {\n    \"input\": \"6\",\n    \"expected_output\": \"A\\nBB\\nCCC\\nDDDD\\nEEEEE\\nFFFFFF\",\n    \"test_aspect\": \"Base case with len = 6, should produce 'A', 'BB', 'CCC', 'DDDD', 'EEEEE', and 'FFFFFF' on separate lines.\"\n  },\n  \"test_case9\": {\n    \"input\": \"10\",\n    \"expected_output\": \"A\\nBB\\nCCC\\nDDDD\\nEEEEE\\nFFFFFF\\nGGGGGGGGGG\",\n    \"test_aspect\": \"Base case with len = 10, should produce lines from 'A' to 'J' with the respective number of characters.\"\n  },\n  \"test_case10\": {\n    \"input\": \"100\",\n    \"expected_output\": \"A\\nBB\\nCCC\\nDDDD\\nEEEEE\\nFFFFFF\\nGGGGGGGGGG\\nHHHHHHHHHHHHHHHHHH\\nIIIIIIIIIIIIIIIIIIIIII\\nJJJJJJJJJJJJJJJJJJJJJJ\\nKKKKKKKKKKKKKKKKKKKKKK\\nLLLLLLLLLLLLLLLLLLLLLLLL\\nMMMMMMMMMMMMMMMMMMMMMMMM\\nNNNNNNNNNNNNNNNNNNNNNNNNNN\\nOOOOOOOOOOOOOOOOOOOOOOOOOO\\nPPPPPPPPPPPPPPPPPPPPPPPPPP\\nQQQQQQQQQQQQQQQQQQQQQQQQQQQ\\nRRRRRRRRRRRRRRRRRRRRRRRRRRRR\\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\\nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\nYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\\nZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\",\n    \"test_aspect\": \"Performance case with len = 100, should produce lines from 'A' to 'Z' followed by multiple 'Z's, demonstrating the program handles larger inputs.\"\n  }\n}\n```"}
{"index": 38822, "preference": "functionality", "prompt": "You are tasked with creating a Python class that simulates a simple banking system. The class should have methods to deposit funds, withdraw funds, and display the current balance. Additionally, the class should implement a feature to generate a unique transaction ID for each deposit or withdrawal. The transaction ID should be a combination of the transaction type (D for deposit, W for withdrawal) and a unique sequential number. The class should also have a method to display the transaction history.\n\nYour task is to implement the `BankAccount` class with the following methods:\n1. `__init__(self, initial_balance)`: Initializes the bank account with the given initial balance.\n2. `deposit(self, amount)`: Deposits the specified amount into the account and generates a unique transaction ID for the deposit.\n3. `withdraw(self, amount)`: Withdraws the specified amount from the account and generates a unique transaction ID for the withdrawal.\n4. `display_balance(self)`: Displays the current balance of the account.\n5. `display_transaction_history(self)`: Displays the transaction history including transaction IDs and corresponding amounts.\n\nEnsure that the transaction IDs are generated in the format \"Dxxx\" for deposits and \"Wxxx\" for withdrawals, where \"xxx\" is a unique sequential number starting from 001.\n\nImplement the `BankAccount` class according to the given specifications.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"account = BankAccount(100); account.display_balance()\",\n    \"expected_output\": \"100\",\n    \"test_aspect\": \"Initial balance is set correctly.\"\n  },\n  \"test_case2\": {\n    \"input\": \"account.deposit(50); account.display_balance()\",\n    \"expected_output\": \"150\",\n    \"test_aspect\": \"Balance updates correctly after deposit.\"\n  },\n  \"test_case3\": {\n    \"input\": \"account.withdraw(30); account.display_balance()\",\n    \"expected_output\": \"120\",\n    \"test_aspect\": \"Balance updates correctly after withdrawal.\"\n  },\n  \"test_case4\": {\n    \"input\": \"account.withdraw(200)\",\n    \"expected_output\": \"Insufficient funds error.\",\n    \"test_aspect\": \"Withdrawal fails when funds are insufficient.\"\n  },\n  \"test_case5\": {\n    \"input\": \"account.deposit(50); account.display_transaction_history()\",\n    \"expected_output\": \"[{'transaction_id': 'D001', 'amount': 50}]\",\n    \"test_aspect\": \"Transaction ID is generated correctly for deposits.\"\n  },\n  \"test_case6\": {\n    \"input\": \"account.withdraw(20); account.display_transaction_history()\",\n    \"expected_output\": \"[{'transaction_id': 'D001', 'amount': 50}, {'transaction_id': 'W001', 'amount': 20}]\",\n    \"test_aspect\": \"Transaction ID is generated correctly for withdrawals.\"\n  },\n  \"test_case7\": {\n    \"input\": \"account.withdraw(50); account.display_transaction_history()\",\n    \"expected_output\": \"[{'transaction_id': 'D001', 'amount': 50}, {'transaction_id': 'W001', 'amount': 20}, {'transaction_id': 'W002', 'amount': 50}]\",\n    \"test_aspect\": \"Transaction IDs increment correctly for multiple transactions.\"\n  },\n  \"test_case8\": {\n    \"input\": \"account.deposit(0); account.display_balance()\",\n    \"expected_output\": \"120\",\n    \"test_aspect\": \"Deposit of zero does not change balance.\"\n  },\n  \"test_case9\": {\n    \"input\": \"account.withdraw(0); account.display_balance()\",\n    \"expected_output\": \"120\",\n    \"test_aspect\": \"Withdrawal of zero does not change balance.\"\n  },\n  \"test_case10\": {\n    \"input\": \"account.display_transaction_history()\",\n    \"expected_output\": \"[{'transaction_id': 'D001', 'amount': 50}, {'transaction_id': 'W001', 'amount': 20}, {'transaction_id': 'W002', 'amount': 50}]\",\n    \"test_aspect\": \"Transaction history displays all transactions correctly.\"\n  }\n}\n```"}
{"index": 35636, "preference": "functionality", "prompt": "You are tasked with creating a Python program that converts a given temperature in Celsius to Fahrenheit and Kelvin. The conversion formulas are as follows:\n- Fahrenheit = (Celsius / 5) * 9 + 32\n- Kelvin = Celsius + 273\n\nWrite a Python function called `temperature_converter` that takes an integer `celsius` as input and returns a tuple containing the temperature in Fahrenheit and Kelvin. The function should then be called with a user-provided temperature and the results should be printed.\n\nFor example, given an input of 25°C, the program should output:\n```\nA temperatura 25°C em Fahrenheit é 77.0°F\nE em Kelvin fica 298 K\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"25\",\n    \"expected_output\": \"A temperatura 25°C em Fahrenheit é 77.0°F\\nE em Kelvin fica 298 K\",\n    \"test_aspect\": \"Standard conversion for a typical temperature.\"\n  },\n  \"test_case2\": {\n    \"input\": \"0\",\n    \"expected_output\": \"A temperatura 0°C em Fahrenheit é 32.0°F\\nE em Kelvin fica 273 K\",\n    \"test_aspect\": \"Conversion of the freezing point of water.\"\n  },\n  \"test_case3\": {\n    \"input\": \"100\",\n    \"expected_output\": \"A temperatura 100°C em Fahrenheit é 212.0°F\\nE em Kelvin fica 373 K\",\n    \"test_aspect\": \"Conversion of the boiling point of water.\"\n  },\n  \"test_case4\": {\n    \"input\": \"-40\",\n    \"expected_output\": \"A temperatura -40°C em Fahrenheit é -40.0°F\\nE em Kelvin fica 233 K\",\n    \"test_aspect\": \"Conversion of the temperature where Celsius and Fahrenheit are equal.\"\n  },\n  \"test_case5\": {\n    \"input\": \"37\",\n    \"expected_output\": \"A temperatura 37°C em Fahrenheit é 98.6°F\\nE em Kelvin fica 310 K\",\n    \"test_aspect\": \"Conversion of normal human body temperature.\"\n  },\n  \"test_case6\": {\n    \"input\": \"1\",\n    \"expected_output\": \"A temperatura 1°C em Fahrenheit é 33.8°F\\nE em Kelvin fica 274 K\",\n    \"test_aspect\": \"Conversion of a low positive temperature.\"\n  },\n  \"test_case7\": {\n    \"input\": \"-1\",\n    \"expected_output\": \"A temperatura -1°C em Fahrenheit é 30.2°F\\nE em Kelvin fica 272 K\",\n    \"test_aspect\": \"Conversion of a low negative temperature.\"\n  },\n  \"test_case8\": {\n    \"input\": \"50\",\n    \"expected_output\": \"A temperatura 50°C em Fahrenheit é 122.0°F\\nE em Kelvin fica 323 K\",\n    \"test_aspect\": \"Conversion of a high temperature.\"\n  },\n  \"test_case9\": {\n    \"input\": \"273\",\n    \"expected_output\": \"A temperatura 273°C em Fahrenheit é 523.4°F\\nE em Kelvin fica 546 K\",\n    \"test_aspect\": \"Conversion of a high Celsius temperature.\"\n  },\n  \"test_case10\": {\n    \"input\": \"-273\",\n    \"expected_output\": \"A temperatura -273°C em Fahrenheit é -459.4°F\\nE em Kelvin fica 0 K\",\n    \"test_aspect\": \"Conversion of absolute zero temperature in Celsius.\"\n  }\n}\n```"}
{"index": 4921, "preference": "functionality", "prompt": "You are tasked with implementing a Java class that processes product information for a retail management system. The provided code snippet is a partial class definition for a `ProductGetResult` class, which extends the `BaseResult` class and contains a `ProductCreate` object named `productCreate`. Your task is to complete the class by adding a method to retrieve and display the product details.\n\nComplete the `ProductGetResult` class by adding a method named `displayProductDetails()` that retrieves and displays the details of the product using the `productCreate` object. The `ProductCreate` class contains the following attributes:\n- `productId` (String): The unique identifier for the product.\n- `productName` (String): The name of the product.\n- `price` (double): The price of the product.\n\nYour implementation should retrieve the product details from the `productCreate` object and display them in the following format:\n```\nProduct Details:\nProduct ID: <productId>\nProduct Name: <productName>\nPrice: <price>\n```\nWhere `<productId>`, `<productName>`, and `<price>` are the actual values retrieved from the `productCreate` object.\n\nComplete the `ProductGetResult` class with the `displayProductDetails()` method to achieve the desired functionality.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"P123\",\n        \"productName\": \"Laptop\",\n        \"price\": 999.99\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: P123\\nProduct Name: Laptop\\nPrice: 999.99\",\n    \"test_aspect\": \"Basic functionality with standard product details\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"P456\",\n        \"productName\": \"Smartphone\",\n        \"price\": 699.49\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: P456\\nProduct Name: Smartphone\\nPrice: 699.49\",\n    \"test_aspect\": \"Verify output formatting and accuracy\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"P789\",\n        \"productName\": \"Headphones\",\n        \"price\": 199.99\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: P789\\nProduct Name: Headphones\\nPrice: 199.99\",\n    \"test_aspect\": \"Confirm correct retrieval of product attributes\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"\",\n        \"productName\": \"Generic Item\",\n        \"price\": 20.00\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: \\nProduct Name: Generic Item\\nPrice: 20.0\",\n    \"test_aspect\": \"Handle empty productId\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"P000\",\n        \"productName\": \"\",\n        \"price\": 50.00\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: P000\\nProduct Name: \\nPrice: 50.0\",\n    \"test_aspect\": \"Handle empty productName\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"P101\",\n        \"productName\": \"Book\",\n        \"price\": 0.0\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: P101\\nProduct Name: Book\\nPrice: 0.0\",\n    \"test_aspect\": \"Handle product with price of zero\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"P102\",\n        \"productName\": \"Pen\",\n        \"price\": -1.00\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: P102\\nProduct Name: Pen\\nPrice: -1.0\",\n    \"test_aspect\": \"Handle negative price\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"P103\",\n        \"productName\": \"Mouse\",\n        \"price\": 25.50\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: P103\\nProduct Name: Mouse\\nPrice: 25.5\",\n    \"test_aspect\": \"Confirm correct decimal formatting for price\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": null,\n        \"productName\": null,\n        \"price\": 100.00\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: null\\nProduct Name: null\\nPrice: 100.0\",\n    \"test_aspect\": \"Handle null values for productId and productName\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"productCreate\": {\n        \"productId\": \"P104\",\n        \"productName\": \"Monitor\",\n        \"price\": 150.75\n      }\n    },\n    \"expected_output\": \"Product Details:\\nProduct ID: P104\\nProduct Name: Monitor\\nPrice: 150.75\",\n    \"test_aspect\": \"Test with standard product details and verify output\"\n  }\n}\n```"}
{"index": 5364, "preference": "functionality", "prompt": "You are tasked with implementing a Python class for managing articles in a content management system. The class, named `Article`, has a method `measure_ego()` that calculates the ego of the article and a method `save()` that saves the article to the database. Additionally, there is a form handling section that catches `ValueError` exceptions and sets up a blank form if no URL is submitted.\n\nYour task is to implement the `Article` class with the `measure_ego()` and `save()` methods, and handle the `ValueError` exceptions as described in the code snippet.\n\nImplement the `Article` class with the following specifications:\n- The `measure_ego()` method should calculate the ego of the article based on certain criteria (you can define the criteria as per your choice).\n- The `save()` method should save the article to the database.\n- If a `ValueError` is caught during the execution of the methods, set the `article` to `None` and populate the `form._errors[\"url\"]` with the error message converted to a string.\n\nYour implementation should handle the case where no URL is submitted and set up a blank form.\n\nYour task is to write the Python class `Article` and the form handling section based on the given requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Article with valid URL\",\n    \"expected_output\": \"Ego calculated based on defined criteria\",\n    \"test_aspect\": \"Valid input for measure_ego()\"\n  },\n  \"test_case2\": {\n    \"input\": \"Article with empty URL\",\n    \"expected_output\": {\n      \"article\": null,\n      \"form\": {\n        \"_errors\": {\n          \"url\": \"ValueError: URL cannot be empty\"\n        }\n      }\n    },\n    \"test_aspect\": \"Handling of empty URL\"\n  },\n  \"test_case3\": {\n    \"input\": \"Article with invalid URL format\",\n    \"expected_output\": {\n      \"article\": null,\n      \"form\": {\n        \"_errors\": {\n          \"url\": \"ValueError: Invalid URL format\"\n        }\n      }\n    },\n    \"test_aspect\": \"Handling of invalid URL format\"\n  },\n  \"test_case4\": {\n    \"input\": \"Article with special characters in URL\",\n    \"expected_output\": \"Ego calculated based on defined criteria\",\n    \"test_aspect\": \"Valid input with special characters in URL\"\n  },\n  \"test_case5\": {\n    \"input\": \"Article with extremely long URL\",\n    \"expected_output\": \"Ego calculated based on defined criteria\",\n    \"test_aspect\": \"Handling of long URLs\"\n  },\n  \"test_case6\": {\n    \"input\": \"Article with non-ASCII characters in URL\",\n    \"expected_output\": {\n      \"article\": null,\n      \"form\": {\n        \"_errors\": {\n          \"url\": \"ValueError: URL contains non-ASCII characters\"\n        }\n      }\n    },\n    \"test_aspect\": \"Handling of non-ASCII characters in URL\"\n  },\n  \"test_case7\": {\n    \"input\": \"Article with a valid URL but fails on save\",\n    \"expected_output\": \"Ego calculated but article save failed with ValueError\",\n    \"test_aspect\": \"Error handling during save()\"\n  },\n  \"test_case8\": {\n    \"input\": \"Article with missing required fields\",\n    \"expected_output\": {\n      \"article\": null,\n      \"form\": {\n        \"_errors\": {\n          \"url\": \"ValueError: Required fields are missing\"\n        }\n      }\n    },\n    \"test_aspect\": \"Handling of missing required fields\"\n  },\n  \"test_case9\": {\n    \"input\": \"Article with valid content but no URL\",\n    \"expected_output\": {\n      \"article\": null,\n      \"form\": {\n        \"_errors\": {\n          \"url\": \"ValueError: URL cannot be empty\"\n        }\n      }\n    },\n    \"test_aspect\": \"Empty URL with valid article content\"\n  },\n  \"test_case10\": {\n    \"input\": \"Article with valid URL and valid content\",\n    \"expected_output\": \"Ego calculated and article saved successfully\",\n    \"test_aspect\": \"Successful execution of measure_ego() and save()\"\n  }\n}\n```"}
{"index": 3654, "preference": "functionality", "prompt": "You are tasked with implementing a function to calculate the maximum TPDU (Transport Protocol Data Unit) size based on a given size parameter. The TPDU size is calculated using the formula 2^(maxTPDUSizeParam).\n\nWrite a function `calculateMaxTPDUSize` that takes an integer `maxTPDUSizeParam` as input and returns the maximum TPDU size. The function should handle the following cases:\n- If `maxTPDUSizeParam` is less than 7 or greater than 16, the function should throw an `IllegalArgumentException` with the message \"maxTPDUSizeParam is out of bound\".\n- If `maxTPDUSizeParam` is within the valid range, the function should calculate and return the maximum TPDU size using the formula 2^(maxTPDUSizeParam).\n\nYour task is to implement the `calculateMaxTPDUSize` function according to the specified requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": 6,\n    \"expected_output\": \"IllegalArgumentException: maxTPDUSizeParam is out of bound\",\n    \"test_aspect\": \"Testing lower boundary case (out of bound)\"\n  },\n  \"test_case2\": {\n    \"input\": 17,\n    \"expected_output\": \"IllegalArgumentException: maxTPDUSizeParam is out of bound\",\n    \"test_aspect\": \"Testing upper boundary case (out of bound)\"\n  },\n  \"test_case3\": {\n    \"input\": 7,\n    \"expected_output\": 128,\n    \"test_aspect\": \"Testing lower valid boundary case\"\n  },\n  \"test_case4\": {\n    \"input\": 8,\n    \"expected_output\": 256,\n    \"test_aspect\": \"Testing a valid case within the range\"\n  },\n  \"test_case5\": {\n    \"input\": 9,\n    \"expected_output\": 512,\n    \"test_aspect\": \"Testing a valid case within the range\"\n  },\n  \"test_case6\": {\n    \"input\": 10,\n    \"expected_output\": 1024,\n    \"test_aspect\": \"Testing a valid case within the range\"\n  },\n  \"test_case7\": {\n    \"input\": 15,\n    \"expected_output\": 32768,\n    \"test_aspect\": \"Testing upper valid boundary case\"\n  },\n  \"test_case8\": {\n    \"input\": 16,\n    \"expected_output\": 65536,\n    \"test_aspect\": \"Testing upper valid boundary case\"\n  },\n  \"test_case9\": {\n    \"input\": 14,\n    \"expected_output\": 16384,\n    \"test_aspect\": \"Testing a valid case within the range\"\n  },\n  \"test_case10\": {\n    \"input\": 12,\n    \"expected_output\": 4096,\n    \"test_aspect\": \"Testing a valid case within the range\"\n  }\n}\n```"}
{"index": 720, "preference": "functionality", "prompt": "You are tasked with implementing a Java class to represent SQL aggregation functions. The class should encapsulate the necessary information to build a SQL aggregation, including the field name and the aggregation function to be applied.\n\nYour task is to complete the implementation of the `SqlAggregation` class by providing the necessary constructor and methods to set and retrieve the field name and aggregation function.\n\nThe `SqlAggregation` class has the following requirements:\n- It should have a constructor that takes the field name and the aggregation function as parameters and initializes the corresponding fields.\n- It should provide methods to get the field name and the aggregation function.\n\nYour task is to complete the implementation of the `SqlAggregation` class according to the given requirements.\n\nComplete the following Java class:\n\n```java\npublic enum SqlAggFunction {\n    SUM, AVG, COUNT, MAX, MIN\n}\n\npublic class SqlAggregation {\n    private final String fieldName;\n    private final SqlAggFunction sqlAggFunction;\n\n    /**\n     * Constructor.\n     * Initializes the field name and aggregation function.\n     *\n     * @param fieldName      the name of the field to be aggregated\n     * @param sqlAggFunction the aggregation function to be applied\n     */\n    public SqlAggregation(String fieldName, SqlAggFunction sqlAggFunction) {\n        this.fieldName = fieldName;\n        this.sqlAggFunction = sqlAggFunction;\n    }\n\n    /**\n     * Gets the name of the field to be aggregated.\n     *\n     * @return the field name\n     */\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    /**\n     * Gets the aggregation function to be applied.\n     *\n     * @return the aggregation function\n     */\n    public SqlAggFunction getSqlAggFunction() {\n        return sqlAggFunction;\n    }\n}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"fieldName\": \"age\",\n      \"sqlAggFunction\": \"SUM\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"age\",\n      \"sqlAggFunction\": \"SUM\"\n    },\n    \"test_aspect\": \"Basic functionality - Check initialization with valid field name and aggregation function.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"fieldName\": \"salary\",\n      \"sqlAggFunction\": \"AVG\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"salary\",\n      \"sqlAggFunction\": \"AVG\"\n    },\n    \"test_aspect\": \"Basic functionality - Check initialization with a different valid field name and aggregation function.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"fieldName\": \"employee_id\",\n      \"sqlAggFunction\": \"COUNT\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"employee_id\",\n      \"sqlAggFunction\": \"COUNT\"\n    },\n    \"test_aspect\": \"Basic functionality - Check initialization with COUNT function.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"fieldName\": \"max_score\",\n      \"sqlAggFunction\": \"MAX\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"max_score\",\n      \"sqlAggFunction\": \"MAX\"\n    },\n    \"test_aspect\": \"Basic functionality - Check initialization with MAX function.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"fieldName\": \"min_score\",\n      \"sqlAggFunction\": \"MIN\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"min_score\",\n      \"sqlAggFunction\": \"MIN\"\n    },\n    \"test_aspect\": \"Basic functionality - Check initialization with MIN function.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"fieldName\": \"\",\n      \"sqlAggFunction\": \"SUM\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"\",\n      \"sqlAggFunction\": \"SUM\"\n    },\n    \"test_aspect\": \"Boundary case - Check initialization with an empty field name.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"fieldName\": \"population\",\n      \"sqlAggFunction\": null\n    },\n    \"expected_output\": {\n      \"fieldName\": \"population\",\n      \"sqlAggFunction\": null\n    },\n    \"test_aspect\": \"Boundary case - Check handling of null aggregation function.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"fieldName\": \"transactions\",\n      \"sqlAggFunction\": \"AVG\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"transactions\",\n      \"sqlAggFunction\": \"AVG\"\n    },\n    \"test_aspect\": \"Consistency - Verify that the method returns the correct aggregation function.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"fieldName\": \"products_sold\",\n      \"sqlAggFunction\": \"COUNT\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"products_sold\",\n      \"sqlAggFunction\": \"COUNT\"\n    },\n    \"test_aspect\": \"Consistency - Verify that the field name is returned correctly.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"fieldName\": \"average_temperature\",\n      \"sqlAggFunction\": \"AVG\"\n    },\n    \"expected_output\": {\n      \"fieldName\": \"average_temperature\",\n      \"sqlAggFunction\": \"AVG\"\n    },\n    \"test_aspect\": \"General case - Verify the class with a descriptive field name and average function.\"\n  }\n}\n```"}
{"index": 2714, "preference": "functionality", "prompt": "You are tasked with parsing and extracting data from a binary file that contains structured event logs. The file contains events related to USB hub devices, and each event is structured according to a specific format. The provided code snippet is a partial representation of the structure used to define the format of these events.\n\nThe code snippet shows the definition of a class `Microsoft_Windows_USB_USBHUB_119_0` that represents a specific event type related to USB hub devices. The event data is structured using the `construct` library, which allows for parsing binary data according to a predefined format.\n\nYour task is to write a Python function that can parse a binary file containing events of the type `Microsoft_Windows_USB_USBHUB_119_0` and extract specific fields from these events. The function should take the file path as input and return a list of dictionaries, where each dictionary represents the extracted fields from a single event.\n\nThe fields to be extracted from each event are:\n1. `fid_USBHUB_HC` (Int8sl)\n2. `fid_USBHUB_Device` (Int32ul)\n3. `fid_DeviceDescription` (WString)\n\nYou should assume that the binary file contains multiple events of the type `Microsoft_Windows_USB_USBHUB_119_0`, and your function should be able to handle parsing and extracting data from all these events.\n\nWrite a Python function `parse_usbhub_events(file_path)` that accomplishes the described task.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"valid_binary_file.bin\",\n    \"expected_output\": [\n      {\"fid_USBHUB_HC\": 1, \"fid_USBHUB_Device\": 12345678, \"fid_DeviceDescription\": \"USB Device 1\"},\n      {\"fid_USBHUB_HC\": 2, \"fid_USBHUB_Device\": 23456789, \"fid_DeviceDescription\": \"USB Device 2\"}\n    ],\n    \"test_aspect\": \"Testing with a valid binary file containing multiple events.\"\n  },\n  \"test_case2\": {\n    \"input\": \"empty_binary_file.bin\",\n    \"expected_output\": [],\n    \"test_aspect\": \"Testing with an empty binary file.\"\n  },\n  \"test_case3\": {\n    \"input\": \"invalid_format_file.bin\",\n    \"expected_output\": \"Error: Unable to parse event data.\",\n    \"test_aspect\": \"Testing with a binary file that does not conform to the expected format.\"\n  },\n  \"test_case4\": {\n    \"input\": \"file_with_single_event.bin\",\n    \"expected_output\": [\n      {\"fid_USBHUB_HC\": 0, \"fid_USBHUB_Device\": 98765432, \"fid_DeviceDescription\": \"Single USB Device\"}\n    ],\n    \"test_aspect\": \"Testing with a binary file containing a single event.\"\n  },\n  \"test_case5\": {\n    \"input\": \"file_with_edge_values.bin\",\n    \"expected_output\": [\n      {\"fid_USBHUB_HC\": -128, \"fid_USBHUB_Device\": 0, \"fid_DeviceDescription\": \"Device Edge Case\"},\n      {\"fid_USBHUB_HC\": 127, \"fid_USBHUB_Device\": 4294967295, \"fid_DeviceDescription\": \"Max Int32 Device\"}\n    ],\n    \"test_aspect\": \"Testing with a binary file containing events with edge values.\"\n  },\n  \"test_case6\": {\n    \"input\": \"unicode_device_descriptions.bin\",\n    \"expected_output\": [\n      {\"fid_USBHUB_HC\": 1, \"fid_USBHUB_Device\": 12345678, \"fid_DeviceDescription\": \"设备 1\"},\n      {\"fid_USBHUB_HC\": 2, \"fid_USBHUB_Device\": 23456789, \"fid_DeviceDescription\": \"Dispositivo 2\"}\n    ],\n    \"test_aspect\": \"Testing with binary data that includes Unicode device descriptions.\"\n  },\n  \"test_case7\": {\n    \"input\": \"file_with_no_device_descriptions.bin\",\n    \"expected_output\": [\n      {\"fid_USBHUB_HC\": 1, \"fid_USBHUB_Device\": 12345678, \"fid_DeviceDescription\": \"\"},\n      {\"fid_USBHUB_HC\": 2, \"fid_USBHUB_Device\": 23456789, \"fid_DeviceDescription\": \"\"}\n    ],\n    \"test_aspect\": \"Testing with binary data where device descriptions are empty.\"\n  },\n  \"test_case8\": {\n    \"input\": \"file_with_null_events.bin\",\n    \"expected_output\": \"Error: Encountered null event data.\",\n    \"test_aspect\": \"Testing with binary data that contains null or incomplete event records.\"\n  },\n  \"test_case9\": {\n    \"input\": \"file_with_large_data.bin\",\n    \"expected_output\": [\n      {\"fid_USBHUB_HC\": 1, \"fid_USBHUB_Device\": 12345678, \"fid_DeviceDescription\": \"Large Data Device 1\"},\n      // additional devices\n      {\"fid_USBHUB_HC\": 10000, \"fid_USBHUB_Device\": 99999999, \"fid_DeviceDescription\": \"Large Data Device 100\"}\n    ],\n    \"test_aspect\": \"Testing with a binary file containing a large number of events.\"\n  },\n  \"test_case10\": {\n    \"input\": \"file_with_multiple_types_of_events.bin\",\n    \"expected_output\": [\n      {\"fid_USBHUB_HC\": 1, \"fid_USBHUB_Device\": 12345678, \"fid_DeviceDescription\": \"USB Device A\"},\n      {\"fid_USBHUB_HC\": 2, \"fid_USBHUB_Device\": 23456789, \"fid_DeviceDescription\": \"USB Device B\"}\n    ],\n    \"test_aspect\": \"Testing with a binary file containing different types of events mixed in.\"\n  }\n}\n```"}
{"index": 18439, "preference": "functionality", "prompt": "You are tasked with implementing a Python class that manages a MySQL database connection and runs a bioinformatics tool called \"eggnog-mapper\" to analyze protein data. The provided code snippet is part of the class and shows the process of closing the MySQL connection before running the \"eggnog-mapper\" to avoid potential errors.\n\nYour task is to complete the implementation of the class by incorporating the following functionalities:\n1. Establishing a MySQL database connection using the provided connection details.\n2. Defining a method `run_eggnog_mapper()` that simulates the execution of the \"eggnog-mapper\" tool and returns the output file path.\n3. Handling potential errors that may occur during the MySQL connection or the execution of the \"eggnog-mapper\".\n\nYou should ensure that the class is well-structured, follows best practices, and provides error handling for robustness.\n\nYour implementation should include the following class structure and methods:\n\n```python\nimport mysql.connector\n\nclass ProteinAnalyzer:\n    def __init__(self, host, user, password, database):\n        # Initialize MySQL connection using the provided details\n        self.connection = mysql.connector.connect(\n            host=host,\n            user=user,\n            password=password,\n            database=database\n        )\n\n    def run_eggnog_mapper(self):\n        # TODO: Implement the execution of the eggnog-mapper tool\n        # Return the output file path\n\n    def close_connection(self):\n        # Close the MySQL connection\n        self.connection.close()\n\n# Instantiate the ProteinAnalyzer class with MySQL connection details\nanalyzer = ProteinAnalyzer(host='localhost', user='username', password='password', database='protein_db')\n\n# Close MySQL connection before starting eggnog-mapper\nanalyzer.close_connection()\n# Run eggnog-mapper for all proteins\neggnog_outfile = analyzer.run_eggnog_mapper()\n# TODO: remove mockup and uncomment run_eggnog_mapper call if commented out\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"valid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"output_path.txt\",\n    \"test_aspect\": \"Test successful MySQL connection and eggnog-mapper execution with valid credentials.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"invalid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"Error: Access denied for user 'invalid_user'\",\n    \"test_aspect\": \"Test handling of invalid MySQL user credentials.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"valid_user\",\n      \"password\": \"invalid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"Error: Access denied for user 'valid_user'\",\n    \"test_aspect\": \"Test handling of invalid MySQL password.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"valid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"invalid_db\"\n    },\n    \"expected_output\": \"Error: Unknown database 'invalid_db'\",\n    \"test_aspect\": \"Test handling of invalid database name.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"host\": \"invalid_host\",\n      \"user\": \"valid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"Error: Can't connect to MySQL server on 'invalid_host'\",\n    \"test_aspect\": \"Test handling of invalid MySQL host.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"valid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"output_path.txt\",\n    \"test_aspect\": \"Test successful execution of eggnog-mapper after closing the connection.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"valid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"Error: MySQL connection must be established first\",\n    \"test_aspect\": \"Test behavior of `run_eggnog_mapper` when MySQL connection is not established.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"valid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"error_output.txt\",\n    \"test_aspect\": \"Test how eggnog-mapper handles internal errors during execution.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"valid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"Error: Unable to close MySQL connection\",\n    \"test_aspect\": \"Test handling of errors during closing the MySQL connection.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"host\": \"localhost\",\n      \"user\": \"valid_user\",\n      \"password\": \"valid_password\",\n      \"database\": \"valid_db\"\n    },\n    \"expected_output\": \"output_path.txt\",\n    \"test_aspect\": \"Test consistency of output file path after multiple executions of eggnog-mapper.\"\n  }\n}\n```"}
{"index": 34529, "preference": "functionality", "prompt": "You are tasked with implementing a user authentication system using Python. The system should authenticate users based on their email and password, and it should interact with a database to verify the user's credentials. You are provided with a code snippet that demonstrates the authentication process using a function `authenticate` and a user's email and password.\n\nYour task is to complete the implementation of the `authenticate` function and write a function to interact with the database to verify the user's credentials.\n\nThe `authenticate` function takes two parameters:\n- `email`: A string representing the user's email address.\n- `password`: A string representing the user's password.\n\nYou need to implement the `authenticate` function to verify the user's credentials based on the provided email and password. Additionally, you need to write a function to interact with the database to retrieve the user's information and verify the credentials.\n\nYour implementation should:\n1. Check if the user with the given email exists in the database.\n2. If the user exists, verify if the provided password matches the stored password for that user.\n3. Return the user instance if the credentials are valid, or `None` if the credentials are invalid.\n\nYou should not modify the provided code snippet, but you can assume that the `db` variable is already initialized and provides the necessary methods to interact with the database.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"email\": \"user@example.com\",\n      \"password\": \"correct_password\"\n    },\n    \"expected_output\": \"User instance\",\n    \"test_aspect\": \"Valid credentials - should return user instance\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"email\": \"user@example.com\",\n      \"password\": \"wrong_password\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Invalid password - should return None\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"email\": \"nonexistent@example.com\",\n      \"password\": \"any_password\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Nonexistent email - should return None\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"email\": \"\",\n      \"password\": \"some_password\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Empty email - should return None\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"email\": \"user@example.com\",\n      \"password\": \"\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Empty password - should return None\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"email\": null,\n      \"password\": \"some_password\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Null email - should return None\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"email\": \"user@example.com\",\n      \"password\": null\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Null password - should return None\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"email\": \"user@example.com\",\n      \"password\": \"short\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Valid email, invalid short password - should return None\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"email\": \"user@example.com\",\n      \"password\": \"correct_password\"\n    },\n    \"expected_output\": \"User instance\",\n    \"test_aspect\": \"Repeated valid credentials - should return user instance again\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"email\": \"user@example.com\",\n      \"password\": \"another_password\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Valid email, different invalid password - should return None\"\n  }\n}\n```"}
{"index": 34020, "preference": "functionality", "prompt": "You are tasked with implementing a Python class that interacts with an API to manage templates. The class should have methods for creating, updating, and deleting templates, as well as retrieving a specific template by its ID. The API requires a specific version to be specified, and the ID field for the templates is \"template_id\".\n\nYour task is to complete the implementation of the `TemplateManager` class by adding the necessary methods and ensuring they interact correctly with the API.\n\n```python\nimport requests\n\nAPI_VERSION = \"v1\"\n\nclass TemplateManager:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.api_key = api_key\n\n    def create_template(self, template_data):\n        # Implement method to create a new template using the API\n        pass\n\n    def update_template(self, template_id, updated_data):\n        # Implement method to update an existing template using the API\n        pass\n\n    def delete_template(self, template_id):\n        # Implement method to delete a template using the API\n        pass\n\n    def get_template_by_id(self, template_id):\n        # Implement method to retrieve a specific template by its ID using the API\n        pass\n```", "test_cases": "{\n  \"test_case1\": {\n    \"input\": {\n      \"template_data\": {\n        \"name\": \"New Template\",\n        \"content\": \"This is a new template.\",\n        \"type\": \"email\"\n      }\n    },\n    \"expected_output\": {\n      \"status\": \"success\",\n      \"template_id\": \"12345\"\n    },\n    \"test_aspect\": \"Creating a new template successfully.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"template_data\": {\n        \"name\": \"\",\n        \"content\": \"This template has no name.\",\n        \"type\": \"email\"\n      }\n    },\n    \"expected_output\": {\n      \"status\": \"error\",\n      \"message\": \"Template name cannot be empty.\"\n    },\n    \"test_aspect\": \"Creating a template with an empty name should return an error.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"template_id\": \"12345\",\n      \"updated_data\": {\n        \"name\": \"Updated Template\",\n        \"content\": \"This is an updated template content.\"\n      }\n    },\n    \"expected_output\": {\n      \"status\": \"success\",\n      \"template_id\": \"12345\"\n    },\n    \"test_aspect\": \"Updating an existing template successfully.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"template_id\": \"99999\",\n      \"updated_data\": {\n        \"name\": \"Non-existent Template\",\n        \"content\": \"Attempting to update a template that does not exist.\"\n      }\n    },\n    \"expected_output\": {\n      \"status\": \"error\",\n      \"message\": \"Template with ID 99999 not found.\"\n    },\n    \"test_aspect\": \"Updating a non-existent template should return an error.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"template_id\": \"12345\"\n    },\n    \"expected_output\": {\n      \"status\": \"success\",\n      \"template\": {\n        \"template_id\": \"12345\",\n        \"name\": \"Updated Template\",\n        \"content\": \"This is an updated template content.\"\n      }\n    },\n    \"test_aspect\": \"Retrieving a specific template by ID successfully.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"template_id\": \"00000\"\n    },\n    \"expected_output\": {\n      \"status\": \"error\",\n      \"message\": \"Template with ID 00000 not found.\"\n    },\n    \"test_aspect\": \"Retrieving a template that does not exist should return an error.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"template_id\": \"12345\"\n    },\n    \"expected_output\": {\n      \"status\": \"success\",\n      \"message\": \"Template deleted successfully.\"\n    },\n    \"test_aspect\": \"Deleting an existing template successfully.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"template_id\": \"12345\"\n    },\n    \"expected_output\": {\n      \"status\": \"error\",\n      \"message\": \"Template with ID 12345 not found.\"\n    },\n    \"test_aspect\": \"Deleting a template that has already been deleted should return an error.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"template_data\": {\n        \"name\": \"Valid Template\",\n        \"content\": null,\n        \"type\": \"email\"\n      }\n    },\n    \"expected_output\": {\n      \"status\": \"error\",\n      \"message\": \"Template content cannot be null.\"\n    },\n    \"test_aspect\": \"Creating a template with null content should return an error.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"template_id\": \"12345\",\n      \"updated_data\": {\n        \"name\": \"Another Update\",\n        \"content\": \"\"\n      }\n    },\n    \"expected_output\": {\n      \"status\": \"error\",\n      \"message\": \"Template content cannot be empty.\"\n    },\n    \"test_aspect\": \"Updating a template with empty content should return an error.\"\n  }\n}"}
{"index": 8055, "preference": "functionality", "prompt": "You are tasked with implementing a middleware function for a web application framework similar to Sanic. The middleware function should handle Cross-Origin Resource Sharing (CORS) by adding the appropriate headers to the HTTP response. The CORS middleware should allow requests from specific origins based on a configuration setting.\n\nYou are provided with the following code snippet as a starting point:\n\n```python\napp = Sanic(__name__)\n\n@app.get(\"/<name>\")\nasync def handler(request: Request, name: str) -> HTTPResponse:\n    return text(f\"Hi {name}\")\n\n# DO NOT DO THIS\n# @app.on_response\n# async def cors(_, resp):\n#     resp.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n```\n\nYour task is to create a middleware function that can be added to the Sanic application to handle CORS. The middleware function should read a configuration setting to determine the allowed origins and add the appropriate `Access-Control-Allow-Origin` header to the HTTP response. If the request origin is not allowed, the middleware should respond with a 403 Forbidden status code.\n\nImplement the CORS middleware function and integrate it into the provided Sanic application to ensure that it correctly handles CORS based on the configured allowed origins.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"origin\": \"https://allowed-origin.com\",\n      \"allowed_origins\": [\"https://allowed-origin.com\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"Access-Control-Allow-Origin\": \"https://allowed-origin.com\"\n      },\n      \"body\": \"Hi User\"\n    },\n    \"test_aspect\": \"Valid origin request should receive the appropriate CORS header.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"origin\": \"https://disallowed-origin.com\",\n      \"allowed_origins\": [\"https://allowed-origin.com\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 403,\n      \"headers\": {},\n      \"body\": \"\"\n    },\n    \"test_aspect\": \"Invalid origin request should receive a 403 Forbidden response.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"origin\": \"null\",\n      \"allowed_origins\": [\"https://allowed-origin.com\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {},\n      \"body\": \"Hi User\"\n    },\n    \"test_aspect\": \"Requests with 'null' origin should be handled correctly.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"origin\": \"https://allowed-origin.com\",\n      \"allowed_origins\": []\n    },\n    \"expected_output\": {\n      \"status_code\": 403,\n      \"headers\": {},\n      \"body\": \"\"\n    },\n    \"test_aspect\": \"Requests from allowed origins should be forbidden when allowed_origins is empty.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"origin\": \"https://another-allowed-origin.com\",\n      \"allowed_origins\": [\"https://allowed-origin.com\", \"https://another-allowed-origin.com\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"Access-Control-Allow-Origin\": \"https://another-allowed-origin.com\"\n      },\n      \"body\": \"Hi User\"\n    },\n    \"test_aspect\": \"Request from an additional allowed origin should receive the appropriate CORS header.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"origin\": \"localhost\",\n      \"allowed_origins\": [\"http://localhost\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"Access-Control-Allow-Origin\": \"http://localhost\"\n      },\n      \"body\": \"Hi User\"\n    },\n    \"test_aspect\": \"Request from localhost should be handled correctly when configured.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"origin\": \"http://localhost:3000\",\n      \"allowed_origins\": [\"http://localhost:3000\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\"\n      },\n      \"body\": \"Hi User\"\n    },\n    \"test_aspect\": \"Request from a specific localhost port should be allowed.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"origin\": \"https://allowed-origin.com\",\n      \"allowed_origins\": [\"https://allowed-origin.com\", \"file://\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"Access-Control-Allow-Origin\": \"https://allowed-origin.com\"\n      },\n      \"body\": \"Hi User\"\n    },\n    \"test_aspect\": \"Request from a valid origin should be successful even with a file:// in allowed origins.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"origin\": \"http://untrusted-origin.com\",\n      \"allowed_origins\": [\"https://trusted-origin.com\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 403,\n      \"headers\": {},\n      \"body\": \"\"\n    },\n    \"test_aspect\": \"Request from an untrusted origin should be forbidden.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"origin\": \"https://allowed-origin.com\",\n      \"allowed_origins\": [\"https://allowed-origin.com\", \"http://sub.allowed-origin.com\"]\n    },\n    \"expected_output\": {\n      \"status_code\": 200,\n      \"headers\": {\n        \"Access-Control-Allow-Origin\": \"https://allowed-origin.com\"\n      },\n      \"body\": \"Hi User\"\n    },\n    \"test_aspect\": \"Request from an allowed origin should succeed even with multiple origins configured.\"\n  }\n}\n```"}
{"index": 23809, "preference": "functionality", "prompt": "You are tasked with creating a Python function that simulates a simplified version of a library management system. The system should allow users to borrow and return books, as well as display the current inventory of books available. The function should be able to handle multiple users and keep track of the books borrowed by each user.\n\nCreate a Python class `Library` with the following methods:\n1. `__init__(self, books)`: Constructor method that initializes the library with a list of books.\n2. `display_available_books(self)`: Method to display the current inventory of books in the library.\n3. `borrow_book(self, user, book)`: Method to allow a user to borrow a book from the library. If the book is available, it should be marked as borrowed and the user's name should be associated with the borrowed book. If the book is not available, an appropriate message should be displayed.\n4. `return_book(self, user, book)`: Method to allow a user to return a book to the library. If the book is currently borrowed by the user, it should be marked as available again. If the book is not borrowed by the user, an appropriate message should be displayed.\n\nYour task is to implement the `Library` class with the specified methods to achieve the functionality described above.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"]\n    },\n    \"expected_output\": \"Library initialized with books: ['Book A', 'Book B', 'Book C']\",\n    \"test_aspect\": \"Testing library initialization with a list of books.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"method\": \"display_available_books\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"]\n    },\n    \"expected_output\": \"Available books: ['Book A', 'Book B', 'Book C']\",\n    \"test_aspect\": \"Testing the display of available books in the library.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"method\": \"borrow_book\",\n      \"user\": \"Alice\",\n      \"book\": \"Book A\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"]\n    },\n    \"expected_output\": \"Book A borrowed by Alice.\",\n    \"test_aspect\": \"Testing borrowing a book that is available.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"method\": \"borrow_book\",\n      \"user\": \"Bob\",\n      \"book\": \"Book A\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"],\n      \"borrowed\": {\"Alice\": [\"Book A\"]}\n    },\n    \"expected_output\": \"Book A is currently unavailable.\",\n    \"test_aspect\": \"Testing borrowing a book that is already borrowed.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"method\": \"return_book\",\n      \"user\": \"Alice\",\n      \"book\": \"Book A\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"],\n      \"borrowed\": {\"Alice\": [\"Book A\"]}\n    },\n    \"expected_output\": \"Book A returned by Alice.\",\n    \"test_aspect\": \"Testing returning a book that was borrowed.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"method\": \"return_book\",\n      \"user\": \"Bob\",\n      \"book\": \"Book A\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"],\n      \"borrowed\": {\"Alice\": [\"Book A\"]}\n    },\n    \"expected_output\": \"Book A was not borrowed by Bob.\",\n    \"test_aspect\": \"Testing returning a book that was not borrowed by the user.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"method\": \"borrow_book\",\n      \"user\": \"Alice\",\n      \"book\": \"Book D\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"]\n    },\n    \"expected_output\": \"Book D is not available in the library.\",\n    \"test_aspect\": \"Testing borrowing a book that does not exist in the library.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"method\": \"display_available_books\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"],\n      \"borrowed\": {\"Alice\": [\"Book A\"]}\n    },\n    \"expected_output\": \"Available books: ['Book B', 'Book C']\",\n    \"test_aspect\": \"Testing the display of available books after borrowing.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"method\": \"return_book\",\n      \"user\": \"Alice\",\n      \"book\": \"Book B\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"],\n      \"borrowed\": {\"Alice\": [\"Book A\"]}\n    },\n    \"expected_output\": \"Book B was not borrowed by Alice.\",\n    \"test_aspect\": \"Testing returning a book that was not borrowed.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"method\": \"borrow_book\",\n      \"user\": \"Alice\",\n      \"book\": \"Book B\",\n      \"books\": [\"Book A\", \"Book B\", \"Book C\"],\n      \"borrowed\": {\"Alice\": [\"Book A\"]}\n    },\n    \"expected_output\": \"Book B borrowed by Alice.\",\n    \"test_aspect\": \"Testing successful borrowing of another book by the user.\"\n  }\n}\n```"}
{"index": 23766, "preference": "functionality", "prompt": "You are tasked with creating a Python program that prompts the user to input three different numbers and then determines the largest among them. If the user successfully inputs three distinct numbers, the program should output the largest number. However, if the user fails to input three different numbers, the program should display a message indicating that the input was invalid.\n\nYour program should adhere to the following requirements:\n- Prompt the user to input three numbers.\n- Check if the three numbers are distinct.\n- If the numbers are distinct, determine and output the largest number.\n- If the numbers are not distinct, display a message indicating the input was invalid.\n\nExample:\n```\nEnter the first number: 5\nEnter the second number: 8\nEnter the third number: 3\nThe largest number is 8\n```\nExample:\n```\nEnter the first number: 4\nEnter the second number: 4\nEnter the third number: 4\nInvalid input: Please enter three different numbers.\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"5\\n8\\n3\\n\",\n    \"expected_output\": \"The largest number is 8\\n\",\n    \"test_aspect\": \"Distinct input with positive integers\"\n  },\n  \"test_case2\": {\n    \"input\": \"10\\n5\\n8\\n\",\n    \"expected_output\": \"The largest number is 10\\n\",\n    \"test_aspect\": \"Distinct input with mixed positive integers\"\n  },\n  \"test_case3\": {\n    \"input\": \"-1\\n-5\\n-3\\n\",\n    \"expected_output\": \"The largest number is -1\\n\",\n    \"test_aspect\": \"Distinct input with negative integers\"\n  },\n  \"test_case4\": {\n    \"input\": \"4\\n4\\n4\\n\",\n    \"expected_output\": \"Invalid input: Please enter three different numbers.\\n\",\n    \"test_aspect\": \"All inputs are the same\"\n  },\n  \"test_case5\": {\n    \"input\": \"1\\n1\\n2\\n\",\n    \"expected_output\": \"Invalid input: Please enter three different numbers.\\n\",\n    \"test_aspect\": \"Two inputs are the same\"\n  },\n  \"test_case6\": {\n    \"input\": \"2\\n3\\n2\\n\",\n    \"expected_output\": \"Invalid input: Please enter three different numbers.\\n\",\n    \"test_aspect\": \"Two inputs are the same with one distinct\"\n  },\n  \"test_case7\": {\n    \"input\": \"0\\n-1\\n1\\n\",\n    \"expected_output\": \"The largest number is 1\\n\",\n    \"test_aspect\": \"Distinct input with zero and both positive and negative integers\"\n  },\n  \"test_case8\": {\n    \"input\": \"100\\n200\\n300\\n\",\n    \"expected_output\": \"The largest number is 300\\n\",\n    \"test_aspect\": \"Distinct input with large positive integers\"\n  },\n  \"test_case9\": {\n    \"input\": \"0\\n0\\n0\\n\",\n    \"expected_output\": \"Invalid input: Please enter three different numbers.\\n\",\n    \"test_aspect\": \"All inputs are the same zero value\"\n  },\n  \"test_case10\": {\n    \"input\": \"1\\n2\\n1\\n\",\n    \"expected_output\": \"Invalid input: Please enter three different numbers.\\n\",\n    \"test_aspect\": \"Two inputs are the same with one distinct\"\n  }\n}\n```"}
{"index": 20477, "preference": "functionality", "prompt": "You are working for a software development company that manages a large code repository. The company's code repository contains various files and directories, each with a specific naming convention. Your task is to write a program that extracts relevant information from a given code snippet and organizes it into a structured format.\n\nThe code snippet provided follows a specific format:\n```\n<reponame>DPNT-Sourcecode/CHK-hbjk01<filename>virtualenv/Lib/site-packages/tdl/queue/abstractions/response/fatal_error_response.py<gh_stars>0\n```\nWhere:\n- `<reponame>`: The name of the repository where the file is located.\n- `DPNT-Sourcecode/CHK-hbjk01`: A unique identifier for the repository.\n- `<filename>`: The path to the file within the repository.\n- `virtualenv/Lib/site-packages/tdl/queue/abstractions/response/fatal_error_response.py`: The complete path to the file.\n- `<gh_stars>`: The number of stars (likes) the file has received on GitHub.\n\nWrite a program that takes a code snippet in this format as input and extracts the repository name, unique identifier, file path, and the number of GitHub stars for the file. Then, organize this information into a structured format for further processing.\n\nYour program should handle different code snippets following the same format and extract the relevant information accurately.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"RepoNameDPNT-Sourcecode/CHK-hbjk01virtualenv/Lib/site-packages/tdl/queue/abstractions/response/fatal_error_response.py0\",\n    \"expected_output\": {\n      \"repository_name\": \"RepoName\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk01\",\n      \"file_path\": \"virtualenv/Lib/site-packages/tdl/queue/abstractions/response/fatal_error_response.py\",\n      \"gh_stars\": 0\n    },\n    \"test_aspect\": \"Basic extraction with standard input values.\"\n  },\n  \"test_case2\": {\n    \"input\": \"MyRepoDPNT-Sourcecode/CHK-hbjk02src/app/main.py5\",\n    \"expected_output\": {\n      \"repository_name\": \"MyRepo\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk02\",\n      \"file_path\": \"src/app/main.py\",\n      \"gh_stars\": 5\n    },\n    \"test_aspect\": \"Extracting from a different repository with a standard file path.\"\n  },\n  \"test_case3\": {\n    \"input\": \"AnotherRepoDPNT-Sourcecode/CHK-hbjk03lib/utils/helpers.py10\",\n    \"expected_output\": {\n      \"repository_name\": \"AnotherRepo\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk03\",\n      \"file_path\": \"lib/utils/helpers.py\",\n      \"gh_stars\": 10\n    },\n    \"test_aspect\": \"Checking extraction with multiple directories in file path.\"\n  },\n  \"test_case4\": {\n    \"input\": \"EmptyRepoDPNT-Sourcecode/CHK-hbjk04/README.md3\",\n    \"expected_output\": {\n      \"repository_name\": \"EmptyRepo\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk04\",\n      \"file_path\": \"README.md\",\n      \"gh_stars\": 3\n    },\n    \"test_aspect\": \"Testing with a simple file name at the root level.\"\n  },\n  \"test_case5\": {\n    \"input\": \"ComplexRepoDPNT-Sourcecode/CHK-hbjk05src/long/path/to/file.py1\",\n    \"expected_output\": {\n      \"repository_name\": \"ComplexRepo\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk05\",\n      \"file_path\": \"src/long/path/to/file.py\",\n      \"gh_stars\": 1\n    },\n    \"test_aspect\": \"Extracting from a file with a long path.\"\n  },\n  \"test_case6\": {\n    \"input\": \"RepoWithSpecialCharsDPNT-Sourcecode/CHK-hbjk06src/app/@main.py7\",\n    \"expected_output\": {\n      \"repository_name\": \"RepoWithSpecialChars\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk06\",\n      \"file_path\": \"src/app/@main.py\",\n      \"gh_stars\": 7\n    },\n    \"test_aspect\": \"Testing extraction with special characters in the filename.\"\n  },\n  \"test_case7\": {\n    \"input\": \"NoStarsRepoDPNT-Sourcecode/CHK-hbjk07src/app/no_stars.py0\",\n    \"expected_output\": {\n      \"repository_name\": \"NoStarsRepo\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk07\",\n      \"file_path\": \"src/app/no_stars.py\",\n      \"gh_stars\": 0\n    },\n    \"test_aspect\": \"Handling cases where the file has zero GitHub stars.\"\n  },\n  \"test_case8\": {\n    \"input\": \"SingleFileRepoDPNT-Sourcecode/CHK-hbjk08single_file.txt15\",\n    \"expected_output\": {\n      \"repository_name\": \"SingleFileRepo\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk08\",\n      \"file_path\": \"single_file.txt\",\n      \"gh_stars\": 15\n    },\n    \"test_aspect\": \"Extracting information from a repository with a single file.\"\n  },\n  \"test_case9\": {\n    \"input\": \"SpecialCharsRepoDPNT-Sourcecode/CHK-hbjk09src/app/hello world.py2\",\n    \"expected_output\": {\n      \"repository_name\": \"SpecialCharsRepo\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk09\",\n      \"file_path\": \"src/app/hello world.py\",\n      \"gh_stars\": 2\n    },\n    \"test_aspect\": \"Checking extraction with spaces in the filename.\"\n  },\n  \"test_case10\": {\n    \"input\": \"EdgeCaseRepoDPNT-Sourcecode/CHK-hbjk10src/app/empty_file.py0\",\n    \"expected_output\": {\n      \"repository_name\": \"EdgeCaseRepo\",\n      \"unique_identifier\": \"DPNT-Sourcecode/CHK-hbjk10\",\n      \"file_path\": \"src/app/empty_file.py\",\n      \"gh_stars\": 0\n    },\n    \"test_aspect\": \"Handling edge case with a file that has zero stars.\"\n  }\n}\n```"}
{"index": 4820, "preference": "functionality", "prompt": "You are tasked with implementing a virtual machine that interprets a custom bytecode instruction set. The provided code snippet is a part of the interpreter's switch statement handling different opcodes. Each opcode corresponds to a specific action to be taken by the virtual machine.\n\nYour task is to implement the logic for the `relative_jump_if_false` opcode. This opcode is used to conditionally jump to a different location in the bytecode based on the value at the top of the stack. If the top value on the stack is `0`, the jump should be taken; otherwise, the program should continue to the next instruction.\n\nYou are given the following relevant information:\n- The virtual machine has a stack (`co.stack`) to store values.\n- The `ip` variable represents the instruction pointer, pointing to the current instruction in the bytecode.\n- The `ip.read<T>()` function is used to read the next value of type `T` from the bytecode and advance the instruction pointer accordingly.\n\nYour task is to complete the implementation of the `relative_jump_if_false` opcode by:\n1. Reading a 32-bit signed integer offset from the bytecode using `ip.read<std::int32_t>()`.\n2. Checking the top value of the stack. If it is `0`, then update the instruction pointer `ip` by adding the offset to it; otherwise, continue to the next instruction as usual.\n\nImplement the logic for the `relative_jump_if_false` opcode based on the given context.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"stack: [0], offset: 2\",\n    \"expected_output\": \"ip: new_position (current ip + 2)\",\n    \"test_aspect\": \"Verify that when the top of the stack is 0, the instruction pointer is updated correctly by the given offset.\"\n  },\n  \"test_case2\": {\n    \"input\": \"stack: [1], offset: 2\",\n    \"expected_output\": \"ip: current_position (remains the same)\",\n    \"test_aspect\": \"Ensure that when the top of the stack is non-zero (1), the instruction pointer does not change.\"\n  },\n  \"test_case3\": {\n    \"input\": \"stack: [0], offset: -1\",\n    \"expected_output\": \"ip: new_position (current ip - 1)\",\n    \"test_aspect\": \"Check that the instruction pointer is correctly decremented when the offset is negative and the stack top is 0.\"\n  },\n  \"test_case4\": {\n    \"input\": \"stack: [5], offset: -3\",\n    \"expected_output\": \"ip: current_position (remains the same)\",\n    \"test_aspect\": \"Validate that the instruction pointer does not change when the top of the stack is non-zero (5), even with a negative offset.\"\n  },\n  \"test_case5\": {\n    \"input\": \"stack: [0], offset: 0\",\n    \"expected_output\": \"ip: current_position (remains the same)\",\n    \"test_aspect\": \"Ensure that the instruction pointer does not change when the offset is 0, regardless of the stack top being 0.\"\n  },\n  \"test_case6\": {\n    \"input\": \"stack: [], offset: 5\",\n    \"expected_output\": \"error or undefined behavior\",\n    \"test_aspect\": \"Test how the interpreter behaves when the stack is empty but an offset is provided, checking for error handling.\"\n  },\n  \"test_case7\": {\n    \"input\": \"stack: [0], offset: INT32_MAX\",\n    \"expected_output\": \"ip: new_position (current ip + INT32_MAX)\",\n    \"test_aspect\": \"Verify that the instruction pointer can correctly handle maximum positive offsets when the top of the stack is 0.\"\n  },\n  \"test_case8\": {\n    \"input\": \"stack: [0], offset: INT32_MIN\",\n    \"expected_output\": \"ip: new_position (current ip + INT32_MIN)\",\n    \"test_aspect\": \"Check that the instruction pointer can handle maximum negative offsets when the stack top is 0.\"\n  },\n  \"test_case9\": {\n    \"input\": \"stack: [0, 1], offset: 3\",\n    \"expected_output\": \"ip: new_position (current ip + 3)\",\n    \"test_aspect\": \"Validate that the instruction pointer updates correctly when multiple values are in the stack, ensuring it only considers the top value.\"\n  },\n  \"test_case10\": {\n    \"input\": \"stack: [0], offset: 10, ip: 5\",\n    \"expected_output\": \"ip: 15\",\n    \"test_aspect\": \"Check that the instruction pointer updates from a specific current position (5), ensuring correct calculations with a positive offset.\"\n  }\n}\n```"}
{"index": 21664, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes a list of dates and returns the most recent date in the list. The dates are represented as strings in the format \"YYYY/MM/DD HH:MM\", where \"YYYY\" is the year, \"MM\" is the month, \"DD\" is the day, \"HH\" is the hour, and \"MM\" is the minute. The function should return the most recent date in the same format.\n\nYou are given the following code snippet as a starting point:\n\n```python\n\"\"\"\n@Time ： 2022/1/11 14:30\n@Auth ： 吕伟康\n@File ：matplotlib_widget.py\n\"\"\"\n# -*- coding: utf-8 -*-\n\"\"\"\n@Time ： 2021/12/15 10:52\n\"\"\"\n\ndef find_most_recent_date(dates):\n    # Your implementation here\n    pass\n\n# Test cases\ndates = [\"2022/01/11 14:30\", \"2021/12/15 10:52\", \"2023/05/20 08:45\"]\nprint(find_most_recent_date(dates))  # Expected output: \"2023/05/20 08:45\"\n```\n\nWrite a function `find_most_recent_date(dates)` that takes a list of date strings as input and returns the most recent date in the same format. Ensure that the function handles leap years and different month lengths correctly.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\"2022/01/11 14:30\", \"2021/12/15 10:52\", \"2023/05/20 08:45\"],\n    \"expected_output\": \"2023/05/20 08:45\",\n    \"test_aspect\": \"Basic functionality with mixed recent date\"\n  },\n  \"test_case2\": {\n    \"input\": [\"2021/11/11 14:30\", \"2021/11/11 14:31\"],\n    \"expected_output\": \"2021/11/11 14:31\",\n    \"test_aspect\": \"Same day with different times\"\n  },\n  \"test_case3\": {\n    \"input\": [\"2020/02/29 23:59\", \"2021/02/28 23:59\"],\n    \"expected_output\": \"2020/02/29 23:59\",\n    \"test_aspect\": \"Leap year consideration\"\n  },\n  \"test_case4\": {\n    \"input\": [\"2022/01/31 14:30\", \"2022/02/28 14:30\", \"2022/02/29 14:30\"],\n    \"expected_output\": \"2022/02/29 14:30\",\n    \"test_aspect\": \"Handling end of month dates\"\n  },\n  \"test_case5\": {\n    \"input\": [\"2023/01/01 00:00\", \"2023/01/01 00:01\"],\n    \"expected_output\": \"2023/01/01 00:01\",\n    \"test_aspect\": \"Testing on the first day of the year\"\n  },\n  \"test_case6\": {\n    \"input\": [\"2023/12/31 23:59\", \"2024/01/01 00:00\"],\n    \"expected_output\": \"2024/01/01 00:00\",\n    \"test_aspect\": \"Crossing the year boundary\"\n  },\n  \"test_case7\": {\n    \"input\": [\"2023/05/20 08:45\", \"2023/05/20 08:44\"],\n    \"expected_output\": \"2023/05/20 08:45\",\n    \"test_aspect\": \"Same date but different times\"\n  },\n  \"test_case8\": {\n    \"input\": [\"2021/01/01 00:01\", \"2021/01/01 00:00\", \"2021/01/01 00:02\"],\n    \"expected_output\": \"2021/01/01 00:02\",\n    \"test_aspect\": \"Multiple times on the same day\"\n  },\n  \"test_case9\": {\n    \"input\": [\"2023/01/01 12:00\", \"2023/01/01 12:00\", \"2023/01/01 12:00\"],\n    \"expected_output\": \"2023/01/01 12:00\",\n    \"test_aspect\": \"Identical dates and times\"\n  },\n  \"test_case10\": {\n    \"input\": [],\n    \"expected_output\": null,\n    \"test_aspect\": \"Handling empty input list\"\n  }\n}\n```"}
{"index": 36740, "preference": "functionality", "prompt": "You are working on a project that involves processing a large number of images using Python's OpenCV library and TensorFlow for GPU acceleration. As part of the project, you need to write a function that takes an input image path, processes the image, and saves the processed image to a specified output directory. Additionally, you need to ensure that TensorFlow is configured to utilize GPU memory efficiently.\n\nWrite a Python function that accomplishes the following tasks:\n1. Takes an input image path and an output directory path as input arguments.\n2. Loads the image from the input path using OpenCV.\n3. Processes the image using any desired image processing techniques (e.g., resizing, filtering, color manipulation).\n4. Saves the processed image to the specified output directory using OpenCV's `cv2.imwrite` function.\n5. Configures TensorFlow to utilize GPU memory efficiently by setting memory growth for each available GPU.\n\nYour function should be named `process_and_save_image` and should have the following signature:\n```python\ndef process_and_save_image(input_image_path: str, output_directory: str) -> None:\n    # Your implementation here\n```\n\nEnsure that the function performs the image processing and saving correctly, and configures TensorFlow to utilize GPU memory growth.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"input_image_path\": \"valid_image.jpg\",\n      \"output_directory\": \"output/\"\n    },\n    \"expected_output\": \"output/valid_image_processed.jpg\",\n    \"test_aspect\": \"Verify correct processing and saving of a valid image\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"input_image_path\": \"non_existent_image.jpg\",\n      \"output_directory\": \"output/\"\n    },\n    \"expected_output\": \"FileNotFoundError\",\n    \"test_aspect\": \"Ensure function handles non-existent input image\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"input_image_path\": \"valid_image.jpg\",\n      \"output_directory\": \"non_writable_directory/\"\n    },\n    \"expected_output\": \"PermissionError\",\n    \"test_aspect\": \"Verify function handles non-writable output directory\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"input_image_path\": \"valid_image.jpg\",\n      \"output_directory\": \"output/\"\n    },\n    \"expected_output\": \"Valid image processing result\",\n    \"test_aspect\": \"Confirm that image processing techniques are applied correctly (e.g., resizing)\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"input_image_path\": \"valid_image.jpg\",\n      \"output_directory\": \"output/\"\n    },\n    \"expected_output\": \"TensorFlow configured for memory growth\",\n    \"test_aspect\": \"Check if TensorFlow is configured to use GPU memory efficiently\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"input_image_path\": \"valid_image_with_alpha.png\",\n      \"output_directory\": \"output/\"\n    },\n    \"expected_output\": \"output/valid_image_with_alpha_processed.png\",\n    \"test_aspect\": \"Verify image processing of an image with alpha channel (transparency)\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"input_image_path\": \"corrupt_image.jpg\",\n      \"output_directory\": \"output/\"\n    },\n    \"expected_output\": \"cv2.error\",\n    \"test_aspect\": \"Ensure function handles corrupt image files appropriately\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"input_image_path\": \"\",\n      \"output_directory\": \"output/\"\n    },\n    \"expected_output\": \"ValueError\",\n    \"test_aspect\": \"Confirm the function raises an error for empty input image path\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"input_image_path\": \"valid_image.jpg\",\n      \"output_directory\": \"\"\n    },\n    \"expected_output\": \"ValueError\",\n    \"test_aspect\": \"Verify the function raises an error for empty output directory path\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"input_image_path\": \"valid_image.jpg\",\n      \"output_directory\": \"output/\"\n    },\n    \"expected_output\": \"output/valid_image_processed.jpg\",\n    \"test_aspect\": \"Confirm file format consistency during saving (e.g., .jpg, .png)\"\n  }\n}\n```"}
{"index": 517, "preference": "functionality", "prompt": "You are tasked with implementing a user authentication system using LDAP (Lightweight Directory Access Protocol) in a Java Spring application. The given code snippet is a part of the configuration for setting up the LDAP context source. Your task is to complete the implementation of the user authentication process using LDAP in the Spring application.\n\nYou are provided with a `User` class that contains the following fields:\n```java\npublic class User {\n    private String username;\n    private String password;\n    // Constructor, getters, and setters\n}\n```\n\nYour task is to implement a method `authenticateUser` in the `LdapAuthenticationService` class that takes a `User` object as input and authenticates the user against the LDAP server using the provided username and password. If the authentication is successful, the method should return `true`; otherwise, it should return `false`.\n\nYou should also complete the configuration for the LDAP context source in the `LdapConfig` class, ensuring that the application can connect to the LDAP server using the provided URL and base path.\n\nYour solution should handle potential exceptions and ensure the proper closure of resources.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"username\": \"valid_user\",\n      \"password\": \"valid_password\"\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Successful authentication with valid credentials.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"username\": \"invalid_user\",\n      \"password\": \"valid_password\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Failed authentication due to invalid username.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"username\": \"valid_user\",\n      \"password\": \"invalid_password\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Failed authentication due to invalid password.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"username\": \"\",\n      \"password\": \"valid_password\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Failed authentication due to empty username.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"username\": \"valid_user\",\n      \"password\": \"\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Failed authentication due to empty password.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"username\": \" \",\n      \"password\": \"valid_password\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Failed authentication due to whitespace username.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"username\": \"valid_user\",\n      \"password\": \" \"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Failed authentication due to whitespace password.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"username\": \"non_existent_user\",\n      \"password\": \"non_existent_password\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Failed authentication due to non-existing user.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"username\": \"valid_user\",\n      \"password\": \"corrupted_password\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Failed authentication due to corrupted password not matching.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"username\": \"valid_user\",\n      \"password\": \"valid_password\"\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Successful authentication verified with LDAP connection.\"\n  }\n}\n```"}
{"index": 2462, "preference": "functionality", "prompt": "You are tasked with implementing a Java program to categorize numerical values into specific ranges based on the given code snippet. The code snippet defines a set of categories, each with a minimum and maximum value. Your task is to write a method that takes a numerical value as input and determines the category to which it belongs based on the defined ranges.\n\nWrite a Java method `findCategory` that takes a `BigDecimal` value as input and returns the category to which it belongs. The categories are defined by the provided code snippet, where each category has a minimum and maximum value. The method should return the category based on the following rules:\n- If the input value falls within the range of a category (inclusive of the minimum and maximum values), the method should return the corresponding category.\n- If the input value does not fall within any defined category, the method should return \"Uncategorized\".\n\nYou are provided with the following code snippet as a reference:\n```java\nK1(new BigDecimal(\"2.72\"), new BigDecimal(\"12.04\")),\nK2(new BigDecimal(\"12.05\"), new BigDecimal(\"20.23\")),\nK3(new BigDecimal(\"20.28\"), new BigDecimal(\"32.42\")),\nK4(new BigDecimal(\"32.44\"), new BigDecimal(\"54.08\")),\nK5(new BigDecimal(\"54.31\"), new BigDecimal(\"100.21\"));\n```\nThe code snippet defines five categories (K1, K2, K3, K4, K5) with their respective minimum and maximum values.\n\nYour task is to implement the `findCategory` method to categorize numerical values based on the defined ranges and return the appropriate category or \"Uncategorized\" if the value does not fall within any defined category.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"2.72\",\n    \"expected_output\": \"K1\",\n    \"test_aspect\": \"Lower boundary of category K1\"\n  },\n  \"test_case2\": {\n    \"input\": \"12.04\",\n    \"expected_output\": \"K1\",\n    \"test_aspect\": \"Upper boundary of category K1\"\n  },\n  \"test_case3\": {\n    \"input\": \"12.05\",\n    \"expected_output\": \"K2\",\n    \"test_aspect\": \"Lower boundary of category K2\"\n  },\n  \"test_case4\": {\n    \"input\": \"20.23\",\n    \"expected_output\": \"K2\",\n    \"test_aspect\": \"Upper boundary of category K2\"\n  },\n  \"test_case5\": {\n    \"input\": \"20.28\",\n    \"expected_output\": \"K3\",\n    \"test_aspect\": \"Lower boundary of category K3\"\n  },\n  \"test_case6\": {\n    \"input\": \"32.42\",\n    \"expected_output\": \"K3\",\n    \"test_aspect\": \"Upper boundary of category K3\"\n  },\n  \"test_case7\": {\n    \"input\": \"32.44\",\n    \"expected_output\": \"K4\",\n    \"test_aspect\": \"Lower boundary of category K4\"\n  },\n  \"test_case8\": {\n    \"input\": \"54.08\",\n    \"expected_output\": \"K4\",\n    \"test_aspect\": \"Upper boundary of category K4\"\n  },\n  \"test_case9\": {\n    \"input\": \"54.31\",\n    \"expected_output\": \"K5\",\n    \"test_aspect\": \"Lower boundary of category K5\"\n  },\n  \"test_case10\": {\n    \"input\": \"100.21\",\n    \"expected_output\": \"K5\",\n    \"test_aspect\": \"Upper boundary of category K5\"\n  },\n  \"test_case11\": {\n    \"input\": \"0\",\n    \"expected_output\": \"Uncategorized\",\n    \"test_aspect\": \"Below the defined categories\"\n  },\n  \"test_case12\": {\n    \"input\": \"110\",\n    \"expected_output\": \"Uncategorized\",\n    \"test_aspect\": \"Above the defined categories\"\n  },\n  \"test_case13\": {\n    \"input\": \"25.00\",\n    \"expected_output\": \"K3\",\n    \"test_aspect\": \"Middle value within K3 range\"\n  },\n  \"test_case14\": {\n    \"input\": \"12.06\",\n    \"expected_output\": \"K2\",\n    \"test_aspect\": \"Value just above the lower boundary of K2\"\n  },\n  \"test_case15\": {\n    \"input\": \"32.43\",\n    \"expected_output\": \"K3\",\n    \"test_aspect\": \"Value just below the upper boundary of K3\"\n  },\n  \"test_case16\": {\n    \"input\": \"54.30\",\n    \"expected_output\": \"K5\",\n    \"test_aspect\": \"Value just below the upper boundary of K5\"\n  }\n}\n``` \n\nNote: Each test case is designed to ensure that all categories are covered, including boundary conditions and values that fall outside the defined ranges. Test cases will help confirm the completeness, correctness, and consistency of the function against all specified requirements."}
{"index": 20915, "preference": "functionality", "prompt": "You are working on a blockchain project and need to implement a function to validate transactions. Each transaction has a maximum size in bytes and includes a script hash. The maximum transaction size is defined by the constant `MAX_TRANSACTION_SIZE_IN_BYTES`, and the length of the script hash is defined by the constant `SCRIPT_HASH_LENGTH`.\n\nWrite a function `validateTransaction(transaction)` that takes a transaction as input and returns `True` if the transaction is valid and `False` otherwise. A valid transaction must satisfy the following conditions:\n1. The size of the transaction must not exceed `MAX_TRANSACTION_SIZE_IN_BYTES`.\n2. The script hash included in the transaction must have a length equal to `SCRIPT_HASH_LENGTH`.\n\nYou need to implement the `validateTransaction` function to ensure that the transactions adhere to these conditions.\n\nExample:\nFor a transaction `tx = { \"data\": \"...\" , \"script_hash\": \"aabbccddeeff11223344556677889900\" }`, the function `validateTransaction(tx)` should return `True` if the size of the data is within the allowed limit and the length of the script hash is as expected.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": { \"data\": \"sample data\", \"script_hash\": \"aabbccddeeff11223344556677889900\" },\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid transaction with data under max size and correct script hash length.\"\n  },\n  \"test_case2\": {\n    \"input\": { \"data\": \"a\".repeat(1001), \"script_hash\": \"aabbccddeeff11223344556677889900\" },\n    \"expected_output\": false,\n    \"test_aspect\": \"Transaction exceeds maximum size limit.\"\n  },\n  \"test_case3\": {\n    \"input\": { \"data\": \"valid data\", \"script_hash\": \"short\" },\n    \"expected_output\": false,\n    \"test_aspect\": \"Script hash length is shorter than required.\"\n  },\n  \"test_case4\": {\n    \"input\": { \"data\": \"valid data\", \"script_hash\": \"aabbccddeeff112233445566778899011\" },\n    \"expected_output\": false,\n    \"test_aspect\": \"Script hash length is longer than required.\"\n  },\n  \"test_case5\": {\n    \"input\": { \"data\": \"\", \"script_hash\": \"aabbccddeeff11223344556677889900\" },\n    \"expected_output\": true,\n    \"test_aspect\": \"Empty transaction data is valid as size is within limit.\"\n  },\n  \"test_case6\": {\n    \"input\": { \"data\": \"a\".repeat(1000), \"script_hash\": \"aabbccddeeff11223344556677889900\" },\n    \"expected_output\": true,\n    \"test_aspect\": \"Transaction with maximum allowable size and valid script hash.\"\n  },\n  \"test_case7\": {\n    \"input\": { \"data\": \"valid data\", \"script_hash\": \"\" },\n    \"expected_output\": false,\n    \"test_aspect\": \"Empty script hash is invalid.\"\n  },\n  \"test_case8\": {\n    \"input\": { \"data\": \"random data\", \"script_hash\": \"aabbccddeeff1122334455667788990\" },\n    \"expected_output\": false,\n    \"test_aspect\": \"Script hash is one character too short.\"\n  },\n  \"test_case9\": {\n    \"input\": { \"data\": \"a\".repeat(500), \"script_hash\": \"aabbccddeeff11223344556677889900\" },\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid transaction with data significantly under max size and valid script hash.\"\n  },\n  \"test_case10\": {\n    \"input\": { \"data\": \"data\", \"script_hash\": \"aabbccddeeff11223344556677889900\" },\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid transaction with minimal data and valid script hash.\"\n  }\n}\n```"}
{"index": 2197, "preference": "functionality", "prompt": "You are tasked with implementing a caching mechanism for a storage system. The system has a configuration with two parameters: `saveToFS`, a boolean indicating whether to save data to the file system, and `maxCacheSize`, an integer representing the maximum size of the cache.\n\nYou need to create a class `StorageCache` that manages the caching mechanism. The class should have the following methods:\n\n1. `StorageCache(boolean saveToFS, int maxCacheSize)`: A constructor that initializes the `saveToFS` and `maxCacheSize` parameters.\n\n2. `String saveStorage(Update update, Storage storage) throws IOException`: A method that saves the `update` to the cache or file system based on the `saveToFS` configuration. If the cache size exceeds `maxCacheSize`, the least recently used item should be evicted from the cache.\n\n3. `String getStorageIdentifierByUUID(String uuid)`: A method that generates a storage identifier based on the given UUID.\n\nYou should implement the caching mechanism and ensure that the `saveStorage` method behaves according to the specified requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"saveToFS\": true,\n      \"maxCacheSize\": 2,\n      \"update\": {\"data\": \"firstUpdate\"},\n      \"storage\": {\"identifier\": \"storage1\"}\n    },\n    \"expected_output\": \"Update saved to filesystem.\",\n    \"test_aspect\": \"Basic functionality when saveToFS is true.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"saveToFS\": false,\n      \"maxCacheSize\": 2,\n      \"update\": {\"data\": \"firstUpdate\"},\n      \"storage\": {\"identifier\": \"storage1\"}\n    },\n    \"expected_output\": \"Update saved to cache.\",\n    \"test_aspect\": \"Basic functionality when saveToFS is false.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"saveToFS\": false,\n      \"maxCacheSize\": 1,\n      \"update\": {\"data\": \"firstUpdate\"},\n      \"storage\": {\"identifier\": \"storage1\"}\n    },\n    \"expected_output\": \"Update saved to cache.\",\n    \"test_aspect\": \"Cache size limit enforcement.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"saveToFS\": false,\n      \"maxCacheSize\": 1,\n      \"update\": {\"data\": \"secondUpdate\"},\n      \"storage\": {\"identifier\": \"storage2\"}\n    },\n    \"expected_output\": \"Cache limit reached. Evicting least recently used item.\",\n    \"test_aspect\": \"Eviction of least recently used item.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"saveToFS\": false,\n      \"maxCacheSize\": 2,\n      \"update\": {\"data\": \"firstUpdate\"},\n      \"storage\": {\"identifier\": \"storage1\"}\n    },\n    \"expected_output\": \"Update saved to cache.\",\n    \"test_aspect\": \"Multiple updates with sufficient cache size.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"saveToFS\": true,\n      \"maxCacheSize\": 2,\n      \"update\": {\"data\": \"firstUpdate\"},\n      \"storage\": {\"identifier\": \"storage1\"}\n    },\n    \"expected_output\": \"Update saved to filesystem.\",\n    \"test_aspect\": \"Testing saving to filesystem.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"saveToFS\": true,\n      \"maxCacheSize\": 2,\n      \"update\": {\"data\": \"firstUpdate\"},\n      \"storage\": {\"identifier\": \"storage1\"}\n    },\n    \"expected_output\": \"Update saved to filesystem.\",\n    \"test_aspect\": \"Multiple updates with filesystem save.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"uuid\": \"123e4567-e89b-12d3-a456-426614174000\"\n    },\n    \"expected_output\": \"Identifier generated for UUID.\",\n    \"test_aspect\": \"UUID to storage identifier conversion.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"saveToFS\": false,\n      \"maxCacheSize\": 0,\n      \"update\": {\"data\": \"firstUpdate\"},\n      \"storage\": {\"identifier\": \"storage1\"}\n    },\n    \"expected_output\": \"Cache size cannot be zero.\",\n    \"test_aspect\": \"Handle zero cache size.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"saveToFS\": true,\n      \"maxCacheSize\": 2,\n      \"update\": {\"data\": \"errorUpdate\"},\n      \"storage\": {\"identifier\": \"storage1\"}\n    },\n    \"expected_output\": \"IOException encountered: Invalid storage.\",\n    \"test_aspect\": \"Handling IOException during save.\"\n  }\n}\n```"}
{"index": 32938, "preference": "functionality", "prompt": "You are working on a data processing system that handles scientific quantities and their associated metadata. The system uses a Python class `QuantityProcessor` to process and store quantities along with their statistical properties. The class has a method `update_targets` that updates the stored quantities with new data. Your task is to implement a new method `calculate_statistics` that calculates the mean and standard deviation of the stored quantities and returns the result in a specific format.\n\nYou are given the following skeleton code for the `QuantityProcessor` class:\n\n```python\nimport uncertainties.unumpy as unumpy\nfrom json_clean import jsanitize\n\nclass QuantityProcessor:\n    def __init__(self):\n        self.propstore = {}\n\n    def calculate_statistics(self):\n        # Your implementation for calculating statistics goes here\n        pass\n\n    def update_targets(self, items):\n        self.propstore.update(items)\n```\n\nYour task is to complete the `calculate_statistics` method to calculate the mean and standard deviation of the stored quantities and return the result in a specific format. The result should be a dictionary with the following keys:\n- \"mean\": A list of mean values of the quantities\n- \"std_dev\": A list of standard deviation values of the quantities\n- \"units\": The units of the quantities\n- \"title\": The display name of the quantities\n\nYou should then update the `update_targets` method to update the stored quantities with new data.\n\nImplement the `calculate_statistics` and `update_targets` methods in the `QuantityProcessor` class to achieve the desired functionality.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"item1\": [1, 2, 3], \"item2\": [4, 5, 6]},\n    \"expected_output\": {\n      \"mean\": [2.0, 5.0],\n      \"std_dev\": [0.816496580927726, 0.816496580927726],\n      \"units\": \"units\",\n      \"title\": \"Test Quantities\"\n    },\n    \"test_aspect\": \"Basic functionality with multiple quantities\"\n  },\n  \"test_case2\": {\n    \"input\": {\"item1\": [10, 20, 30]},\n    \"expected_output\": {\n      \"mean\": [20.0],\n      \"std_dev\": [8.16496580927726],\n      \"units\": \"units\",\n      \"title\": \"Test Quantity\"\n    },\n    \"test_aspect\": \"Single quantity statistics\"\n  },\n  \"test_case3\": {\n    \"input\": {\"item1\": [0, 0, 0]},\n    \"expected_output\": {\n      \"mean\": [0.0],\n      \"std_dev\": [0.0],\n      \"units\": \"units\",\n      \"title\": \"Zero Values Test\"\n    },\n    \"test_aspect\": \"Handling zero values\"\n  },\n  \"test_case4\": {\n    \"input\": {\"item1\": [1, 2, 3, 4, 5]},\n    \"expected_output\": {\n      \"mean\": [3.0],\n      \"std_dev\": [1.4142135623730951],\n      \"units\": \"units\",\n      \"title\": \"Five Values Test\"\n    },\n    \"test_aspect\": \"Calculating mean and std dev for a larger dataset\"\n  },\n  \"test_case5\": {\n    \"input\": {},\n    \"expected_output\": {\n      \"mean\": [],\n      \"std_dev\": [],\n      \"units\": \"units\",\n      \"title\": \"Empty Input Test\"\n    },\n    \"test_aspect\": \"Behavior with no data input\"\n  },\n  \"test_case6\": {\n    \"input\": {\"item1\": [1.5, 2.5, 3.5]},\n    \"expected_output\": {\n      \"mean\": [2.5],\n      \"std_dev\": [0.816496580927726],\n      \"units\": \"units\",\n      \"title\": \"Decimal Values Test\"\n    },\n    \"test_aspect\": \"Handling decimal values in quantities\"\n  },\n  \"test_case7\": {\n    \"input\": {\"item1\": [-10, -20, -30]},\n    \"expected_output\": {\n      \"mean\": [-20.0],\n      \"std_dev\": [8.16496580927726],\n      \"units\": \"units\",\n      \"title\": \"Negative Values Test\"\n    },\n    \"test_aspect\": \"Processing negative values\"\n  },\n  \"test_case8\": {\n    \"input\": {\"item1\": [5, 10], \"item2\": [15, 20, 25]},\n    \"expected_output\": {\n      \"mean\": [7.5, 20.0],\n      \"std_dev\": [3.5355339059327378, 4.08248290463863],\n      \"units\": \"units\",\n      \"title\": \"Multiple Items Test\"\n    },\n    \"test_aspect\": \"Multiple items with different lengths\"\n  },\n  \"test_case9\": {\n    \"input\": {\"item1\": [1, 2, 3], \"item2\": [7, 8, 9, 10]},\n    \"expected_output\": {\n      \"mean\": [2.0, 8.5],\n      \"std_dev\": [0.816496580927726, 1.2909944487358056],\n      \"units\": \"units\",\n      \"title\": \"Different Lengths Test\"\n    },\n    \"test_aspect\": \"Handling quantities of different lengths\"\n  },\n  \"test_case10\": {\n    \"input\": {\"item1\": [100, 200, 300, 400, 500]},\n    \"expected_output\": {\n      \"mean\": [300.0],\n      \"std_dev\": [141.4213562373095],\n      \"units\": \"units\",\n      \"title\": \"Large Values Test\"\n    },\n    \"test_aspect\": \"Calculating statistics for large numbers\"\n  }\n}\n```"}
{"index": 20751, "preference": "functionality", "prompt": "You are tasked with creating a Python function that parses a Django URL configuration and returns the total number of URL patterns defined in the configuration.\n\nYou are given a code snippet representing a portion of a Django URL configuration. The `<gh_stars>` placeholder represents the number of GitHub stars for the project. The URL patterns are defined using the `path` function from the `django.urls` module.\n\nYour task is to implement a function `count_url_patterns` that takes the URL configuration as input and returns the total number of URL patterns defined in the configuration.\n\nThe function signature is:\n```python\ndef count_url_patterns(url_config: list) -> int:\n    # Your implementation\n```\n\nFor example, given the following URL configuration:\n```python\nurl_config = [\n    path('admin/', admin.site.urls),\n    path('blog/', include('blog.urls')),\n    path('accounts/', include('accounts.urls')),\n]\n```\nThe function should return 3, as there are three URL patterns defined in the configuration.\n\nWrite the `count_url_patterns` function to solve this problem.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Test with an empty configuration list.\"\n  },\n  \"test_case2\": {\n    \"input\": [\"path('admin/', admin.site.urls)\"],\n    \"expected_output\": 1,\n    \"test_aspect\": \"Test with a single URL pattern.\"\n  },\n  \"test_case3\": {\n    \"input\": [\n      \"path('admin/', admin.site.urls)\",\n      \"path('blog/', include('blog.urls'))\"\n    ],\n    \"expected_output\": 2,\n    \"test_aspect\": \"Test with multiple URL patterns.\"\n  },\n  \"test_case4\": {\n    \"input\": [\n      \"path('home/', views.home)\",\n      \"path('about/', views.about)\",\n      \"path('contact/', views.contact)\"\n    ],\n    \"expected_output\": 3,\n    \"test_aspect\": \"Test with three distinct URL patterns.\"\n  },\n  \"test_case5\": {\n    \"input\": [\n      \"path('admin/', admin.site.urls)\",\n      \"path('blog/', include('blog.urls'))\",\n      \"path('accounts/', include('accounts.urls'))\",\n      \"path('help/', views.help)\"\n    ],\n    \"expected_output\": 4,\n    \"test_aspect\": \"Test with a mix of includes and direct views.\"\n  },\n  \"test_case6\": {\n    \"input\": [\n      \"path('', include('main.urls'))\"\n    ],\n    \"expected_output\": 1,\n    \"test_aspect\": \"Test with a root path that includes another URL configuration.\"\n  },\n  \"test_case7\": {\n    \"input\": [\n      \"path('products/', include('products.urls'))\",\n      \"path('products/<int:id>/', views.product_detail)\"\n    ],\n    \"expected_output\": 2,\n    \"test_aspect\": \"Test with URL patterns that include parameters.\"\n  },\n  \"test_case8\": {\n    \"input\": [\n      \"path('blog/', include('blog.urls'))\",\n      \"path('blog/<slug:slug>/', views.blog_detail)\"\n    ],\n    \"expected_output\": 2,\n    \"test_aspect\": \"Test with URL patterns using slug parameters.\"\n  },\n  \"test_case9\": {\n    \"input\": [\n      \"path('admin/', admin.site.urls)\",\n      \"path('admin/settings/', views.settings)\",\n      \"path('admin/users/', views.user_management)\"\n    ],\n    \"expected_output\": 3,\n    \"test_aspect\": \"Test with nested URL patterns under an admin path.\"\n  },\n  \"test_case10\": {\n    \"input\": [\n      \"path('users/', include('users.urls'))\",\n      \"path('users/<str:username>/', views.user_profile)\",\n      \"path('products/', include('products.urls'))\",\n      \"path('products/<int:id>/', views.product_detail)\"\n    ],\n    \"expected_output\": 4,\n    \"test_aspect\": \"Test with multiple URL patterns including includes and parameters.\"\n  }\n}\n```"}
{"index": 2450, "preference": "functionality", "prompt": "You are given a class `Collection` that contains a vector of items. The class also has a method `bool isEqual(const Collection& col)` that compares the items of two collections and returns true if they are equal, and false otherwise. However, the implementation of the `isEqual` method is incomplete and needs to be fixed.\n\nYour task is to complete the `isEqual` method to compare the items of two collections. The `isEqual` method should return true if the number of items in both collections is the same and each corresponding item in the collections is equal. If any item at the same index in the collections is not equal, the method should return false.\n\nYou need to complete the `isEqual` method in the given class `Collection`.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Collection {\nprivate:\n    std::vector<int> items;\n\npublic:\n    Collection(const std::vector<int>& inputItems) : items(inputItems) {}\n\n    bool isEqual(const Collection& col) {\n        if (items.size() != col.items.size()) {\n            return false;\n        }\n\n        for (int i = 0, n = items.size(); i < n; ++i) {\n            if (!(items[i] == col.items[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};\n\nint main() {\n    Collection col1({1, 2, 3});\n    Collection col2({1, 2, 3});\n    Collection col3({1, 2, 4});\n\n    std::cout << \"col1 isEqual col2: \" << std::boolalpha << col1.isEqual(col2) << std::endl;  // Output: true\n    std::cout << \"col1 isEqual col3: \" << std::boolalpha << col1.isEqual(col3) << std::endl;  // Output: false\n\n    return 0;\n}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Collection col1({1, 2, 3}); Collection col2({1, 2, 3}); col1.isEqual(col2);\",\n    \"expected_output\": \"true\",\n    \"test_aspect\": \"Basic equality check with identical collections.\"\n  },\n  \"test_case2\": {\n    \"input\": \"Collection col1({1, 2, 3}); Collection col2({1, 2, 4}); col1.isEqual(col2);\",\n    \"expected_output\": \"false\",\n    \"test_aspect\": \"Basic inequality check with differing last item.\"\n  },\n  \"test_case3\": {\n    \"input\": \"Collection col1({}); Collection col2({}); col1.isEqual(col2);\",\n    \"expected_output\": \"true\",\n    \"test_aspect\": \"Equality check for two empty collections.\"\n  },\n  \"test_case4\": {\n    \"input\": \"Collection col1({1, 2, 3}); Collection col2({1, 2}); col1.isEqual(col2);\",\n    \"expected_output\": \"false\",\n    \"test_aspect\": \"Inequality check for collections of different sizes.\"\n  },\n  \"test_case5\": {\n    \"input\": \"Collection col1({1, 2, 3}); Collection col2({3, 2, 1}); col1.isEqual(col2);\",\n    \"expected_output\": \"false\",\n    \"test_aspect\": \"Inequality check for collections with same elements in different order.\"\n  },\n  \"test_case6\": {\n    \"input\": \"Collection col1({0, 0, 0}); Collection col2({0, 0, 0}); col1.isEqual(col2);\",\n    \"expected_output\": \"true\",\n    \"test_aspect\": \"Equality check with identical collections containing zeros.\"\n  },\n  \"test_case7\": {\n    \"input\": \"Collection col1({-1, -2, -3}); Collection col2({-1, -2, -3}); col1.isEqual(col2);\",\n    \"expected_output\": \"true\",\n    \"test_aspect\": \"Equality check with collections containing negative integers.\"\n  },\n  \"test_case8\": {\n    \"input\": \"Collection col1({1, 2, 3, 4}); Collection col2({1, 2, 3, 4}); col1.isEqual(col2);\",\n    \"expected_output\": \"true\",\n    \"test_aspect\": \"Equality check with larger identical collections.\"\n  },\n  \"test_case9\": {\n    \"input\": \"Collection col1({1, 2, 3}); Collection col2({1, 3, 2}); col1.isEqual(col2);\",\n    \"expected_output\": \"false\",\n    \"test_aspect\": \"Inequality check for collections with same elements but different arrangements.\"\n  },\n  \"test_case10\": {\n    \"input\": \"Collection col1({}); Collection col2({1}); col1.isEqual(col2);\",\n    \"expected_output\": \"false\",\n    \"test_aspect\": \"Inequality check for one empty and one non-empty collection.\"\n  }\n}\n```"}
{"index": 8691, "preference": "functionality", "prompt": "You are tasked with implementing a URL routing system for a web application. The given code snippet represents a list of URL patterns and their corresponding view functions in a Python web framework, using the `url` function from the `django.conf.urls` module.\n\nYour task is to create a function that takes a URL and matches it to the corresponding view function based on the defined URL patterns. If a match is found, the function should return the name of the view function; otherwise, it should return \"Not Found\".\n\nThe URL patterns are defined as a list of tuples, where each tuple contains a regular expression pattern, a view function, and a name for the URL pattern.\n\nYou need to implement the `match_url` function, which takes the URL patterns list and a given URL as input and returns the name of the corresponding view function if a match is found, or \"Not Found\" if no match is found.\n\nExample:\nGiven the following URL patterns list:\n```\nurl_patterns = [\n    (r'^show/$', show, 'carton-tests-show'),\n    (r'^add/$', add, 'carton-tests-add'),\n    (r'^remove/$', remove, 'carton-tests-remove'),\n    (r'^remove-single/$', remove_single, 'carton-tests-remove-single'),\n    (r'^clear/$', clear, 'carton-tests-clear'),\n    (r'^set-quantity/$', set_quantity, 'carton-tests-set-quantity'),\n]\n```\nIf the input URL is \"/add/\", the function should return \"carton-tests-add\". If the input URL is \"/update/\", the function should return \"Not Found\".\n\nWrite a function:\n```python\ndef match_url(url_patterns, url):\n    # Your implementation here\n    pass\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/add/\",\n    \"carton-tests-add\",\n    \"Valid URL match\"\n  },\n  \"test_case2\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/show/\",\n    \"carton-tests-show\",\n    \"Valid URL match\"\n  },\n  \"test_case3\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/remove/\",\n    \"carton-tests-remove\",\n    \"Valid URL match\"\n  },\n  \"test_case4\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/remove-single/\",\n    \"carton-tests-remove-single\",\n    \"Valid URL match\"\n  },\n  \"test_case5\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/unknown/\",\n    \"Not Found\",\n    \"Invalid URL match\"\n  },\n  \"test_case6\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/clear/\",\n    \"carton-tests-clear\",\n    \"Valid URL match\"\n  },\n  \"test_case7\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/set-quantity/\",\n    \"carton-tests-set-quantity\",\n    \"Valid URL match\"\n  },\n  \"test_case8\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/\",\n    \"Not Found\",\n    \"Boundary edge match\"\n  },\n  \"test_case9\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/add\",\n    \"Not Found\",\n    \"Invalid URL without trailing slash\"\n  },\n  \"test_case10\": {\n    \"input\": [ \n      [ \n        \"^show/$\", \n        \"show\", \n        \"carton-tests-show\" \n      ], \n      [ \n        \"^add/$\", \n        \"add\", \n        \"carton-tests-add\" \n      ], \n      [ \n        \"^remove/$\", \n        \"remove\", \n        \"carton-tests-remove\" \n      ], \n      [ \n        \"^remove-single/$\", \n        \"remove_single\", \n        \"carton-tests-remove-single\" \n      ], \n      [ \n        \"^clear/$\", \n        \"clear\", \n        \"carton-tests-clear\" \n      ], \n      [ \n        \"^set-quantity/$\", \n        \"set_quantity\", \n        \"carton-tests-set-quantity\" \n      ] \n    ], \n    \"/remove/extra/path/\",\n    \"Not Found\",\n    \"Invalid URL with extra paths\"\n  }\n}\n```"}
{"index": 33652, "preference": "functionality", "prompt": "You are tasked with implementing a job scheduling algorithm for a high-performance computing (HPC) system. The system has a set of partitions, each of which can be either a general-purpose partition or a GPU partition. Additionally, there are various job states that a job can be in, including \"RUNNING\", \"COMPLETING\", \"COMPLETED\", \"NODE_FAIL\", \"TIMEOUT\", \"FAILED\", and \"CANCELLED\". Furthermore, there is a custom function `node2int(node)` that converts a node name to an integer by removing all non-numeric characters from the node name.\n\nYour task is to implement a function `schedule_jobs(partitions, job_states)` that takes in a list of partitions and a list of job states, and returns a dictionary containing the count of active jobs and finished jobs for each partition. The count of active jobs for a partition is the total number of jobs in the \"RUNNING\" or \"COMPLETING\" states, and the count of finished jobs is the total number of jobs in the \"COMPLETED\", \"NODE_FAIL\", \"TIMEOUT\", \"FAILED\", or \"CANCELLED\" states for that partition.\n\nYou should use the provided code snippet as a reference for the partition and job state definitions, and the custom function `node2int(node)` for any necessary node name conversions.\n\nExample:\nGiven `partitions = [\"general\", \"gpu\", \"general\"]` and `job_states = [\"RUNNING\", \"COMPLETED\", \"COMPLETING\", \"FAILED\", \"RUNNING\", \"COMPLETED\"]`, the function should return `{\"general\": {\"active\": 2, \"finished\": 2}, \"gpu\": {\"active\": 1, \"finished\": 1}}`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"partitions\": [\"general\", \"gpu\"],\n      \"job_states\": [\"RUNNING\", \"COMPLETED\"]\n    },\n    \"expected_output\": {\n      \"general\": {\"active\": 1, \"finished\": 1},\n      \"gpu\": {\"active\": 0, \"finished\": 0}\n    },\n    \"test_aspect\": \"Basic functionality with minimal input.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"partitions\": [\"general\", \"gpu\"],\n      \"job_states\": [\"RUNNING\", \"RUNNING\", \"COMPLETED\"]\n    },\n    \"expected_output\": {\n      \"general\": {\"active\": 2, \"finished\": 1},\n      \"gpu\": {\"active\": 0, \"finished\": 0}\n    },\n    \"test_aspect\": \"Testing with multiple jobs in RUNNING state.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"partitions\": [\"general\", \"gpu\"],\n      \"job_states\": [\"FAILED\", \"CANCELLED\", \"NODE_FAIL\"]\n    },\n    \"expected_output\": {\n      \"general\": {\"active\": 0, \"finished\": 3},\n      \"gpu\": {\"active\": 0, \"finished\": 0}\n    },\n    \"test_aspect\": \"Testing with jobs only in finished states.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"partitions\": [\"general\", \"gpu\"],\n      \"job_states\": [\"RUNNING\", \"COMPLETING\", \"RUNNING\", \"TIMEOUT\"]\n    },\n    \"expected_output\": {\n      \"general\": {\"active\": 3, \"finished\": 1},\n      \"gpu\": {\"active\": 0, \"finished\": 0}\n    },\n    \"test_aspect\": \"Testing with a mix of active and finished jobs.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"partitions\": [\"general\", \"gpu\", \"general\"],\n      \"job_states\": [\"COMPLETING\", \"COMPLETED\", \"RUNNING\", \"FAILED\", \"CANCELLED\"]\n    },\n    \"expected_output\": {\n      \"general\": {\"active\": 2, \"finished\": 2},\n      \"gpu\": {\"active\": 0, \"finished\": 0}\n    },\n    \"test_aspect\": \"Testing with multiple partitions and a mix of states.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"partitions\": [\"partition_1\", \"partition_2\"],\n      \"job_states\": [\"RUNNING\", \"RUNNING\", \"CANCELLED\", \"FAILED\", \"TIMEOUT\"]\n    },\n    \"expected_output\": {\n      \"partition_1\": {\"active\": 2, \"finished\": 3},\n      \"partition_2\": {\"active\": 0, \"finished\": 0}\n    },\n    \"test_aspect\": \"Testing with alphanumeric partition names.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"partitions\": [\"single_partition\"],\n      \"job_states\": []\n    },\n    \"expected_output\": {\n      \"single_partition\": {\"active\": 0, \"finished\": 0}\n    },\n    \"test_aspect\": \"Testing with empty job states.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"partitions\": [\"general\"],\n      \"job_states\": [\"RUNNING\", \"COMPLETING\", \"NODE_FAIL\", \"TIMEOUT\"]\n    },\n    \"expected_output\": {\n      \"general\": {\"active\": 2, \"finished\": 2}\n    },\n    \"test_aspect\": \"Testing with all states represented but one partition.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"partitions\": [\"gpu\", \"general\", \"gpu\"],\n      \"job_states\": [\"RUNNING\", \"COMPLETED\", \"RUNNING\", \"COMPLETING\", \"FAILED\", \"CANCELLED\"]\n    },\n    \"expected_output\": {\n      \"gpu\": {\"active\": 2, \"finished\": 1},\n      \"general\": {\"active\": 2, \"finished\": 1}\n    },\n    \"test_aspect\": \"Testing with multiple partitions of the same type.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"partitions\": [\"partition_1\", \"partition_2\", \"partition_3\"],\n      \"job_states\": [\"RUNNING\", \"COMPLETING\", \"COMPLETED\", \"NODE_FAIL\", \"TIMEOUT\"]\n    },\n    \"expected_output\": {\n      \"partition_1\": {\"active\": 2, \"finished\": 3},\n      \"partition_2\": {\"active\": 0, \"finished\": 0},\n      \"partition_3\": {\"active\": 0, \"finished\": 0}\n    },\n    \"test_aspect\": \"Testing with three partitions and a mix of job states.\"\n  }\n}\n```"}
{"index": 22309, "preference": "functionality", "prompt": "You are tasked with implementing a Python class that represents a simple inventory management system for a hardware store. The class should allow users to add, remove, and update the quantity of tools in the inventory. Additionally, it should provide a method to calculate the total value of the inventory based on the quantity and unit price of each tool.\n\nYour task is to complete the implementation of the `ToolInventory` class by adding the necessary methods to achieve the following functionalities:\n1. Add a new tool to the inventory with a specified quantity and unit price.\n2. Remove a tool from the inventory.\n3. Update the quantity of a tool in the inventory.\n4. Calculate the total value of the inventory by summing up the value of each tool (quantity * unit price).\n\nUse the provided code snippet as a starting point and implement the missing methods in the `ToolInventory` class to achieve the desired functionalities.\n\n```python\nfrom dataclasses import dataclass\n\n@dataclass\nclass Tool:\n    name: str\n    quantity: int\n    unit_price: float\n\nclass ToolInventory:\n    def __init__(self):\n        self.inventory = []\n\n    def add_tool(self, name, quantity, unit_price):\n        # Add a new tool to the inventory with the specified quantity and unit price\n        pass\n\n    def remove_tool(self, name):\n        # Remove a tool from the inventory\n        pass\n\n    def update_quantity(self, name, new_quantity):\n        # Update the quantity of a tool in the inventory\n        pass\n\n    def calculate_inventory_value(self):\n        # Calculate the total value of the inventory\n        pass\n\n# Sample usage\ninventory = ToolInventory()\ninventory.add_tool(\"Hammer\", 10, 15.99)\ninventory.add_tool(\"Screwdriver\", 20, 9.99)\nprint(inventory.calculate_inventory_value())  # Output: 349.8\ninventory.update_quantity(\"Hammer\", 15)\nprint(inventory.calculate_inventory_value())  # Output: 449.7\ninventory.remove_tool(\"Screwdriver\")\nprint(inventory.calculate_inventory_value())  # Output: 239.85\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"inventory.add_tool('Wrench', 5, 12.50)\",\n    \"expected_output\": null,\n    \"test_aspect\": \"Adding a new tool to the inventory\"\n  },\n  \"test_case2\": {\n    \"input\": \"inventory.add_tool('Drill', 10, 19.99)\",\n    \"expected_output\": null,\n    \"test_aspect\": \"Adding another tool to the inventory\"\n  },\n  \"test_case3\": {\n    \"input\": \"inventory.calculate_inventory_value()\",\n    \"expected_output\": 187.39,\n    \"test_aspect\": \"Calculating total inventory value after adding tools\"\n  },\n  \"test_case4\": {\n    \"input\": \"inventory.update_quantity('Wrench', 8)\",\n    \"expected_output\": null,\n    \"test_aspect\": \"Updating quantity of an existing tool in the inventory\"\n  },\n  \"test_case5\": {\n    \"input\": \"inventory.calculate_inventory_value()\",\n    \"expected_output\": 193.89,\n    \"test_aspect\": \"Calculating total inventory value after updating quantity\"\n  },\n  \"test_case6\": {\n    \"input\": \"inventory.remove_tool('Wrench')\",\n    \"expected_output\": null,\n    \"test_aspect\": \"Removing a tool from the inventory\"\n  },\n  \"test_case7\": {\n    \"input\": \"inventory.calculate_inventory_value()\",\n    \"expected_output\": 151.89,\n    \"test_aspect\": \"Calculating total inventory value after removing a tool\"\n  },\n  \"test_case8\": {\n    \"input\": \"inventory.update_quantity('Drill', 0)\",\n    \"expected_output\": null,\n    \"test_aspect\": \"Setting the quantity of a tool to zero\"\n  },\n  \"test_case9\": {\n    \"input\": \"inventory.remove_tool('Drill')\",\n    \"expected_output\": null,\n    \"test_aspect\": \"Removing a tool that has zero quantity\"\n  },\n  \"test_case10\": {\n    \"input\": \"inventory.calculate_inventory_value()\",\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"Calculating total inventory value when inventory is empty\"\n  }\n}\n```"}
{"index": 34119, "preference": "functionality", "prompt": "You are tasked with implementing a function that performs a specific transformation on a given input array. The function should take an input array of shape (batch_size, N, N, 2) and return a complex-valued array of shape (batch_size, N, N, 1). The transformation involves combining the real and imaginary parts of the input array to form complex numbers.\n\nYou need to implement the following function:\n\n```python\ndef transform_to_complex(array):\n    \"\"\"\n    Transforms the input array into a complex-valued array.\n\n    Args:\n    array (ndarray): Input array of shape (batch_size, N, N, 2) containing real and imaginary parts.\n\n    Returns:\n    joined_array(complex): A complex-valued array of shape (batch_size, N, N, 1)\n    \"\"\"\n    # Your implementation here\n```\n\nYour task is to complete the `transform_to_complex` function to perform the transformation as described and return the resulting complex-valued array.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [[[ [1, 2], [3, 4] ]]], \n    \"expected_output\": [[[[1 + 2j], [3 + 4j]]]], \n    \"test_aspect\": \"Basic transformation with positive integers\"\n  },\n  \"test_case2\": {\n    \"input\": [[[ [0, 0], [0, 0] ]]], \n    \"expected_output\": [[[[0 + 0j], [0 + 0j]]]], \n    \"test_aspect\": \"Transformation with zero values\"\n  },\n  \"test_case3\": {\n    \"input\": [[[ [1, -1], [-1, 1] ]]], \n    \"expected_output\": [[[[1 - 1j], [-1 + 1j]]]], \n    \"test_aspect\": \"Transformation with positive and negative integers\"\n  },\n  \"test_case4\": {\n    \"input\": [[[ [3, 5], [2, 4], [1, 7] ]]], \n    \"expected_output\": [[[[3 + 5j], [2 + 4j], [1 + 7j]]]], \n    \"test_aspect\": \"Transformation with larger arrays\"\n  },\n  \"test_case5\": {\n    \"input\": [[[[ [1, 2], [3, 4] ]], [[ [5, 6], [7, 8] ]]]], \n    \"expected_output\": [[[[1 + 2j], [3 + 4j]]], [[[5 + 6j], [7 + 8j]]]], \n    \"test_aspect\": \"Batch processing with multiple 2D arrays\"\n  },\n  \"test_case6\": {\n    \"input\": [[[ [2.5, 3.5], [4.5, 5.5] ]]], \n    \"expected_output\": [[[[2.5 + 3.5j], [4.5 + 5.5j]]]], \n    \"test_aspect\": \"Transformation with floating-point numbers\"\n  },\n  \"test_case7\": {\n    \"input\": [[[ [1, 1], [2, 2], [3, 3] ]]], \n    \"expected_output\": [[[[1 + 1j], [2 + 2j], [3 + 3j]]]], \n    \"test_aspect\": \"Transformation with equal real and imaginary parts\"\n  },\n  \"test_case8\": {\n    \"input\": [[[ [1e10, 1e10], [1e-10, -1e-10] ]]], \n    \"expected_output\": [[[[1e10 + 1e10j], [1e-10 - 1e-10j]]]], \n    \"test_aspect\": \"Transformation with extreme values (large and small)\"\n  },\n  \"test_case9\": {\n    \"input\": [[[ [0.0, 0.1], [0.2, 0.3] ]]], \n    \"expected_output\": [[[[0.0 + 0.1j], [0.2 + 0.3j]]]], \n    \"test_aspect\": \"Transformation with decimal values\"\n  },\n  \"test_case10\": {\n    \"input\": [[[ [999, 999], [888, 888] ]]], \n    \"expected_output\": [[[[999 + 999j], [888 + 888j]]]], \n    \"test_aspect\": \"Transformation with large integer values\"\n  }\n}\n```"}
{"index": 6270, "preference": "functionality", "prompt": "You are tasked with implementing a function that processes data from a dictionary and returns a modified string based on certain rules. The function should replace specific characters in the input string and return the modified string as the output.\n\nYou are given the following code snippet as a starting point:\n\n```python\nid = id.replace(\"(\", \"_\").replace(\")\", \"_\").replace(\"/\", \"_\")\nreturn id\n```\n\nYour task is to implement the function `process_id` that takes a string `id` as input and applies the following transformations:\n1. Replace all occurrences of \"(\" with \"_\"\n2. Replace all occurrences of \")\" with \"_\"\n3. Replace all occurrences of \"/\" with \"_\"\n\nThe modified string should then be returned as the output.\n\nYour implementation should be able to handle any input string and perform the specified replacements accurately.\n\nImplement the function:\n```python\ndef process_id(id: str) -> str:\n    # Your implementation here\n```\n\nExample:\n```python\ninput_id = \"abc(def)/ghi\"\noutput = process_id(input_id)\nprint(output)  # Output: \"abc_def__ghi\"\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Handling empty input string\"\n  },\n  \"test_case2\": {\n    \"input\": \"abc(def)/ghi\",\n    \"expected_output\": \"abc_def__ghi\",\n    \"test_aspect\": \"Basic replacement of '(' and ')' and '/'\"\n  },\n  \"test_case3\": {\n    \"input\": \"abc/def/ghi\",\n    \"expected_output\": \"abc_def_ghi\",\n    \"test_aspect\": \"Handling multiple '/' characters\"\n  },\n  \"test_case4\": {\n    \"input\": \"abc(def)ghi\",\n    \"expected_output\": \"abc_def_ghi\",\n    \"test_aspect\": \"Handling adjacent '(' and ')' characters\"\n  },\n  \"test_case5\": {\n    \"input\": \"(abc)/def\",\n    \"expected_output\": \"_abc_def\",\n    \"test_aspect\": \"Replacing leading '(' and trailing '/'\"\n  },\n  \"test_case6\": {\n    \"input\": \"abc)def(\",\n    \"expected_output\": \"abc_def_\",\n    \"test_aspect\": \"Replacing mixed parentheses and checking order\"\n  },\n  \"test_case7\": {\n    \"input\": \"no_special_characters\",\n    \"expected_output\": \"no_special_characters\",\n    \"test_aspect\": \"Handling cases with no characters to replace\"\n  },\n  \"test_case8\": {\n    \"input\": \"(((abc)))//def//ghi\",\n    \"expected_output\": \"___abc___def__ghi\",\n    \"test_aspect\": \"Handling multiple instances of characters to replace\"\n  },\n  \"test_case9\": {\n    \"input\": \"///()()//abc\",\n    \"expected_output\": \"____abc\",\n    \"test_aspect\": \"Handling leading and trailing special characters\"\n  },\n  \"test_case10\": {\n    \"input\": \"(((//)))\",\n    \"expected_output\": \"_____\",\n    \"test_aspect\": \"Handling input only with special characters\"\n  }\n}\n```"}
{"index": 24853, "preference": "functionality", "prompt": "You are tasked with implementing a custom predictor class for a 3D U-Net model used in medical image segmentation. The provided code snippet is a part of a larger system for predicting segmentations of medical images using a 3D U-Net model. Your task is to create a custom predictor class that can take the trained U-Net model, a data loader for test images, an output file path, and a configuration file as input, and perform predictions on the test images using the U-Net model.\n\nYour custom predictor class should adhere to the following requirements:\n- It should be able to load the trained U-Net model and perform predictions on the test images.\n- It should save the predicted segmentations to the specified output file in a suitable format, such as HDF5.\n- It should be configurable through a provided configuration file, allowing for customization of prediction behavior.\n\nDesign and implement the custom predictor class according to the given requirements, ensuring that it can be seamlessly integrated into the existing system for medical image segmentation.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/test_data_loader\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"path/to/config.yaml\"\n    },\n    \"expected_output\": \"Predicted segmentations saved to path/to/output_file.h5\",\n    \"test_aspect\": \"Basic functionality of loading the model, making predictions, and saving output.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"model_path\": \"invalid/path/to/model.h5\",\n      \"data_loader\": \"path/to/test_data_loader\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"path/to/config.yaml\"\n    },\n    \"expected_output\": \"Error: Model file not found.\",\n    \"test_aspect\": \"Handling of invalid model path.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/empty_test_data_loader\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"path/to/config.yaml\"\n    },\n    \"expected_output\": \"Warning: No test images found in the data loader.\",\n    \"test_aspect\": \"Handling of empty data loader.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/test_data_loader\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"invalid/path/to/config.yaml\"\n    },\n    \"expected_output\": \"Error: Configuration file not found.\",\n    \"test_aspect\": \"Handling of invalid configuration file path.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/test_data_loader\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"path/to/config_with_invalid_parameters.yaml\"\n    },\n    \"expected_output\": \"Error: Invalid parameters in configuration file.\",\n    \"test_aspect\": \"Validation of configuration file contents.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/test_data_loader\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"path/to/config.yaml\"\n    },\n    \"expected_output\": \"Predicted segmentations saved to path/to/output_file.h5\",\n    \"test_aspect\": \"Verifying correct output file format and saving functionality.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/test_data_loader\",\n      \"output_file\": \"path/to/output_file_with_no_write_permissions.h5\",\n      \"config_file\": \"path/to/config.yaml\"\n    },\n    \"expected_output\": \"Error: Write permission denied for output file.\",\n    \"test_aspect\": \"Handling of file permission issues when saving output.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/test_data_loader\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"path/to/config.yaml\"\n    },\n    \"expected_output\": \"Predictions are consistent with previous outputs.\",\n    \"test_aspect\": \"Consistency of outputs across multiple runs with the same input.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/test_data_loader_with_corrupted_images\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"path/to/config.yaml\"\n    },\n    \"expected_output\": \"Error: One or more images in the data loader are corrupted.\",\n    \"test_aspect\": \"Robustness against corrupted input data.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"model_path\": \"path/to/trained_model.h5\",\n      \"data_loader\": \"path/to/test_data_loader\",\n      \"output_file\": \"path/to/output_file.h5\",\n      \"config_file\": \"path/to/config_with_special_cases.yaml\"\n    },\n    \"expected_output\": \"Predicted segmentations saved with special configurations applied.\",\n    \"test_aspect\": \"Validation of handling special cases as per configuration.\"\n  }\n}\n```"}
{"index": 1557, "preference": "functionality", "prompt": "You are tasked with creating a Python script that processes a list of strings representing programming language and framework specifications. Each string in the list follows a specific format: 'Category :: Subcategory :: Version'. Your goal is to extract and organize this information into a dictionary where the keys are the categories, and the values are lists of subcategories and versions associated with each category.\n\nWrite a function `process_specifications(specs)` that takes a list of specifications as input and returns a dictionary containing the organized information.\n\nFunction Signature: `def process_specifications(specs: List[str]) -> Dict[str, List[Tuple[str, str]]]:`\n\nInput:\n- `specs`: A list of strings (1 <= len(specs) <= 100) representing programming language and framework specifications. Each string is formatted as 'Category :: Subcategory :: Version', where Category, Subcategory, and Version are non-empty alphanumeric strings separated by ' :: '.\n\nOutput:\n- Returns a dictionary where the keys are the categories (e.g., 'Programming Language', 'Framework') and the values are lists of tuples containing the subcategories and versions associated with each category.\n\nExample:\n```python\nspecs = [\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Framework :: Django',\n    'Framework :: Django :: 2.0',\n]\n\nprocess_specifications(specs)\n```\n\nOutput:\n```python\n{\n    'Programming Language': [('Python', '3.4'), ('Python', '3.5'), ('Python', '3.6')],\n    'Framework': [('Django', ''), ('Django', '2.0')]\n}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\n      \"Programming Language :: Python :: 3.4\",\n      \"Programming Language :: Python :: 3.5\",\n      \"Programming Language :: Python :: 3.6\"\n    ],\n    \"expected_output\": {\n      \"Programming Language\": [\n        [\"Python\", \"3.4\"],\n        [\"Python\", \"3.5\"],\n        [\"Python\", \"3.6\"]\n      ]\n    },\n    \"test_aspect\": \"Basic functionality with multiple versions of the same subcategory\"\n  },\n  \"test_case2\": {\n    \"input\": [\n      \"Framework :: Django\",\n      \"Framework :: Django :: 2.0\"\n    ],\n    \"expected_output\": {\n      \"Framework\": [\n        [\"Django\", \"\"],\n        [\"Django\", \"2.0\"]\n      ]\n    },\n    \"test_aspect\": \"Handling of subcategories with and without versions\"\n  },\n  \"test_case3\": {\n    \"input\": [\n      \"Programming Language :: Java :: 8\",\n      \"Programming Language :: Java :: 11\"\n    ],\n    \"expected_output\": {\n      \"Programming Language\": [\n        [\"Java\", \"8\"],\n        [\"Java\", \"11\"]\n      ]\n    },\n    \"test_aspect\": \"Multiple versions for different programming languages\"\n  },\n  \"test_case4\": {\n    \"input\": [\n      \"Framework :: Flask\",\n      \"Framework :: Flask :: 1.0\",\n      \"Framework :: Flask :: 1.1\"\n    ],\n    \"expected_output\": {\n      \"Framework\": [\n        [\"Flask\", \"\"],\n        [\"Flask\", \"1.0\"],\n        [\"Flask\", \"1.1\"]\n      ]\n    },\n    \"test_aspect\": \"Frameworks with multiple versions and empty version entries\"\n  },\n  \"test_case5\": {\n    \"input\": [\n      \"Database :: MySQL :: 5.7\",\n      \"Database :: PostgreSQL :: 12\"\n    ],\n    \"expected_output\": {\n      \"Database\": [\n        [\"MySQL\", \"5.7\"],\n        [\"PostgreSQL\", \"12\"]\n      ]\n    },\n    \"test_aspect\": \"Different categories with specific versions\"\n  },\n  \"test_case6\": {\n    \"input\": [\n      \"Programming Language :: Go\",\n      \"Framework :: React :: 16.8\",\n      \"Framework :: Vue\"\n    ],\n    \"expected_output\": {\n      \"Programming Language\": [\n        [\"Go\", \"\"]\n      ],\n      \"Framework\": [\n        [\"React\", \"16.8\"],\n        [\"Vue\", \"\"]\n      ]\n    },\n    \"test_aspect\": \"Mix of categories with some having empty subcategory versions\"\n  },\n  \"test_case7\": {\n    \"input\": [],\n    \"expected_output\": {},\n    \"test_aspect\": \"Empty input list should return an empty dictionary\"\n  },\n  \"test_case8\": {\n    \"input\": [\n      \"Programming Language :: Ruby\",\n      \"Framework :: Ruby on Rails\"\n    ],\n    \"expected_output\": {\n      \"Programming Language\": [\n        [\"Ruby\", \"\"]\n      ],\n      \"Framework\": [\n        [\"Ruby on Rails\", \"\"]\n      ]\n    },\n    \"test_aspect\": \"Handling cases with categories that have no versions\"\n  },\n  \"test_case9\": {\n    \"input\": [\n      \"Library :: NumPy :: 1.19\",\n      \"Library :: SciPy :: 1.5\"\n    ],\n    \"expected_output\": {\n      \"Library\": [\n        [\"NumPy\", \"1.19\"],\n        [\"SciPy\", \"1.5\"]\n      ]\n    },\n    \"test_aspect\": \"Multiple entries in a new category (Library) with versions\"\n  },\n  \"test_case10\": {\n    \"input\": [\n      \"Framework :: Angular\",\n      \"Framework :: Angular :: 9\",\n      \"Framework :: Angular :: 10\"\n    ],\n    \"expected_output\": {\n      \"Framework\": [\n        [\"Angular\", \"\"],\n        [\"Angular\", \"9\"],\n        [\"Angular\", \"10\"]\n      ]\n    },\n    \"test_aspect\": \"Framework with multiple versions and an initial empty version\"\n  }\n}\n```"}
{"index": 32983, "preference": "functionality", "prompt": "You are tasked with implementing a class that represents a scientific paper. The class should have properties for the raw dictionary data, title, and abstract of the paper. Your goal is to create a Python class with the specified properties and demonstrate its usage.\n\nCreate a Python class `ScientificPaper` with the following properties:\n- `raw_dictionary`: A property that returns the raw dictionary data of the paper.\n- `title`: A property that returns the title of the paper.\n- `abstract`: A property that returns the abstract of the paper.\n\nYour task is to implement the `ScientificPaper` class with the given properties and demonstrate its usage by creating an instance of the class and accessing its properties.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Understanding AI\",\n        \"abstract\": \"This paper explores the fundamentals of artificial intelligence.\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Understanding AI\",\n      \"abstract\": \"This paper explores the fundamentals of artificial intelligence.\"\n    },\n    \"test_aspect\": \"Basic property retrieval for title and abstract.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Deep Learning Advances\",\n        \"abstract\": \"An overview of the latest advances in deep learning.\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Deep Learning Advances\",\n      \"abstract\": \"An overview of the latest advances in deep learning.\"\n    },\n    \"test_aspect\": \"Verify that the title and abstract are correctly assigned from a dictionary.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"\",\n        \"abstract\": \"\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"\",\n      \"abstract\": \"\"\n    },\n    \"test_aspect\": \"Handling empty strings for title and abstract.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Space Exploration: Past and Future\",\n        \"abstract\": \"This paper discusses the history and future of space exploration.\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Space Exploration: Past and Future\",\n      \"abstract\": \"This paper discusses the history and future of space exploration.\"\n    },\n    \"test_aspect\": \"Validate that spaces in title and abstract are handled properly.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Quantum Computing\",\n        \"abstract\": \"Examining the principles of quantum computing and its applications.\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Quantum Computing\",\n      \"abstract\": \"Examining the principles of quantum computing and its applications.\"\n    },\n    \"test_aspect\": \"Test for correctness with typical scientific content.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Theories of Relativity\",\n        \"abstract\": \"A comprehensive study of Einstein's theories.\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Theories of Relativity\",\n      \"abstract\": \"A comprehensive study of Einstein's theories.\"\n    },\n    \"test_aspect\": \"Check if the class can handle complex titles and abstracts.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Artificial Intelligence and Ethics\",\n        \"abstract\": \"The ethical implications of AI technology.\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Artificial Intelligence and Ethics\",\n      \"abstract\": \"The ethical implications of AI technology.\"\n    },\n    \"test_aspect\": \"Validate that the class supports a title with a conjunction.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Machine Learning\",\n        \"abstract\": null\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Machine Learning\",\n      \"abstract\": \"\"\n    },\n    \"test_aspect\": \"Check handling of null abstract input.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Bioinformatics\",\n        \"abstract\": \"An introduction to bioinformatics.\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Bioinformatics\",\n      \"abstract\": \"An introduction to bioinformatics.\"\n    },\n    \"test_aspect\": \"Validate correct retrieval for common scientific topics.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"raw_dictionary\": {\n        \"title\": \"Nanotechnology\",\n        \"abstract\": \"The future of technology at the nanoscale.\"\n      }\n    },\n    \"expected_output\": {\n      \"title\": \"Nanotechnology\",\n      \"abstract\": \"The future of technology at the nanoscale.\"\n    },\n    \"test_aspect\": \"Ensure that the entire object is correctly generated and properties work as expected.\"\n  }\n}\n```"}
{"index": 26158, "preference": "functionality", "prompt": "You are working on a geographic search application that retrieves information about places based on their geographical coordinates. You are given a Python class `GeoSearch` with two methods: `search_places` and `get_attribute`.\n\nThe `search_places` method takes a geographical location (latitude and longitude) and a unit of measurement as input, constructs a query to search for places in a specified index in Elasticsearch, and returns a list of place objects.\n\nThe `get_attribute` method is intended to retrieve a specific attribute of a place object.\n\nYour task is to complete the `get_attribute` method to extract the value of the specified attribute from a place object. The place object is represented as a dictionary with various attributes.\n\nComplete the `get_attribute` method to return the value of the specified attribute from the place object. If the attribute is not found, return `None`.\n\n```python\nclass GeoSearch:\n    def __init__(self, es):\n        self.es = es\n\n    def search_places(self, location, unit, examples_count):\n        query = {\n            \"query\": {\n                \"bool\": {\n                    \"must\": {\n                        \"geo_distance\": {\n                            \"distance\": \"10km\",\n                            \"location\": {\n                                \"lat\": location.get(\"lat\"),\n                                \"lon\": location.get(\"lon\"),\n                            },\n                            \"unit\": unit,\n                        }\n                    }\n                }\n            }\n        }\n        example = self.es.search(index=\"geo_placename\", body=query, size=examples_count)\n        return [places.Place(e[\"_id\"], e[\"_source\"]) for e in example[\"hits\"][\"hits\"]]\n\n    def get_attribute(self, attr, place_obj):\n        \"\"\"\n        Retrieve the value of the specified attribute from the place object.\n\n        Args:\n        attr (str): The attribute to retrieve.\n        place_obj (dict): The place object containing various attributes.\n\n        Returns:\n        The value of the specified attribute from the place object, or None if the attribute is not found.\n        \"\"\"\n        return place_obj.get(attr)\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"location\": {\"lat\": 34.0522, \"lon\": -118.2437},\n      \"unit\": \"km\",\n      \"examples_count\": 5\n    },\n    \"expected_output\": \"List of place objects retrieved from Elasticsearch based on the specified location.\",\n    \"test_aspect\": \"Basic functionality of search_places method with valid coordinates and unit.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"location\": {\"lat\": 0, \"lon\": 0},\n      \"unit\": \"km\",\n      \"examples_count\": 5\n    },\n    \"expected_output\": \"List of place objects retrieved from Elasticsearch, possibly empty if no places found.\",\n    \"test_aspect\": \"Search functionality when querying at the origin point (0,0).\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"location\": {\"lat\": 34.0522, \"lon\": -118.2437},\n      \"unit\": \"miles\",\n      \"examples_count\": 3\n    },\n    \"expected_output\": \"List of place objects retrieved, potentially different results based on unit.\",\n    \"test_aspect\": \"Search functionality with a different unit of measurement.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"location\": {\"lat\": 90, \"lon\": 180},\n      \"unit\": \"km\",\n      \"examples_count\": 5\n    },\n    \"expected_output\": \"List of place objects or empty list, depending on the geographical limits of the search.\",\n    \"test_aspect\": \"Boundary case handling at maximum latitude and longitude.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"attr\": \"name\",\n      \"place_obj\": {\"name\": \"Los Angeles\", \"type\": \"city\"}\n    },\n    \"expected_output\": \"Los Angeles\",\n    \"test_aspect\": \"Retrieve an existing attribute from the place object.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"attr\": \"non_existent_attribute\",\n      \"place_obj\": {\"name\": \"Los Angeles\", \"type\": \"city\"}\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Handling of non-existent attributes in place object.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"location\": {\"lat\": 34.0522, \"lon\": -118.2437},\n      \"unit\": \"km\",\n      \"examples_count\": 10\n    },\n    \"expected_output\": \"List of 10 place objects, confirming the count matches examples_count.\",\n    \"test_aspect\": \"Check if examples_count parameter correctly limits the number of results.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"location\": {\"lat\": 34.0522, \"lon\": -118.2437},\n      \"unit\": \"km\",\n      \"examples_count\": 0\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Behavior of search_places when examples_count is set to zero.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"attr\": \"type\",\n      \"place_obj\": {\"name\": \"Los Angeles\"}\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Attempt to retrieve an attribute that is not present in the place object.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"location\": {\"lat\": 37.7749, \"lon\": -122.4194},\n      \"unit\": \"km\",\n      \"examples_count\": 5\n    },\n    \"expected_output\": \"List of place objects retrieved from Elasticsearch based on input location.\",\n    \"test_aspect\": \"Testing search_places method with coordinates of San Francisco.\"\n  }\n}\n```"}
{"index": 28334, "preference": "functionality", "prompt": "You are tasked with implementing a function to generate a list of random Euclidean points in a 2D space. Each point should have integer coordinates within a specified range. Additionally, you need to implement a function to calculate the distance between two given Euclidean points.\n\nWrite a Python class `EuclideanPoint` that represents a point in 2D space. The class should have the following methods:\n- `__init__(self, x, y)`: Initializes the point with the given x and y coordinates.\n- `distance_to(self, other)`: Returns the Euclidean distance between the current point and the `other` point.\n\nWrite a Python function `rand(k, x_range, y_range)` that generates `k` random Euclidean points within the specified ranges. The function should return a list of `EuclideanPoint` objects.\n\nYou should also implement a Python class `Line` that represents a line segment between two Euclidean points. The class should have the following methods:\n- `__init__(self, start, end)`: Initializes the line segment with the given start and end points.\n- `length(self)`: Returns the length of the line segment.\n\nYour task is to implement the `EuclideanPoint` class, the `rand` function, and the `Line` class as described above.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"EuclideanPoint(1, 1).distance_to(EuclideanPoint(4, 5))\",\n    \"expected_output\": \"5.0\",\n    \"test_aspect\": \"Functional Execution Correctness - Check distance calculation between two points.\"\n  },\n  \"test_case2\": {\n    \"input\": \"EuclideanPoint(0, 0).distance_to(EuclideanPoint(0, 0))\",\n    \"expected_output\": \"0.0\",\n    \"test_aspect\": \"Boundary Case - Distance from a point to itself should be zero.\"\n  },\n  \"test_case3\": {\n    \"input\": \"Line(EuclideanPoint(0, 0), EuclideanPoint(3, 4)).length()\",\n    \"expected_output\": \"5.0\",\n    \"test_aspect\": \"Functional Execution Correctness - Check length calculation for line segment.\"\n  },\n  \"test_case4\": {\n    \"input\": \"Line(EuclideanPoint(-1, -1), EuclideanPoint(1, 1)).length()\",\n    \"expected_output\": \"2.8284271247461903\",\n    \"test_aspect\": \"Functional Execution Correctness - Check length calculation for line segment with negative coordinates.\"\n  },\n  \"test_case5\": {\n    \"input\": \"rand(5, (0, 10), (0, 10))\",\n    \"expected_output\": \"A list of 5 EuclideanPoint objects with coordinates in range 0-10\",\n    \"test_aspect\": \"Functional Module Coverage - Verify random point generation within specified range.\"\n  },\n  \"test_case6\": {\n    \"input\": \"rand(0, (0, 10), (0, 10))\",\n    \"expected_output\": \"[]\",\n    \"test_aspect\": \"Boundary Case - Check behavior when generating zero points.\"\n  },\n  \"test_case7\": {\n    \"input\": \"rand(5, (0, 0), (0, 0))\",\n    \"expected_output\": \"A list of 5 EuclideanPoint objects with coordinates (0,0)\",\n    \"test_aspect\": \"Boundary Case - Check behavior when range is zero for both axes.\"\n  },\n  \"test_case8\": {\n    \"input\": \"EuclideanPoint(3, 4).distance_to(EuclideanPoint(3, 4))\",\n    \"expected_output\": \"0.0\",\n    \"test_aspect\": \"Functional Execution Correctness - Testing distance for identical points.\"\n  },\n  \"test_case9\": {\n    \"input\": \"Line(EuclideanPoint(1, 1), EuclideanPoint(1, 1)).length()\",\n    \"expected_output\": \"0.0\",\n    \"test_aspect\": \"Boundary Case - Length of a line segment with identical start and end points.\"\n  },\n  \"test_case10\": {\n    \"input\": \"Line(EuclideanPoint(0, 0), EuclideanPoint(-3, -4)).length()\",\n    \"expected_output\": \"5.0\",\n    \"test_aspect\": \"Functional Execution Correctness - Check length calculation for line segment with negative coordinates.\"\n  }\n}\n```"}
{"index": 21834, "preference": "functionality", "prompt": "You are tasked with implementing a function that takes in a sequence of numbers and returns the sum of all the even numbers in the sequence. If the input sequence is empty or contains no even numbers, the function should return 0.\n\nThe function signature is:\n```python\ndef sum_of_even_numbers(numbers: Sequence[Union[int, float]]) -> int:\n    pass\n```\n\nFor example, given the input sequence `[1, 2, 3, 4, 5, 6]`, the function should return `12` (the sum of 2, 4, and 6).", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Empty input sequence should return 0.\"\n  },\n  \"test_case2\": {\n    \"input\": [1, 3, 5],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Input with no even numbers should return 0.\"\n  },\n  \"test_case3\": {\n    \"input\": [2, 4, 6],\n    \"expected_output\": 12,\n    \"test_aspect\": \"Input with only even numbers should return their sum.\"\n  },\n  \"test_case4\": {\n    \"input\": [1, 2, 3, 4, 5, 6],\n    \"expected_output\": 12,\n    \"test_aspect\": \"Mixed input of even and odd numbers should return the sum of even numbers (2 + 4 + 6).\"\n  },\n  \"test_case5\": {\n    \"input\": [0],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Single even number zero should return its value.\"\n  },\n  \"test_case6\": {\n    \"input\": [-2, -4, -6],\n    \"expected_output\": -12,\n    \"test_aspect\": \"Input with negative even numbers should return their sum.\"\n  },\n  \"test_case7\": {\n    \"input\": [-1, -3, -2, -4, -5, -6],\n    \"expected_output\": -12,\n    \"test_aspect\": \"Mixed input with negative numbers should correctly sum the negative even numbers.\"\n  },\n  \"test_case8\": {\n    \"input\": [1.5, 2.0, 3.5, 4.0],\n    \"expected_output\": 6,\n    \"test_aspect\": \"Input with float numbers should sum even integers (2.0 and 4.0).\"\n  },\n  \"test_case9\": {\n    \"input\": [1, 2, 3, 4, 5, 6, 8.0],\n    \"expected_output\": 20,\n    \"test_aspect\": \"Input with a mix of integers and floats should accurately sum up the even numbers (2 + 4 + 6 + 8).\"\n  },\n  \"test_case10\": {\n    \"input\": [1, 3, 5, 7, 9],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Input with all odd numbers should return 0.\"\n  }\n}\n```"}
{"index": 30681, "preference": "functionality", "prompt": "You are tasked with implementing a function to calculate the precision at k for a recommendation system. The function takes in predicted ratings, true ratings, and item prices, and returns the precision at the top k recommendations.\n\nYou are given the following code snippet as a starting point:\n\n```python\ndef money_precision_at_k(y_pred: pd.Series, y_true: pd.Series, item_price, k=5):\n    y_pred = y_pred.swifter.progress_bar(False).apply(pd.Series)\n    user_filter = ~(y_true.swifter.progress_bar(False).apply(len) < k)\n\n    y_pred = y_pred.loc[user_filter]\n    y_true = y_true.loc[user_filter]\n```\n\nYour task is to complete the `money_precision_at_k` function and ensure it correctly calculates the precision at k for the recommendation system. The precision at k is defined as the proportion of recommended items that are relevant to the user out of the top k recommendations.\n\nFor example, if the top k recommendations are [item1, item2, item3, item4, item5], and the user has interacted with items [item2, item3, item5], then the precision at k=5 would be 3/5.\n\nYour function should handle cases where the number of recommendations for a user is less than k, and it should consider the item prices in the precision calculation.\n\nAssume that `y_pred` is a pandas Series containing the predicted ratings for items, `y_true` is a pandas Series containing the true ratings for items, and `item_price` is a dictionary mapping item names to their prices.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"y_pred\": [5, 4, 3, 2, 1],\n      \"y_true\": [0, 1, 1, 0, 1],\n      \"item_price\": {\"item1\": 10, \"item2\": 15, \"item3\": 5, \"item4\": 20, \"item5\": 25},\n      \"k\": 5\n    },\n    \"expected_output\": 0.6,\n    \"test_aspect\": \"Basic functionality with all items relevant\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"y_pred\": [4, 5, 2, 1, 3],\n      \"y_true\": [1, 0, 0, 0, 1],\n      \"item_price\": {\"item1\": 10, \"item2\": 5, \"item3\": 15, \"item4\": 20, \"item5\": 25},\n      \"k\": 3\n    },\n    \"expected_output\": 0.3333,\n    \"test_aspect\": \"Precision calculation with less relevant items\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"y_pred\": [3, 2, 1],\n      \"y_true\": [1, 1, 1],\n      \"item_price\": {\"item1\": 10, \"item2\": 15, \"item3\": 5},\n      \"k\": 3\n    },\n    \"expected_output\": 1.0,\n    \"test_aspect\": \"All recommended items are relevant\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"y_pred\": [1],\n      \"y_true\": [1],\n      \"item_price\": {\"item1\": 10},\n      \"k\": 2\n    },\n    \"expected_output\": 1.0,\n    \"test_aspect\": \"Single recommendation with one relevant item\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"y_pred\": [],\n      \"y_true\": [],\n      \"item_price\": {},\n      \"k\": 5\n    },\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"No items predicted or true ratings\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"y_pred\": [2, 1],\n      \"y_true\": [0],\n      \"item_price\": {\"item1\": 10, \"item2\": 20},\n      \"k\": 2\n    },\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"Less true ratings than k\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"y_pred\": [4, 3],\n      \"y_true\": [1, 1],\n      \"item_price\": {\"item1\": 30, \"item2\": 25},\n      \"k\": 2\n    },\n    \"expected_output\": 1.0,\n    \"test_aspect\": \"All predicted items relevant with k = 2\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"y_pred\": [1, 5, 3],\n      \"y_true\": [0, 0, 0],\n      \"item_price\": {\"item1\": 10, \"item2\": 30, \"item3\": 50},\n      \"k\": 3\n    },\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"No relevant items at all\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"y_pred\": [4, 5, 1, 3],\n      \"y_true\": [1, 1, 0, 0],\n      \"item_price\": {\"item1\": 10, \"item2\": 20, \"item3\": 15, \"item4\": 5},\n      \"k\": 4\n    },\n    \"expected_output\": 0.5,\n    \"test_aspect\": \"Mixed relevance with k = 4\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"y_pred\": [5, 4, 3, 2],\n      \"y_true\": [1, 1, 1, 0],\n      \"item_price\": {\"item1\": 10, \"item2\": 20, \"item3\": 15, \"item4\": 25},\n      \"k\": 4\n    },\n    \"expected_output\": 0.75,\n    \"test_aspect\": \"Calculating precision with some irrelevant items\"\n  }\n}\n```"}
{"index": 36984, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that makes an asynchronous HTTP GET request using the `aiohttp` library. The function should have the following signature:\n\n```python\nasync def get(url: str, proxy: Optional[str] = None, headers: Optional[Dict[str, str]] = None, byte: Optional[bytes] = None, timeout: int = 15) -> Union[bytes, None]:\n    pass\n```\n\nThe function should make an asynchronous GET request to the specified `url` with optional `proxy`, `headers`, and `byte` parameters. It should return the response content as bytes if the request is successful within the specified `timeout`, or `None` if the request times out.\n\nYou should assume that the `aiohttp` library is already installed and can be imported using `import aiohttp`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"url\": \"http://example.com\",\n      \"proxy\": null,\n      \"headers\": null,\n      \"byte\": null,\n      \"timeout\": 15\n    },\n    \"expected_output\": \"response_content_bytes\",\n    \"test_aspect\": \"Basic functionality - successful request without proxy or headers\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"url\": \"http://example.com\",\n      \"proxy\": \"http://proxy.com:8080\",\n      \"headers\": null,\n      \"byte\": null,\n      \"timeout\": 15\n    },\n    \"expected_output\": \"response_content_bytes\",\n    \"test_aspect\": \"Functionality with proxy - successful request\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"url\": \"http://example.com\",\n      \"proxy\": null,\n      \"headers\": {\n        \"Authorization\": \"Bearer token\"\n      },\n      \"byte\": null,\n      \"timeout\": 15\n    },\n    \"expected_output\": \"response_content_bytes\",\n    \"test_aspect\": \"Functionality with headers - successful request\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"url\": \"http://example.com\",\n      \"proxy\": null,\n      \"headers\": null,\n      \"byte\": \"some_binary_data\",\n      \"timeout\": 15\n    },\n    \"expected_output\": \"response_content_bytes\",\n    \"test_aspect\": \"Functionality with byte data - successful request\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"url\": \"http://example.com\",\n      \"proxy\": null,\n      \"headers\": null,\n      \"byte\": null,\n      \"timeout\": 1\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Timeout handling - request times out\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"url\": \"http://nonexistenturl.xyz\",\n      \"proxy\": null,\n      \"headers\": null,\n      \"byte\": null,\n      \"timeout\": 15\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Error handling - invalid URL\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"url\": \"http://example.com\",\n      \"proxy\": null,\n      \"headers\": null,\n      \"byte\": null,\n      \"timeout\": 0\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Boundary case - zero timeout\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"url\": \"http://example.com\",\n      \"proxy\": null,\n      \"headers\": null,\n      \"byte\": null,\n      \"timeout\": -1\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Boundary case - negative timeout\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"url\": \"http://example.com\",\n      \"proxy\": null,\n      \"headers\": {},\n      \"byte\": null,\n      \"timeout\": 15\n    },\n    \"expected_output\": \"response_content_bytes\",\n    \"test_aspect\": \"Functionality with empty headers - successful request\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"url\": \"\",\n      \"proxy\": null,\n      \"headers\": null,\n      \"byte\": null,\n      \"timeout\": 15\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Error handling - empty URL\"\n  }\n}\n```"}
{"index": 7147, "preference": "functionality", "prompt": "You are tasked with creating a Python class that interacts with a SQL Server database using the `muttlib.dbconn.SqlServerClient` module. Your class should provide methods to perform basic CRUD (Create, Read, Update, Delete) operations on a specific table in the database. The table schema consists of three columns: `id` (integer, primary key), `name` (string), and `age` (integer).\n\nYour class should have the following methods:\n1. `__init__(self, server, database, username, password)`: Constructor method that initializes the SQL Server client with the provided server, database, username, and password.\n2. `create_record(self, name, age)`: Method to create a new record in the table with the given name and age. The `id` should be automatically generated by the database.\n3. `read_record(self, record_id)`: Method to retrieve the record with the specified `id` from the table and return it as a dictionary.\n4. `update_record(self, record_id, name, age)`: Method to update the name and age of the record with the specified `id`.\n5. `delete_record(self, record_id)`: Method to delete the record with the specified `id` from the table.\n\nYou should handle any potential exceptions that may occur during database interactions and provide appropriate error messages.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"server\": \"localhost\",\n      \"database\": \"test_db\",\n      \"username\": \"user\",\n      \"password\": \"pass\"\n    },\n    \"expected_output\": \"Database connection established successfully.\",\n    \"test_aspect\": \"Verify that the database connection is established correctly using provided credentials.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"name\": \"Alice\",\n      \"age\": 30\n    },\n    \"expected_output\": {\n      \"id\": \"auto_generated_id\",\n      \"name\": \"Alice\",\n      \"age\": 30\n    },\n    \"test_aspect\": \"Test the creation of a new record with valid name and age.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"record_id\": 1\n    },\n    \"expected_output\": {\n      \"id\": 1,\n      \"name\": \"Alice\",\n      \"age\": 30\n    },\n    \"test_aspect\": \"Test reading a record that exists in the table.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"record_id\": 1,\n      \"name\": \"Alice Updated\",\n      \"age\": 31\n    },\n    \"expected_output\": {\n      \"id\": 1,\n      \"name\": \"Alice Updated\",\n      \"age\": 31\n    },\n    \"test_aspect\": \"Test updating an existing record and verify updated content.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"record_id\": 9999\n    },\n    \"expected_output\": \"Record not found.\",\n    \"test_aspect\": \"Test reading a record that does not exist to ensure appropriate error handling.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"record_id\": 1\n    },\n    \"expected_output\": \"Record deleted successfully.\",\n    \"test_aspect\": \"Test deleting an existing record and ensure successful deletion.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"record_id\": 9999\n    },\n    \"expected_output\": \"Record not found.\",\n    \"test_aspect\": \"Test deleting a record that does not exist to ensure appropriate error handling.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"name\": \"\",\n      \"age\": 25\n    },\n    \"expected_output\": \"Name cannot be empty.\",\n    \"test_aspect\": \"Test creating a record with an empty name to validate input constraints.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"name\": \"Bob\",\n      \"age\": -5\n    },\n    \"expected_output\": \"Age must be a positive integer.\",\n    \"test_aspect\": \"Test creating a record with invalid age to validate input constraints.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"record_id\": 1,\n      \"name\": \"Charlie\",\n      \"age\": 28\n    },\n    \"expected_output\": {\n      \"id\": 1,\n      \"name\": \"Charlie\",\n      \"age\": 28\n    },\n    \"test_aspect\": \"Test updating a record to ensure that the changes are reflected correctly.\"\n  }\n}\n```"}
{"index": 12419, "preference": "functionality", "prompt": "You are tasked with implementing a Python class that simulates a packet encoder. The class should have a method `encode_packet` that takes a `Packet` object as input and returns the encoded format of the packet. The `Packet` class has a property `wire_format` that holds the wire format of the packet. If the `wire_format` is not `None`, the `encode_packet` method should return the encoded format. If the `wire_format` is `None`, the method should return `None`.\n\nYou need to implement the `PacketEncoder` class with the following method:\n- `encode_packet(packet: Packet) -> Optional[bytes]`: This method takes a `Packet` object as input and returns the encoded format of the packet if `wire_format` is not `None`, otherwise it returns `None`.\n\nUse the following code snippet as a starting point for your implementation:\n```python\nfrom typing import Optional\n\nclass Packet:\n    def __init__(self, wire_format: Optional[bytes]):\n        self.wire_format = wire_format\n\nclass PacketEncoder:\n    def encode_packet(self, packet: Packet) -> Optional[bytes]:\n        # Your implementation here\n        pass\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Packet(wire_format=b'example wire format')\",\n    \"expected_output\": \"b'example wire format'\",\n    \"test_aspect\": \"Valid wire format provided\"\n  },\n  \"test_case2\": {\n    \"input\": \"Packet(wire_format=b'')\",\n    \"expected_output\": \"b''\",\n    \"test_aspect\": \"Empty wire format provided\"\n  },\n  \"test_case3\": {\n    \"input\": \"Packet(wire_format=None)\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"No wire format provided\"\n  },\n  \"test_case4\": {\n    \"input\": \"Packet(wire_format=b'1234567890')\",\n    \"expected_output\": \"b'1234567890'\",\n    \"test_aspect\": \"Numeric wire format provided\"\n  },\n  \"test_case5\": {\n    \"input\": \"Packet(wire_format=b'\\\\x00\\\\x01\\\\x02')\",\n    \"expected_output\": \"b'\\\\x00\\\\x01\\\\x02'\",\n    \"test_aspect\": \"Binary wire format provided\"\n  },\n  \"test_case6\": {\n    \"input\": \"Packet(wire_format=b'test\\\\x00test')\",\n    \"expected_output\": \"b'test\\\\x00test'\",\n    \"test_aspect\": \"Wire format with null byte included\"\n  },\n  \"test_case7\": {\n    \"input\": \"Packet(wire_format=b'longer wire format with multiple characters')\",\n    \"expected_output\": \"b'longer wire format with multiple characters'\",\n    \"test_aspect\": \"Long wire format provided\"\n  },\n  \"test_case8\": {\n    \"input\": \"Packet(wire_format=b'!@#$%^&*()_+')\",\n    \"expected_output\": \"b'!@#$%^&*()_+'\",\n    \"test_aspect\": \"Wire format with special characters\"\n  },\n  \"test_case9\": {\n    \"input\": \"Packet(wire_format=b'\\\\xff\\\\xfe\\\\xfd')\",\n    \"expected_output\": \"b'\\\\xff\\\\xfe\\\\xfd'\",\n    \"test_aspect\": \"Wire format with high byte values\"\n  },\n  \"test_case10\": {\n    \"input\": \"Packet(wire_format=b'valid')\",\n    \"expected_output\": \"b'valid'\",\n    \"test_aspect\": \"Valid short string wire format\"\n  }\n}\n```"}
{"index": 6752, "preference": "functionality", "prompt": "You are tasked with creating a Python unit test for a DNS authentication module. The module is responsible for performing DNS challenges for domain verification in an automated certificate management environment. The code snippet provided is a part of the unit test suite for this module.\n\nYour task is to complete the unit test by replacing the placeholder `<PASSWORD>` with the actual password value. The unit test is designed to verify that the authentication module correctly writes the corenetworks username and password to a configuration file and performs the necessary DNS challenge by adding a TXT record for domain verification.\n\nReplace `<PASSWORD>` with the correct password value and ensure that the unit test passes without any assertion errors.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"correct_password\",\n      \"domain\": \"example.com\"\n    },\n    \"expected_output\": \"TXT record added for domain example.com\",\n    \"test_aspect\": \"Valid authentication with correct credentials should successfully add a TXT record.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"wrong_password\",\n      \"domain\": \"example.com\"\n    },\n    \"expected_output\": \"Authentication failed\",\n    \"test_aspect\": \"Invalid authentication with incorrect password should not allow adding a TXT record.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"\",\n      \"domain\": \"example.com\"\n    },\n    \"expected_output\": \"Authentication failed\",\n    \"test_aspect\": \"Empty password should prevent authentication and adding a TXT record.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"username\": \"\",\n      \"password\": \"correct_password\",\n      \"domain\": \"example.com\"\n    },\n    \"expected_output\": \"Authentication failed\",\n    \"test_aspect\": \"Empty username should prevent authentication and adding a TXT record.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"correct_password\",\n      \"domain\": \"\"\n    },\n    \"expected_output\": \"Domain name is required\",\n    \"test_aspect\": \"Empty domain name should trigger validation error before attempting to add a TXT record.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"correct_password\",\n      \"domain\": \"invalid_domain\"\n    },\n    \"expected_output\": \"Invalid domain format\",\n    \"test_aspect\": \"Providing an invalid domain format should trigger validation error.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"correct_password\",\n      \"domain\": \"valid-domain.com\"\n    },\n    \"expected_output\": \"TXT record added for domain valid-domain.com\",\n    \"test_aspect\": \"Valid authentication and valid domain should successfully add a TXT record.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"correct_password\",\n      \"domain\": \"example.com\",\n      \"existing_record\": true\n    },\n    \"expected_output\": \"TXT record already exists for domain example.com\",\n    \"test_aspect\": \"Attempting to add a TXT record when one already exists should return a specific message.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"correct_password\",\n      \"domain\": \"test.com\"\n    },\n    \"expected_output\": \"TXT record added for domain test.com\",\n    \"test_aspect\": \"Successful addition of TXT record for a different valid domain.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"username\": \"corenetworks_user\",\n      \"password\": \"correct_password\",\n      \"domain\": \"example.com\",\n      \"record_type\": \"CNAME\"\n    },\n    \"expected_output\": \"Only TXT records are supported for domain verification\",\n    \"test_aspect\": \"The module should reject attempts to add non-TXT records.\"\n  }\n}\n```"}
{"index": 18055, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes a pandas DataFrame to update a specified column containing date or time data. Your function should take the column name and any additional keyword arguments that can be passed to the `pd.to_datetime` function. The function should then return the modified DataFrame with the updated datetime data.\n\nWrite a function `update_datetime_column` with the following signature:\n```python\ndef update_datetime_column(df: pd.DataFrame, column_name: str, **kwargs) -> pd.DataFrame:\n    pass\n```\n\nThe function should perform the following steps:\n1. Convert the data in the specified column of the input DataFrame `df` to datetime using `pd.to_datetime`.\n2. Apply any additional keyword arguments provided in `kwargs` to the `pd.to_datetime` function.\n3. Update the specified column in the DataFrame with the converted datetime data.\n4. Return the modified DataFrame.\n\nFor example, given the input DataFrame `df`:\n```\n   ID        Date\n0   1  2022-01-01\n1   2  2022-02-01\n2   3  2022-03-01\n```\nand calling the function `update_datetime_column(df, 'Date', format='%Y-%m-%d')`, the function should return a DataFrame with the 'Date' column converted to datetime:\n```\n   ID       Date\n0   1 2022-01-01\n1   2 2022-02-01\n2   3 2022-03-01\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1, 2, 3],\n        \"Date\": [\"2022-01-01\", \"2022-02-01\", \"2022-03-01\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {\n        \"format\": \"%Y-%m-%d\"\n      }\n    },\n    \"expected_output\": {\n      \"ID\": [1, 2, 3],\n      \"Date\": [\"2022-01-01\", \"2022-02-01\", \"2022-03-01\"]\n    },\n    \"test_aspect\": \"Standard conversion with specified format\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1, 2],\n        \"Date\": [\"01/01/2022\", \"01/02/2022\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {\n        \"format\": \"%m/%d/%Y\"\n      }\n    },\n    \"expected_output\": {\n      \"ID\": [1, 2],\n      \"Date\": [\"2022-01-01\", \"2022-02-01\"]\n    },\n    \"test_aspect\": \"Conversion with different date format\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1, 2, 3],\n        \"Date\": [\"2022-01-01\", None, \"2022-03-01\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {}\n    },\n    \"expected_output\": {\n      \"ID\": [1, 2, 3],\n      \"Date\": [\"2022-01-01\", null, \"2022-03-01\"]\n    },\n    \"test_aspect\": \"Handling of None values in the date column\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1, 2],\n        \"Date\": [\"2022-01-01 12:00:00\", \"2022-02-01 13:30:00\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {}\n    },\n    \"expected_output\": {\n      \"ID\": [1, 2],\n      \"Date\": [\"2022-01-01 12:00:00\", \"2022-02-01 13:30:00\"]\n    },\n    \"test_aspect\": \"Conversion of datetime strings with time\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1],\n        \"Date\": [\"2022-15-01\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {}\n    },\n    \"expected_output\": {\n      \"ID\": [1],\n      \"Date\": [\"2022-01-15\"]\n    },\n    \"test_aspect\": \"Handling of ambiguous date formats\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1, 2],\n        \"Date\": [\"2022-01-01\", \"2022-02-01\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {\n        \"errors\": \"coerce\"\n      }\n    },\n    \"expected_output\": {\n      \"ID\": [1, 2],\n      \"Date\": [\"2022-01-01\", \"2022-02-01\"]\n    },\n    \"test_aspect\": \"Error handling with coercion\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1],\n        \"Date\": [\"invalid_date\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {\n        \"errors\": \"raise\"\n      }\n    },\n    \"expected_output\": \"ValueError\",\n    \"test_aspect\": \"Error handling with raise on invalid date\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1, 2, 3],\n        \"Date\": []\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {}\n    },\n    \"expected_output\": {\n      \"ID\": [1, 2, 3],\n      \"Date\": []\n    },\n    \"test_aspect\": \"Handling of empty date column\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1, 2, 3],\n        \"Date\": [\"2022-01-01\", \"2022-01-02\", \"2022-01-03\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {\n        \"utc\": true\n      }\n    },\n    \"expected_output\": {\n      \"ID\": [1, 2, 3],\n      \"Date\": [\"2022-01-01T00:00:00Z\", \"2022-01-02T00:00:00Z\", \"2022-01-03T00:00:00Z\"]\n    },\n    \"test_aspect\": \"Handling of UTC conversion\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"df\": {\n        \"ID\": [1],\n        \"Date\": [\"2022-12-31\", \"2023-01-01\"]\n      },\n      \"column_name\": \"Date\",\n      \"kwargs\": {\n        \"format\": \"%Y-%m-%d\"\n      }\n    },\n    \"expected_output\": {\n      \"ID\": [1],\n      \"Date\": [\"2022-12-31\", \"2023-01-01\"]\n    },\n    \"test_aspect\": \"Handling multiple valid dates in a single row\"\n  }\n}\n```"}
{"index": 16508, "preference": "functionality", "prompt": "You are tasked with creating a sentiment analysis service using Amazon Comprehend, a natural language processing (NLP) service provided by AWS. Your goal is to implement a Python function that utilizes the Amazon Comprehend API to analyze the sentiment of a given text and return the prevailing sentiment (positive, neutral, mixed, or negative).\n\nYou are provided with the following code snippet as a starting point:\n\n```python\nimport boto3\n\ndef get_sentiment(text, language_code='en'):\n    \"\"\"Get sentiment.\n\n    Inspects text and returns an inference of the prevailing sentiment\n    (positive, neutral, mixed, or negative).\n    \"\"\"\n```\n\nYour task is to complete the `get_sentiment` function by integrating it with the Amazon Comprehend API. The function should take the `text` to be analyzed and an optional `language_code` parameter (defaulted to 'en' for English) and return the prevailing sentiment as a string.\n\nYour solution should make use of the `boto3` library to interact with the Amazon Comprehend service. You will need to handle the necessary authentication and authorization to access the service.\n\nWrite the complete `get_sentiment` function that fulfills the requirements and integrates with the Amazon Comprehend API to perform sentiment analysis.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"\",\n    \"expected_output\": \"neutral\",\n    \"test_aspect\": \"Empty input should return neutral sentiment\"\n  },\n  \"test_case2\": {\n    \"input\": \"I love this product!\",\n    \"expected_output\": \"positive\",\n    \"test_aspect\": \"Positive sentiment analysis for a clearly positive statement\"\n  },\n  \"test_case3\": {\n    \"input\": \"This is the worst experience I have ever had.\",\n    \"expected_output\": \"negative\",\n    \"test_aspect\": \"Negative sentiment analysis for a clearly negative statement\"\n  },\n  \"test_case4\": {\n    \"input\": \"The movie was okay, neither good nor bad.\",\n    \"expected_output\": \"neutral\",\n    \"test_aspect\": \"Neutral sentiment for a statement with mixed feelings\"\n  },\n  \"test_case5\": {\n    \"input\": \"I am excited about the new features but also worried about bugs.\",\n    \"expected_output\": \"mixed\",\n    \"test_aspect\": \"Mixed sentiment analysis where both positive and negative emotions are expressed\"\n  },\n  \"test_case6\": {\n    \"input\": \"I'm not sure how I feel about this.\",\n    \"expected_output\": \"neutral\",\n    \"test_aspect\": \"Neutral sentiment for an ambiguous statement\"\n  },\n  \"test_case7\": {\n    \"input\": \"What a fantastic service! Highly recommend it to everyone.\",\n    \"expected_output\": \"positive\",\n    \"test_aspect\": \"Positive sentiment for an enthusiastic recommendation\"\n  },\n  \"test_case8\": {\n    \"input\": \"This is terrible, I hate it.\",\n    \"expected_output\": \"negative\",\n    \"test_aspect\": \"Negative sentiment for a strong negative expression\"\n  },\n  \"test_case9\": {\n    \"input\": \"It's just fine, I guess.\",\n    \"expected_output\": \"neutral\",\n    \"test_aspect\": \"Neutral sentiment for an uncertain or indifferent statement\"\n  },\n  \"test_case10\": {\n    \"input\": \"I loved the first half, but the second half was disappointing.\",\n    \"expected_output\": \"mixed\",\n    \"test_aspect\": \"Mixed sentiment for a statement with contrasting opinions\"\n  }\n}\n```"}
{"index": 34947, "preference": "functionality", "prompt": "You are tasked with implementing a configuration management system for a software application. The `compute_config` method needs to be designed to generate the configuration settings based on various input parameters. The configuration settings will be used to control the behavior of the application. The method should take into account different scenarios and produce the appropriate configuration based on the input.\n\nThe `compute_config` method should accept the following input parameters:\n- `environment`: A string indicating the environment for which the configuration is being generated (e.g., \"development\", \"testing\", \"production\").\n- `debug_mode`: A boolean indicating whether the application should run in debug mode.\n- `database_url`: A string representing the URL of the database to be used by the application.\n- `cache_enabled`: A boolean indicating whether caching should be enabled.\n\nThe method should produce a dictionary containing the configuration settings based on the input parameters. The configuration settings should include the following:\n- `environment`: The input `environment` parameter value.\n- `debug_mode`: The input `debug_mode` parameter value.\n- `database_url`: The input `database_url` parameter value.\n- `cache_enabled`: The input `cache_enabled` parameter value.\n\nAdditionally, the method should include the following logic:\n- If the `environment` is \"development\", the `debug_mode` should always be set to `True`.\n- If the `environment` is \"production\", the `cache_enabled` should always be set to `True`.\n\nYou are required to implement the `compute_config` method to fulfill the above requirements and produce the appropriate configuration settings based on the input parameters.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"environment\": \"development\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/devdb\",\n      \"cache_enabled\": false\n    },\n    \"expected_output\": {\n      \"environment\": \"development\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/devdb\",\n      \"cache_enabled\": false\n    },\n    \"test_aspect\": \"Tests that debug_mode is set to True in development regardless of input.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"environment\": \"testing\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/testdb\",\n      \"cache_enabled\": true\n    },\n    \"expected_output\": {\n      \"environment\": \"testing\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/testdb\",\n      \"cache_enabled\": true\n    },\n    \"test_aspect\": \"Tests that all inputs are retained correctly when environment is testing.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"environment\": \"production\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/proddb\",\n      \"cache_enabled\": false\n    },\n    \"expected_output\": {\n      \"environment\": \"production\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/proddb\",\n      \"cache_enabled\": true\n    },\n    \"test_aspect\": \"Tests that cache_enabled is set to True in production regardless of input.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"environment\": \"production\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/proddb\",\n      \"cache_enabled\": true\n    },\n    \"expected_output\": {\n      \"environment\": \"production\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/proddb\",\n      \"cache_enabled\": true\n    },\n    \"test_aspect\": \"Tests that inputs are retained correctly in production when cache_enabled is true.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"environment\": \"development\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/devdb\",\n      \"cache_enabled\": true\n    },\n    \"expected_output\": {\n      \"environment\": \"development\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/devdb\",\n      \"cache_enabled\": true\n    },\n    \"test_aspect\": \"Tests that debug_mode is true while retaining cache_enabled input in development.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"environment\": \"testing\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/testdb\",\n      \"cache_enabled\": false\n    },\n    \"expected_output\": {\n      \"environment\": \"testing\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/testdb\",\n      \"cache_enabled\": false\n    },\n    \"test_aspect\": \"Tests that inputs are retained correctly with debug_mode and cache_enabled both false.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"environment\": \"development\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/devdb\",\n      \"cache_enabled\": false\n    },\n    \"expected_output\": {\n      \"environment\": \"development\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/devdb\",\n      \"cache_enabled\": false\n    },\n    \"test_aspect\": \"Tests that debug_mode remains true when set explicitly in development.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"environment\": \"production\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/proddb\",\n      \"cache_enabled\": false\n    },\n    \"expected_output\": {\n      \"environment\": \"production\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/proddb\",\n      \"cache_enabled\": true\n    },\n    \"test_aspect\": \"Tests that cache_enabled is forced to true in production even when input is false.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"environment\": \"testing\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/testdb\",\n      \"cache_enabled\": true\n    },\n    \"expected_output\": {\n      \"environment\": \"testing\",\n      \"debug_mode\": false,\n      \"database_url\": \"http://localhost:5432/testdb\",\n      \"cache_enabled\": true\n    },\n    \"test_aspect\": \"Tests that inputs are retained correctly in testing when cache_enabled is true.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"environment\": \"development\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/devdb\",\n      \"cache_enabled\": false\n    },\n    \"expected_output\": {\n      \"environment\": \"development\",\n      \"debug_mode\": true,\n      \"database_url\": \"http://localhost:5432/devdb\",\n      \"cache_enabled\": false\n    },\n    \"test_aspect\": \"Tests that debug_mode remains true when set in development.\"\n  }\n}\n```"}
{"index": 12, "preference": "functionality", "prompt": "You are tasked with implementing a custom comparison function for a specific data structure. The data structure is a class representing a geometric point in 2D space, with x and y coordinates. The comparison function should compare two points based on their distance from the origin (0, 0). The comparison function should return true if the distance of the first point is less than the distance of the second point from the origin. If the distances are equal, the function should return true if the x-coordinate of the first point is less than the x-coordinate of the second point.\n\nYou are provided with a partial code snippet that includes the class definition for the 2D point and the beginning of the comparison function. Your task is to complete the comparison function and ensure that it correctly compares the points based on the specified criteria.\n\n```cpp\n#include <iostream>\n#include <cmath>\n\nclass Point2D {\npublic:\n    int x;\n    int y;\n\n    Point2D(int x, int y) : x(x), y(y) {}\n};\n\nbool comparePoints(const Point2D& p1, const Point2D& p2) {\n    // Your implementation for comparison function goes here\n}\n\nint main() {\n    Point2D p1(3, 4);\n    Point2D p2(5, 2);\n\n    std::cout << \"Comparison result: \" << comparePoints(p1, p2) << std::endl;\n\n    return 0;\n}\n```", "test_cases": "{\n  \"test_case1\": {\n    \"input\": {\n      \"p1\": {\"x\": 3, \"y\": 4},\n      \"p2\": {\"x\": 5, \"y\": 2}\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"p1 is closer to origin than p2, as distance for p1 is 5 and for p2 is 29.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"p1\": {\"x\": 0, \"y\": 0},\n      \"p2\": {\"x\": 1, \"y\": 1}\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"p1 is the origin and should always be less than any other point.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"p1\": {\"x\": 1, \"y\": 1},\n      \"p2\": {\"x\": 1, \"y\": 1}\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Both points have the same distance and coordinates; should return false.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"p1\": {\"x\": 0, \"y\": 5},\n      \"p2\": {\"x\": 3, \"y\": 4}\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Both points have the same distance (5), but p1's x is not less than p2's x.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"p1\": {\"x\": 3, \"y\": 4},\n      \"p2\": {\"x\": 3, \"y\": 5}\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Both points have the same distance (5), p1's x = 3 is equal to p2's x = 3, but y of p1 < y of p2 does not matter.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"p1\": {\"x\": 1, \"y\": 2},\n      \"p2\": {\"x\": 2, \"y\": 1}\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Both points have the same distance (√5), p1's x is less than p2's x but y's are swapped.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"p1\": {\"x\": -3, \"y\": -4},\n      \"p2\": {\"x\": 5, \"y\": 2}\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"p1 has a distance of 5, and p2 has a distance of 29, p1 is less.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"p1\": {\"x\": -1, \"y\": -1},\n      \"p2\": {\"x\": 1, \"y\": 1}\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Both points have the same distance (√2), p1's x is not less than p2's x.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"p1\": {\"x\": 1, \"y\": 1},\n      \"p2\": {\"x\": 0, \"y\": 0}\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"p1 is farther than p2; should return false.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"p1\": {\"x\": 1, \"y\": -1},\n      \"p2\": {\"x\": -1, \"y\": 1}\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Both points have the same distance (√2), but p1's x is greater than p2's x (1 > -1).\"\n  }\n}"}
{"index": 1353, "preference": "functionality", "prompt": "You are tasked with creating a program that analyzes a given text file to count the occurrences of specific phrases. The phrases to be counted are provided in a separate input file. Your program should read the input text file and the list of phrases, then output the count of each phrase found in the text file.\n\nYou are given the following information:\n- The input text file contains the text of a software license agreement.\n- The input phrases file contains a list of phrases to be counted, with each phrase on a separate line.\n\nYour program should:\n1. Read the input text file and the input phrases file.\n2. For each phrase in the input phrases file, count the number of occurrences of that phrase in the text file.\n3. Output the count of each phrase found in the text file.\n\nExample:\nInput text file (license.txt):\n```\n * are met:\n *\n * - Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the\n * distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n```\n\nInput phrases file (phrases.txt):\n```\nRedistributions\nsource code\ndisclaimer\n```\n\nOutput:\n```\nRedistributions: 2\nsource code: 1\ndisclaimer: 2\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"text_file\": \"license.txt\",\n      \"phrases_file\": \"phrases.txt\"\n    },\n    \"expected_output\": {\n      \"Redistributions\": 2,\n      \"source code\": 1,\n      \"disclaimer\": 2\n    },\n    \"test_aspect\": \"Basic functionality with standard input files.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"text_file\": \"empty_license.txt\",\n      \"phrases_file\": \"phrases.txt\"\n    },\n    \"expected_output\": {\n      \"Redistributions\": 0,\n      \"source code\": 0,\n      \"disclaimer\": 0\n    },\n    \"test_aspect\": \"Handling of empty text file.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"text_file\": \"license.txt\",\n      \"phrases_file\": \"empty_phrases.txt\"\n    },\n    \"expected_output\": {},\n    \"test_aspect\": \"Handling of empty phrases file.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"text_file\": \"license.txt\",\n      \"phrases_file\": \"nonexistent_phrases.txt\"\n    },\n    \"expected_output\": {\n      \"Some random phrase\": 0,\n      \"Another phrase\": 0\n    },\n    \"test_aspect\": \"Phrases not found in the text file.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"text_file\": \"license.txt\",\n      \"phrases_file\": \"phrases_with_special_chars.txt\"\n    },\n    \"expected_output\": {\n      \"Redistributions!\": 0,\n      \"source-code\": 0,\n      \"disclaimer?\": 0\n    },\n    \"test_aspect\": \"Handling of phrases with special characters.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"text_file\": \"license_with_case_variants.txt\",\n      \"phrases_file\": \"case_sensitive_phrases.txt\"\n    },\n    \"expected_output\": {\n      \"redistributions\": 1,\n      \"Source Code\": 1,\n      \"Disclaimer\": 2\n    },\n    \"test_aspect\": \"Case sensitivity of phrases.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"text_file\": \"license.txt\",\n      \"phrases_file\": \"long_phrases.txt\"\n    },\n    \"expected_output\": {\n      \"Redistributions of source code must retain the above copyright\": 1\n    },\n    \"test_aspect\": \"Handling of long phrases matching in text.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"text_file\": \"license.txt\",\n      \"phrases_file\": \"phrases_with_whitespace.txt\"\n    },\n    \"expected_output\": {\n      \"Redistributions   \": 2,\n      \"   source code\": 1,\n      \"disclaimer   \": 2\n    },\n    \"test_aspect\": \"Handling phrases with leading and trailing whitespace.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"text_file\": \"license_repeating.txt\",\n      \"phrases_file\": \"repeated_phrases.txt\"\n    },\n    \"expected_output\": {\n      \"Redistributions\": 10,\n      \"source code\": 5,\n      \"disclaimer\": 8\n    },\n    \"test_aspect\": \"Handling of phrases that repeat multiple times.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"text_file\": \"long_license.txt\",\n      \"phrases_file\": \"common_phrases.txt\"\n    },\n    \"expected_output\": {\n      \"copyright\": 4,\n      \"conditions\": 3,\n      \"disclaimer\": 5\n    },\n    \"test_aspect\": \"Performance with a large text file and common phrases.\"\n  }\n}\n```"}
{"index": 3438, "preference": "functionality", "prompt": "You are tasked with creating a program that generates a specific font for a game. The font will be used in the game \"OpenLieroX\" and must adhere to certain requirements. The font will be generated from a set of characters and their corresponding bitmaps.\n\nYou are given a file named \"font_data.txt\" which contains the following information:\n- The first line contains two integers, N and M, separated by a space. N represents the number of characters in the font, and M represents the number of rows in each character's bitmap.\n- The next N * (M + 1) lines contain the bitmap representation of each character. Each character's bitmap is represented by M lines, where each line contains a string of length M. The characters are listed in the same order as they appear in the font.\n\nYour task is to create a program that reads the \"font_data.txt\" file and generates the font in the form of a dictionary where the keys are characters and the values are their corresponding bitmaps.\n\nWrite a function `generate_font` that takes the file name as input and returns a dictionary representing the font.\n\nExample:\nIf \"font_data.txt\" contains the following data:\n```\n3 3\n.*.\n*.*\n.*.\n...\n*.*\n.*.\n.*.\n*.*\n*.*\n```\nThe function call `generate_font(\"font_data.txt\")` should return the following dictionary:\n```\n{\n    'A': ['.*.', '*.*', '.*.'],\n    'B': ['...', '*.*', '.*.'],\n    'C': ['.*.', '.*.', '*.*']\n}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"3 3\\n.*.\\n*.*\\n.*.\\n...\\n*.*\\n.*.\\n*. *\\n.*.\\n*.*\\n\",\n    \"expected_output\": \"{\\\"A\\\":[\\\".*.\\\",\\\"*.*\\\",\\\".*.\\\"],\\\"B\\\":[\\\"...\\\",\\\"*.*\\\",\\\".*.\\\"],\\\"C\\\":[\\\".*.\\\",\\\".*.\\\",\\\"*.*\\\"]}\",\n    \"test_aspect\": \"Basic functionality with standard input data.\"\n  },\n  \"test_case2\": {\n    \"input\": \"1 1\\n*\\n*\\n\",\n    \"expected_output\": \"{\\\"A\\\":[\\\"*\\\"]}\",\n    \"test_aspect\": \"Single character bitmap, minimum input values.\"\n  },\n  \"test_case3\": {\n    \"input\": \"2 2\\n..\\n..\\n..\\n.*\\n..\\n.\\n\",\n    \"expected_output\": \"{\\\"A\\\":[\\\"..\\\",\"\\\"..\\\"],\\\"B\\\":[\\\"..\\\",\\\".*\\\"]}\",\n    \"test_aspect\": \"Two characters with simple bitmap representation.\"\n  },\n  \"test_case4\": {\n    \"input\": \"2 2\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n\",\n    \"expected_output\": \"{\\\"A\\\":[\\\".*\\\",\\\".*\\\"],\\\"B\\\":[\\\".*\\\",\\\".*\\\"]}\",\n    \"test_aspect\": \"Two characters with identical bitmap.\"\n  },\n  \"test_case5\": {\n    \"input\": \"2 4\\n....\\n.*..\\n....\\n....\\n....\\n.*.*\\n.*.*\\n....\\n\",\n    \"expected_output\": \"{\\\"A\\\":[\\\"....\\\",\\\".*..\\\",\\\"....\\\",\\\"....\\\"],\\\"B\\\":[\\\"....\\\",\\\".*.*\\\",\\\".*.*\\\",\\\"....\\\"]}\",\n    \"test_aspect\": \"Characters with larger bitmap dimensions.\"\n  },\n  \"test_case6\": {\n    \"input\": \"0 0\\n\",\n    \"expected_output\": \"{}\",\n    \"test_aspect\": \"No characters defined in the font.\"\n  },\n  \"test_case7\": {\n    \"input\": \"1 3\\n.*.\\n*.*\\n.*.\\n\",\n    \"expected_output\": \"{\\\"A\\\":[\\\".*.\\\",\\\"*.*\\\",\\\".*.\\\"]}\",\n    \"test_aspect\": \"Valid single character with multiple rows.\"\n  },\n  \"test_case8\": {\n    \"input\": \"3 0\\n...\\n...\\n...\\n\",\n    \"expected_output\": \"{\\\"A\\\":[],\\\"B\\\":[],\\\"C\\\":[]}\",\n    \"test_aspect\": \"Characters defined with zero bitmap rows.\"\n  },\n  \"test_case9\": {\n    \"input\": \"3 2\\n..\\n.*\\n..\\n.*\\n..\\n.*\\n\",\n    \"expected_output\": \"{\\\"A\\\":[\\\"..\\\",\\\".*\\\"],\\\"B\\\":[\\\"..\\\",\\\".*\\\"],\\\"C\\\":[\\\"..\\\",\\\".*\\\"]}\",\n    \"test_aspect\": \"Multiple characters with minimal bitmap content.\"\n  },\n  \"test_case10\": {\n    \"input\": \"2 1\\nA\\nB\\n\",\n    \"expected_output\": \"{\\\"A\\\":[\\\"A\\\"],\\\"B\\\":[\\\"B\\\"]}\",\n    \"test_aspect\": \"Characters with single-line bitmaps.\"\n  }\n}\n```"}
{"index": 15099, "preference": "functionality", "prompt": "You are given a Python function `ridges_detection` that takes in a 2D array `cwt2d` and a 1D array `vec`. The function is intended to detect ridges in the 2D array and return the peaks and ridges found. The function uses several helper functions such as `local_extreme` and `ridge_detection` to achieve this. Your task is to implement the `local_extreme` and `ridge_detection` functions to complete the ridges detection process.\n\nThe `local_extreme` function takes in a 2D array `arr`, a comparison function `comp_func`, an axis along which to operate, and an order for the local extreme. It should return a boolean array indicating the local extreme points based on the given comparison function and order.\n\nThe `ridge_detection` function takes in a 2D array `local_max`, initial row and column indices, the total number of rows and columns, and two boolean flags. It should return the rows and columns forming a ridge based on the given parameters.\n\nYour task is to complete the implementation of the `local_extreme` and `ridge_detection` functions to enable the `ridges_detection` function to accurately detect ridges and return the peaks and ridges found in the 2D array.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"cwt2d\": [[1, 2, 1], [2, 3, 2], [1, 2, 1]],\n      \"vec\": [0, 1, 2]\n    },\n    \"expected_output\": {\n      \"peaks\": [[1, 1]],\n      \"ridges\": [[0, 0], [0, 1], [1, 1], [1, 2], [2, 1]]\n    },\n    \"test_aspect\": \"Basic functionality with a simple peak in the center\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"cwt2d\": [[1, 1, 1], [1, 1, 1], [1, 1, 1]],\n      \"vec\": []\n    },\n    \"expected_output\": {\n      \"peaks\": [],\n      \"ridges\": []\n    },\n    \"test_aspect\": \"All values are the same; no peaks or ridges should be detected\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"cwt2d\": [[0, 1, 0], [1, 0, 1], [0, 1, 0]],\n      \"vec\": [0]\n    },\n    \"expected_output\": {\n      \"peaks\": [[0, 1], [1, 0], [1, 2], [2, 1]],\n      \"ridges\": [[0, 1], [1, 0], [1, 2], [2, 1]]\n    },\n    \"test_aspect\": \"Multiple peaks and ridges present in a checkerboard pattern\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"cwt2d\": [[5, 4, 3], [4, 5, 4], [3, 4, 5]],\n      \"vec\": [0, 1, 2]\n    },\n    \"expected_output\": {\n      \"peaks\": [[1, 1], [2, 2]],\n      \"ridges\": [[0, 0], [0, 1], [0, 2], [1, 1], [2, 1]]\n    },\n    \"test_aspect\": \"Peaks detected at corners and center in a descending array\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"cwt2d\": [[-1, -2, -3], [-2, -1, -2], [-3, -2, -1]],\n      \"vec\": [0]\n    },\n    \"expected_output\": {\n      \"peaks\": [[1, 1]],\n      \"ridges\": [[1, 1]]\n    },\n    \"test_aspect\": \"Negative values with a single peak detected at the center\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"cwt2d\": [[10, 20, 10, 0], [20, 30, 20, 10], [10, 20, 10, 5]],\n      \"vec\": [0, 1, 2]\n    },\n    \"expected_output\": {\n      \"peaks\": [[1, 1]],\n      \"ridges\": [[0, 1], [1, 0], [1, 1], [1, 2], [2, 1]]\n    },\n    \"test_aspect\": \"Complex peaks with varying heights; ensures function tracks correctly\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"cwt2d\": [[1, 2, 1], [2, 1, 2], [1, 2, 1]],\n      \"vec\": [0, 1]\n    },\n    \"expected_output\": {\n      \"peaks\": [[1, 0], [1, 2]],\n      \"ridges\": [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]\n    },\n    \"test_aspect\": \"Ridges detected in a symmetrical pattern with multiple local extremes\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"cwt2d\": [[0, 0], [0, 0]],\n      \"vec\": [0]\n    },\n    \"expected_output\": {\n      \"peaks\": [],\n      \"ridges\": []\n    },\n    \"test_aspect\": \"Empty array check with no peaks or ridges\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"cwt2d\": [[1]],\n      \"vec\": [0]\n    },\n    \"expected_output\": {\n      \"peaks\": [[0, 0]],\n      \"ridges\": [[0, 0]]\n    },\n    \"test_aspect\": \"Single element array; should detect the single peak\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"cwt2d\": [[1, 2], [3, 4]],\n      \"vec\": [0, 1]\n    },\n    \"expected_output\": {\n      \"peaks\": [[1, 1]],\n      \"ridges\": [[0, 0], [0, 1], [1, 1]]\n    },\n    \"test_aspect\": \"Basic functionality with a 2x2 array; tests normal peak detection\"\n  }\n}\n```"}
{"index": 1612, "preference": "functionality", "prompt": "You are given a class `Rectangle` representing a rectangle with its width and height. Your task is to implement a method `getArea` that calculates and returns the area of the rectangle.\n\nThe `Rectangle` class has the following structure:\n```\nclass Rectangle {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    // Implement the getArea method here\n}\n```\n\nYou need to implement the `getArea` method to calculate the area of the rectangle using the formula: `area = width * height`.\n\nWrite a JavaScript function that takes in the width and height of a rectangle and returns the area of the rectangle.\n\nExample:\nInput\n```javascript\nconst rect = new Rectangle(5, 10);\nconsole.log(rect.getArea());\n```\nOutput\n```\n50\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"const rect = new Rectangle(5, 10); rect.getArea();\",\n    \"expected_output\": \"50\",\n    \"test_aspect\": \"Standard case with positive integer width and height\"\n  },\n  \"test_case2\": {\n    \"input\": \"const rect = new Rectangle(0, 10); rect.getArea();\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"Edge case with zero width\"\n  },\n  \"test_case3\": {\n    \"input\": \"const rect = new Rectangle(10, 0); rect.getArea();\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"Edge case with zero height\"\n  },\n  \"test_case4\": {\n    \"input\": \"const rect = new Rectangle(0, 0); rect.getArea();\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"Edge case with both width and height set to zero\"\n  },\n  \"test_case5\": {\n    \"input\": \"const rect = new Rectangle(1.5, 2.5); rect.getArea();\",\n    \"expected_output\": \"3.75\",\n    \"test_aspect\": \"Case with floating-point values for width and height\"\n  },\n  \"test_case6\": {\n    \"input\": \"const rect = new Rectangle(-5, 10); rect.getArea();\",\n    \"expected_output\": \"-50\",\n    \"test_aspect\": \"Case with negative width, expecting area calculation to proceed with negative value\"\n  },\n  \"test_case7\": {\n    \"input\": \"const rect = new Rectangle(5, -10); rect.getArea();\",\n    \"expected_output\": \"-50\",\n    \"test_aspect\": \"Case with negative height, expecting area calculation to proceed with negative value\"\n  },\n  \"test_case8\": {\n    \"input\": \"const rect = new Rectangle(-5, -10); rect.getArea();\",\n    \"expected_output\": \"50\",\n    \"test_aspect\": \"Case with both width and height negative, expecting area to be calculated from negative values\"\n  },\n  \"test_case9\": {\n    \"input\": \"const rect = new Rectangle(1000, 2000); rect.getArea();\",\n    \"expected_output\": \"2000000\",\n    \"test_aspect\": \"Case with large positive integers for width and height\"\n  },\n  \"test_case10\": {\n    \"input\": \"const rect = new Rectangle(5, 1.5); rect.getArea();\",\n    \"expected_output\": \"7.5\",\n    \"test_aspect\": \"Case with a mix of integer and floating-point values for width and height\"\n  }\n}\n```"}
{"index": 5667, "preference": "functionality", "prompt": "You are tasked with implementing a class for managing planets in a space-themed game. The provided code snippet is a partial implementation of the `Planets` class, which inherits from `PlayerUI`. The `Planets` class is responsible for handling various actions related to planets in the game. The `__init__` method initializes the class and populates the `options_planets_filter` attribute with different planet filter options. Your task is to complete the implementation of the `Planets` class by adding a method to display the selected planet filter and its associated action.\n\nComplete the `Planets` class by adding a method called `display_selected_planet_filter` that takes the selected filter as an argument and returns the associated action for that filter. The method should handle the following filter options:\n- 'My Planets': Return the action for managing the player's owned planets.\n- 'Team planets': Return the action for managing planets owned by the player's team.\n- 'Neutral Planets': Return the action for interacting with neutral planets.\n- 'Enemy Planets': Return the action for dealing with planets owned by enemy players.\n- 'Uninhabited Planets': Return the action for exploring and colonizing uninhabited planets.\n- 'All Planets': Return the action for managing all planets, regardless of ownership.\n- 'All Suns': Return the action for interacting with all suns in the game.\n\nYou are required to implement the `display_selected_planet_filter` method and ensure that it correctly returns the associated action for the selected planet filter.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"My Planets\",\n    \"expected_output\": \"Manage player's owned planets\",\n    \"test_aspect\": \"Valid input for player's owned planets\"\n  },\n  \"test_case2\": {\n    \"input\": \"Team planets\",\n    \"expected_output\": \"Manage planets owned by player's team\",\n    \"test_aspect\": \"Valid input for team-owned planets\"\n  },\n  \"test_case3\": {\n    \"input\": \"Neutral Planets\",\n    \"expected_output\": \"Interact with neutral planets\",\n    \"test_aspect\": \"Valid input for neutral planets\"\n  },\n  \"test_case4\": {\n    \"input\": \"Enemy Planets\",\n    \"expected_output\": \"Deal with planets owned by enemy players\",\n    \"test_aspect\": \"Valid input for enemy-owned planets\"\n  },\n  \"test_case5\": {\n    \"input\": \"Uninhabited Planets\",\n    \"expected_output\": \"Explore and colonize uninhabited planets\",\n    \"test_aspect\": \"Valid input for uninhabited planets\"\n  },\n  \"test_case6\": {\n    \"input\": \"All Planets\",\n    \"expected_output\": \"Manage all planets, regardless of ownership\",\n    \"test_aspect\": \"Valid input for managing all planets\"\n  },\n  \"test_case7\": {\n    \"input\": \"All Suns\",\n    \"expected_output\": \"Interact with all suns in the game\",\n    \"test_aspect\": \"Valid input for interacting with all suns\"\n  },\n  \"test_case8\": {\n    \"input\": \"Invalid Filter\",\n    \"expected_output\": \"Invalid filter option\",\n    \"test_aspect\": \"Invalid input for unrecognized filter\"\n  },\n  \"test_case9\": {\n    \"input\": \"\",\n    \"expected_output\": \"Invalid filter option\",\n    \"test_aspect\": \"Empty input for filter\"\n  },\n  \"test_case10\": {\n    \"input\": \"  My Planets  \",\n    \"expected_output\": \"Manage player's owned planets\",\n    \"test_aspect\": \"Input with leading and trailing spaces for valid filter\"\n  }\n}\n```"}
{"index": 15818, "preference": "functionality", "prompt": "You are tasked with creating a Python function that simulates a simple goal-tracking system. The system should allow users to add, view, and delete goals. Each goal has a unique identifier, a title, and a description. Your task is to implement the `GoalTracker` class with the following methods:\n\n1. `add_goal(self, title: str, description: str) -> int`: This method should add a new goal with the given `title` and `description` and return the unique identifier of the added goal.\n\n2. `view_goal(self, goal_id: int) -> Tuple[str, str]`: This method should return a tuple containing the `title` and `description` of the goal with the given `goal_id`. If the goal does not exist, return `None`.\n\n3. `delete_goal(self, goal_id: int) -> bool`: This method should delete the goal with the given `goal_id` and return `True` if the deletion was successful, or `False` if the goal does not exist.\n\nYou should implement the `GoalTracker` class and ensure that it behaves as described.\n\nExample:\n```python\ntracker = GoalTracker()\ngoal1_id = tracker.add_goal(\"Learn Python\", \"Complete a Python programming course\")\ngoal2_id = tracker.add_goal(\"Exercise\", \"Go for a 30-minute run\")\nprint(tracker.view_goal(goal1_id))  # Output: (\"Learn Python\", \"Complete a Python programming course\")\nprint(tracker.delete_goal(goal2_id))  # Output: True\nprint(tracker.delete_goal(999))  # Output: False\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"tracker = GoalTracker()\\ngoal_id = tracker.add_goal('Goal 1', 'Description 1')\",\n    \"expected_output\": \"goal_id is an integer\",\n    \"test_aspect\": \"Verify that a goal can be added and returns a unique identifier.\"\n  },\n  \"test_case2\": {\n    \"input\": \"tracker.view_goal(goal_id)\",\n    \"expected_output\": \"('Goal 1', 'Description 1')\",\n    \"test_aspect\": \"Check viewing the goal returns the correct title and description.\"\n  },\n  \"test_case3\": {\n    \"input\": \"tracker.delete_goal(goal_id)\",\n    \"expected_output\": \"True\",\n    \"test_aspect\": \"Verify that the goal can be deleted successfully.\"\n  },\n  \"test_case4\": {\n    \"input\": \"tracker.view_goal(goal_id)\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Check that viewing a deleted goal returns None.\"\n  },\n  \"test_case5\": {\n    \"input\": \"tracker.delete_goal(goal_id)\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Verify that deleting a non-existing goal returns False.\"\n  },\n  \"test_case6\": {\n    \"input\": \"tracker.add_goal('', 'No title')\",\n    \"expected_output\": \"goal_id is an integer\",\n    \"test_aspect\": \"Check adding a goal with an empty title should still return an identifier.\"\n  },\n  \"test_case7\": {\n    \"input\": \"tracker.view_goal(999)\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Check viewing a goal with a non-existent ID returns None.\"\n  },\n  \"test_case8\": {\n    \"input\": \"tracker.add_goal('Goal 2', 'Description 2')\\ngoal2_id = tracker.add_goal('Goal 3', 'Description 3')\\ntracker.view_goal(goal2_id)\",\n    \"expected_output\": \"('Goal 3', 'Description 3')\",\n    \"test_aspect\": \"Ensure that multiple goals can be added and retrieved correctly.\"\n  },\n  \"test_case9\": {\n    \"input\": \"tracker.delete_goal(0)\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Verify that deleting a goal with ID 0 returns False (assuming IDs start from 1).\"\n  },\n  \"test_case10\": {\n    \"input\": \"tracker.add_goal('Goal 4', 'Description 4')\\ngoal4_id = tracker.add_goal('Goal 5', 'Description 5')\\ntracker.view_goal(goal4_id)\",\n    \"expected_output\": \"('Goal 4', 'Description 4')\",\n    \"test_aspect\": \"Check that goals can be uniquely identified and viewed after multiple additions.\"\n  }\n}\n```"}
{"index": 10490, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes a given tuple and returns a new tuple containing the elements of the original tuple in reverse order.\n\nWrite a Python function `reverse_tuple` that takes a tuple `input_tuple` as its parameter and returns a new tuple with the elements of `input_tuple` reversed.\n\nFunction signature: `def reverse_tuple(input_tuple: tuple) -> tuple:`\n\nExample:\n```python\ninput_tuple = (1, 2, 3, 4, 5)\noutput_tuple = reverse_tuple(input_tuple)\nprint(output_tuple)  # Output: (5, 4, 3, 2, 1)\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"(1, 2, 3, 4, 5)\",\n    \"expected_output\": \"(5, 4, 3, 2, 1)\",\n    \"test_aspect\": \"Basic functionality with a standard tuple of integers\"\n  },\n  \"test_case2\": {\n    \"input\": \"(1, 2, 3)\",\n    \"expected_output\": \"(3, 2, 1)\",\n    \"test_aspect\": \"Basic functionality with a smaller tuple of integers\"\n  },\n  \"test_case3\": {\n    \"input\": \"(1,)\",\n    \"expected_output\": \"(1,)\",\n    \"test_aspect\": \"Single element tuple, should return the same element\"\n  },\n  \"test_case4\": {\n    \"input\": \"()\", \n    \"expected_output\": \"()\",\n    \"test_aspect\": \"Empty tuple, should return an empty tuple\"\n  },\n  \"test_case5\": {\n    \"input\": \"(1, 'a', 3.5, (4, 5))\",\n    \"expected_output\": \"((4, 5), 3.5, 'a', 1)\",\n    \"test_aspect\": \"Tuple with mixed data types, ensuring all types are handled\"\n  },\n  \"test_case6\": {\n    \"input\": \"(True, False, None)\",\n    \"expected_output\": \"(None, False, True)\",\n    \"test_aspect\": \"Tuple with boolean and None values, checks handling of special values\"\n  },\n  \"test_case7\": {\n    \"input\": \"(1, 1, 1, 1)\",\n    \"expected_output\": \"(1, 1, 1, 1)\",\n    \"test_aspect\": \"Tuple with all identical elements, should return the same\"\n  },\n  \"test_case8\": {\n    \"input\": \"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\",\n    \"expected_output\": \"(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\",\n    \"test_aspect\": \"Larger tuple with a sequence of integers\"\n  },\n  \"test_case9\": {\n    \"input\": \"('a', 'b', 'c')\",\n    \"expected_output\": \"('c', 'b', 'a')\",\n    \"test_aspect\": \"Tuple with strings, ensuring reversal works with string data\"\n  },\n  \"test_case10\": {\n    \"input\": \"((1, 2), (3, 4), (5, 6))\",\n    \"expected_output\": \"((5, 6), (3, 4), (1, 2))\",\n    \"test_aspect\": \"Tuple containing other tuples, testing nested tuples\"\n  }\n}\n```"}
{"index": 30745, "preference": "functionality", "prompt": "You are working on a Python-based system that interacts with a remote server to manage machine learning models. The provided code snippet is a method within a class that unloads a specified model from the server. The method uses gRPC to send a request to the server and waits for the response to confirm the successful unloading of the model.\n\nYour task is to implement a Python function that simulates the behavior of the `unloadModel` method. The function should take the model name as input, send a request to the server using gRPC, and return a boolean value indicating whether the model was successfully unloaded.\n\nThe gRPC stub and message types are provided by the `worker_pb2` and `worker_pb2_grpc` modules, which are already imported and available for use. The `ModelManageRequest` and `ModelManageResponse` message types are defined in the `worker_pb2` module.\n\nYou need to implement the following function:\n```python\ndef simulate_unload_model(stub, model_name):\n    # Your implementation here\n```\n\nThe function should use the provided `stub` to send an unload request for the specified `model_name` to the server. If the response indicates that the model was successfully unloaded, the function should return `True`; otherwise, it should return `False`.\n\nNote: You can assume that the gRPC connection and stub initialization are handled outside the scope of this function.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"model_name\": \"valid_model_name\", \"stub\": \"mock_stub_success\"},\n    \"expected_output\": true,\n    \"test_aspect\": \"Successfully unloads a valid model\"\n  },\n  \"test_case2\": {\n    \"input\": {\"model_name\": \"invalid_model_name\", \"stub\": \"mock_stub_failure\"},\n    \"expected_output\": false,\n    \"test_aspect\": \"Handles unloading of a non-existent model\"\n  },\n  \"test_case3\": {\n    \"input\": {\"model_name\": \"\", \"stub\": \"mock_stub_empty\"},\n    \"expected_output\": false,\n    \"test_aspect\": \"Handles empty model name input\"\n  },\n  \"test_case4\": {\n    \"input\": {\"model_name\": \"model_with_special_chars!@#\", \"stub\": \"mock_stub_special\"},\n    \"expected_output\": true,\n    \"test_aspect\": \"Successfully unloads a model with special characters in its name\"\n  },\n  \"test_case5\": {\n    \"input\": {\"model_name\": \"model_with_spaces\", \"stub\": \"mock_stub_spaces\"},\n    \"expected_output\": true,\n    \"test_aspect\": \"Successfully unloads a model with spaces in its name\"\n  },\n  \"test_case6\": {\n    \"input\": {\"model_name\": \"another_valid_model\", \"stub\": \"mock_stub_success\"},\n    \"expected_output\": true,\n    \"test_aspect\": \"Successfully unloads another valid model\"\n  },\n  \"test_case7\": {\n    \"input\": {\"model_name\": \"timeout_model\", \"stub\": \"mock_stub_timeout\"},\n    \"expected_output\": false,\n    \"test_aspect\": \"Handles gRPC timeout scenario\"\n  },\n  \"test_case8\": {\n    \"input\": {\"model_name\": \"error_model\", \"stub\": \"mock_stub_error\"},\n    \"expected_output\": false,\n    \"test_aspect\": \"Handles error in gRPC call\"\n  },\n  \"test_case9\": {\n    \"input\": {\"model_name\": \"none_model\", \"stub\": \"mock_stub_none\"},\n    \"expected_output\": false,\n    \"test_aspect\": \"Handles None as a model name input\"\n  },\n  \"test_case10\": {\n    \"input\": {\"model_name\": \"model_to_unload\", \"stub\": \"mock_stub_success\"},\n    \"expected_output\": true,\n    \"test_aspect\": \"Successfully unloads a model that has been previously loaded\"\n  }\n}\n```"}
{"index": 29490, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes a given string and performs a specific transformation on it. The function should take a string as input and return a modified version of the string based on the following rules:\n\n1. If the input string contains the word \"django\" (case insensitive), it should be replaced with \"Django\".\n2. If the input string contains the word \"http\", it should be replaced with \"HTTPS\".\n\nYour task is to implement the function `transform_string(input_string)` that takes a string `input_string` as input and returns the modified string based on the rules mentioned above.\n\nExample:\n```python\ninput_string = \"Django is a high-level Python Web framework. http is a protocol.\"\ntransformed_output = transform_string(input_string)\nprint(transformed_output)\n```\nOutput:\n```\n\"Django is a high-level Python Web framework. HTTPS is a protocol.\"\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Testing with an empty string to verify handling of no input.\"\n  },\n  \"test_case2\": {\n    \"input\": \"This is a test string without any keywords.\",\n    \"expected_output\": \"This is a test string without any keywords.\",\n    \"test_aspect\": \"Testing with a string that contains neither 'django' nor 'http' to verify no changes.\"\n  },\n  \"test_case3\": {\n    \"input\": \"django is a framework.\",\n    \"expected_output\": \"Django is a framework.\",\n    \"test_aspect\": \"Testing with 'django' in lowercase to verify case insensitivity in replacement.\"\n  },\n  \"test_case4\": {\n    \"input\": \"Django is a framework.\",\n    \"expected_output\": \"Django is a framework.\",\n    \"test_aspect\": \"Testing with 'Django' in uppercase to verify no additional changes.\"\n  },\n  \"test_case5\": {\n    \"input\": \"The HTTP protocol is secure.\",\n    \"expected_output\": \"The HTTPS protocol is secure.\",\n    \"test_aspect\": \"Testing with 'HTTP' in uppercase to verify case insensitivity in replacement.\"\n  },\n  \"test_case6\": {\n    \"input\": \"http is a protocol.\",\n    \"expected_output\": \"HTTPS is a protocol.\",\n    \"test_aspect\": \"Testing with 'http' in lowercase to verify proper replacement.\"\n  },\n  \"test_case7\": {\n    \"input\": \"Django and http are both mentioned.\",\n    \"expected_output\": \"Django and HTTPS are both mentioned.\",\n    \"test_aspect\": \"Testing with both 'django' and 'http' present in the string to verify multiple replacements.\"\n  },\n  \"test_case8\": {\n    \"input\": \"Django is great! Http is important.\",\n    \"expected_output\": \"Django is great! HTTPS is important.\",\n    \"test_aspect\": \"Testing with mixed case 'Http' to verify case insensitivity in 'http' replacement.\"\n  },\n  \"test_case9\": {\n    \"input\": \"This is a Django server running with http.\",\n    \"expected_output\": \"This is a Django server running with HTTPS.\",\n    \"test_aspect\": \"Testing with 'Django' and 'http' in the same sentence for correct transformations.\"\n  },\n  \"test_case10\": {\n    \"input\": \"As a matter of fact, Django and HTTP coexist.\",\n    \"expected_output\": \"As a matter of fact, Django and HTTPS coexist.\",\n    \"test_aspect\": \"Testing with 'HTTP' in uppercase with 'Django' to verify both transformations apply correctly.\"\n  }\n}\n```"}
{"index": 2009, "preference": "functionality", "prompt": "You are working on a software project that involves managing a large number of button elements in different languages. Each button is identified by a unique code, and the buttons are organized into categories denoted by a combination of language and category number. The button codes follow a specific naming convention: `<language>_b<category number>_<button number>_button`.\n\nYour task is to write a function that takes a list of button codes and categorizes them based on their language and category number. The function should return a dictionary where the keys are tuples representing the language and category number, and the values are lists of button codes belonging to that category.\n\nWrite a function `categorize_buttons(button_codes)`:\n\n**Input**\n- `button_codes`: A list of button codes (strings). Each button code is in the format `<language>_b<category number>_<button number>_button`.\n\n**Output**\n- A dictionary where the keys are tuples in the format `(language, category number)` and the values are lists of button codes belonging to that category.\n\n**Example**\n```python\nbutton_codes = [\n    'eng_b2_3_button',\n    'eng_b11_1_button',\n    'eng_b11_2_button',\n    'eng_b12_1_button'\n]\n\ncategorize_buttons(button_codes)\n```\n\n**Output**\n```python\n{\n    ('eng', 2): ['eng_b2_3_button'],\n    ('eng', 11): ['eng_b11_1_button', 'eng_b11_2_button'],\n    ('eng', 12): ['eng_b12_1_button']\n}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\"eng_b2_3_button\", \"eng_b2_4_button\"],\n    \"expected_output\": {\n      \"eng_b2\": [\"eng_b2_3_button\", \"eng_b2_4_button\"]\n    },\n    \"test_aspect\": \"Basic functionality with multiple buttons in the same category.\"\n  },\n  \"test_case2\": {\n    \"input\": [\"fr_b1_1_button\", \"fr_b1_2_button\", \"fr_b2_1_button\"],\n    \"expected_output\": {\n      \"fr_b1\": [\"fr_b1_1_button\", \"fr_b1_2_button\"],\n      \"fr_b2\": [\"fr_b2_1_button\"]\n    },\n    \"test_aspect\": \"Handling of multiple languages and categories.\"\n  },\n  \"test_case3\": {\n    \"input\": [\"eng_b3_1_button\", \"eng_b3_2_button\", \"eng_b3_3_button\"],\n    \"expected_output\": {\n      \"eng_b3\": [\"eng_b3_1_button\", \"eng_b3_2_button\", \"eng_b3_3_button\"]\n    },\n    \"test_aspect\": \"All buttons in a single category return correctly.\"\n  },\n  \"test_case4\": {\n    \"input\": [],\n    \"expected_output\": {},\n    \"test_aspect\": \"Empty input list should return an empty dictionary.\"\n  },\n  \"test_case5\": {\n    \"input\": [\"de_b1_1_button\", \"de_b1_2_button\", \"de_b1_3_button\", \"de_b2_1_button\"],\n    \"expected_output\": {\n      \"de_b1\": [\"de_b1_1_button\", \"de_b1_2_button\", \"de_b1_3_button\"],\n      \"de_b2\": [\"de_b2_1_button\"]\n    },\n    \"test_aspect\": \"Verification of categorization with buttons of varying counts.\"\n  },\n  \"test_case6\": {\n    \"input\": [\"it_b1_1_button\", \"it_b2_1_button\", \"it_b2_2_button\"],\n    \"expected_output\": {\n      \"it_b1\": [\"it_b1_1_button\"],\n      \"it_b2\": [\"it_b2_1_button\", \"it_b2_2_button\"]\n    },\n    \"test_aspect\": \"Ensuring correct grouping when some categories have only one button.\"\n  },\n  \"test_case7\": {\n    \"input\": [\"eng_b5_1_button\", \"eng_b5_2_button\", \"sp_b5_1_button\"],\n    \"expected_output\": {\n      \"eng_b5\": [\"eng_b5_1_button\", \"eng_b5_2_button\"],\n      \"sp_b5\": [\"sp_b5_1_button\"]\n    },\n    \"test_aspect\": \"Cross-language categorization test.\"\n  },\n  \"test_case8\": {\n    \"input\": [\"eng_b10_1_button\", \"eng_b10_2_button\", \"eng_b10_3_button\", \"sp_b10_1_button\"],\n    \"expected_output\": {\n      \"eng_b10\": [\"eng_b10_1_button\", \"eng_b10_2_button\", \"eng_b10_3_button\"],\n      \"sp_b10\": [\"sp_b10_1_button\"]\n    },\n    \"test_aspect\": \"Tests categorization of buttons with the same category number but different languages.\"\n  },\n  \"test_case9\": {\n    \"input\": [\"ch_b1_1_button\"],\n    \"expected_output\": {\n      \"ch_b1\": [\"ch_b1_1_button\"]\n    },\n    \"test_aspect\": \"Single button in a unique category should return appropriately.\"\n  },\n  \"test_case10\": {\n    \"input\": [\"eng_b1_1_button\", \"eng_b2_1_button\", \"eng_b3_1_button\", \"eng_b1_2_button\"],\n    \"expected_output\": {\n      \"eng_b1\": [\"eng_b1_1_button\", \"eng_b1_2_button\"],\n      \"eng_b2\": [\"eng_b2_1_button\"],\n      \"eng_b3\": [\"eng_b3_1_button\"]\n    },\n    \"test_aspect\": \"Testing multiple buttons across different categories, ensuring correct grouping.\"\n  }\n}\n```"}
{"index": 4147, "preference": "functionality", "prompt": "You are tasked with implementing a Python class method that processes a crystal structure and saves it to a specified folder. The method should handle different input types and ensure that the folder exists before saving the structure. Below is a skeleton of the class method:\n\n```python\nimport os\nfrom ase import Atoms\nfrom pyxtal import pyxtal\n\nclass StructureProcessor:\n    def __init__(self):\n        self.structure = None\n        self.folder = None\n\n    def process_and_save_structure(self, struc, path):\n        # Your implementation here\n```\n\nYour task is to complete the `process_and_save_structure` method. The method should perform the following steps:\n1. If the input `struc` is of type `pyxtal`, convert it to an `ASE Atoms` object.\n2. Check if the input `struc` is an instance of `ASE Atoms`. If not, raise a `NotImplementedError` with the message \"only support ASE atoms object\".\n3. Set the `structure` attribute of the class to the processed `struc`.\n4. Set the `folder` attribute of the class to the input `path`.\n5. If the specified folder does not exist, create the folder using `os.makedirs`.\n\nYour task is to complete the `process_and_save_structure` method to fulfill the requirements outlined above.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"struc\": \"pyxtal_object\",\n      \"path\": \"valid/folder/path\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Verify handling of valid pyxtal input and correctly processes into ASE Atoms.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"struc\": \"ase_atoms_object\",\n      \"path\": \"valid/folder/path\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Check if ASE Atoms object is accepted without conversion.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"struc\": \"non_supported_object\",\n      \"path\": \"valid/folder/path\"\n    },\n    \"expected_output\": \"NotImplementedError: only support ASE atoms object\",\n    \"test_aspect\": \"Ensure NotImplementedError is raised for unsupported input types.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"struc\": \"pyxtal_object\",\n      \"path\": \"non_existing_folder/path\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Test creation of a non-existing folder and process pyxtal to ASE.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"struc\": \"ase_atoms_object\",\n      \"path\": \"existing_folder/path\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Verify functionality with existing folder and ASE Atoms.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"struc\": \"pyxtal_object\",\n      \"path\": \"/tmp/valid_folder/path\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Check processing of pyxtal input to ASE Atoms and folder path in a temporary directory.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"struc\": \"None\",\n      \"path\": \"valid/folder/path\"\n    },\n    \"expected_output\": \"NotImplementedError: only support ASE atoms object\",\n    \"test_aspect\": \"Ensure NotImplementedError is raised for None input.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"struc\": \"empty_string\",\n      \"path\": \"valid/folder/path\"\n    },\n    \"expected_output\": \"NotImplementedError: only support ASE atoms object\",\n    \"test_aspect\": \"Verify handling of empty string as input, resulting in NotImplementedError.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"struc\": \"pyxtal_object\",\n      \"path\": \"\"\n    },\n    \"expected_output\": \"OSError: Invalid path\",\n    \"test_aspect\": \"Check error handling for empty path input.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"struc\": \"ase_atoms_object\",\n      \"path\": \"path/with/space in name\"\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Verify that paths with spaces are handled correctly without errors.\"\n  }\n}\n```"}
{"index": 11628, "preference": "functionality", "prompt": "You are tasked with creating a Python program that calculates the average of two numbers entered by the user and then displays the result with two decimal places. Your program should take two floating-point numbers as input, calculate their average, and then output the result with two decimal places.\n\nWrite a Python program that accomplishes the following:\n1. Prompt the user to input a floating-point number and store it in a variable `n1`.\n2. Prompt the user to input another floating-point number and store it in a variable `n2`.\n3. Calculate the average of `n1` and `n2` and store it in a variable `m`.\n4. Display the average `m` with exactly two decimal places.\n\nYour program should follow the format and functionality demonstrated in the given code snippet.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"2.0\\n3.0\\n\",\n    \"expected_output\": \"The average is 2.50\\n\",\n    \"test_aspect\": \"Basic positive numbers\"\n  },\n  \"test_case2\": {\n    \"input\": \"0.0\\n0.0\\n\",\n    \"expected_output\": \"The average is 0.00\\n\",\n    \"test_aspect\": \"Both numbers are zero\"\n  },\n  \"test_case3\": {\n    \"input\": \"-5.0\\n5.0\\n\",\n    \"expected_output\": \"The average is 0.00\\n\",\n    \"test_aspect\": \"Negative and positive number\"\n  },\n  \"test_case4\": {\n    \"input\": \"2.5\\n3.5\\n\",\n    \"expected_output\": \"The average is 3.00\\n\",\n    \"test_aspect\": \"Decimal numbers\"\n  },\n  \"test_case5\": {\n    \"input\": \"1.234\\n2.345\\n\",\n    \"expected_output\": \"The average is 1.79\\n\",\n    \"test_aspect\": \"More precision in decimal numbers\"\n  },\n  \"test_case6\": {\n    \"input\": \"100.0\\n200.0\\n\",\n    \"expected_output\": \"The average is 150.00\\n\",\n    \"test_aspect\": \"Large positive numbers\"\n  },\n  \"test_case7\": {\n    \"input\": \"-1.0\\n-3.0\\n\",\n    \"expected_output\": \"The average is -2.00\\n\",\n    \"test_aspect\": \"Both numbers are negative\"\n  },\n  \"test_case8\": {\n    \"input\": \"0.0\\n5.0\\n\",\n    \"expected_output\": \"The average is 2.50\\n\",\n    \"test_aspect\": \"Zero and positive number\"\n  },\n  \"test_case9\": {\n    \"input\": \"10.0\\n-10.0\\n\",\n    \"expected_output\": \"The average is 0.00\\n\",\n    \"test_aspect\": \"Equal magnitude but different signs\"\n  },\n  \"test_case10\": {\n    \"input\": \"123456789.0\\n987654321.0\\n\",\n    \"expected_output\": \"The average is 555555555.00\\n\",\n    \"test_aspect\": \"Very large numbers\"\n  }\n}\n```"}
{"index": 28502, "preference": "functionality", "prompt": "You are tasked with creating a Python package management system that can parse and extract metadata from a Python package's `__init__.py` file. The metadata includes the package's URI, version, author, email, license, and copyright information. Your goal is to implement a function that takes the content of an `__init__.py` file as input and returns a dictionary containing the extracted metadata.\n\nYou are provided with a sample `__init__.py` file content as follows:\n```python\n__uri__ = \"https://github.com/Netflix-Skunkworks/historical\"\n\n__version__ = \"0.4.10\"\n\n__author__ = \"The Historical developers\"\n__email__ = \"<EMAIL>\"\n\n__license__ = \"Apache License, Version 2.0\"\n__copyright__ = f\"Copyright 2017 {__author__}\"\n```\n\nYour task is to implement the function `parse_init_py` that takes the content of the `__init__.py` file as a string and returns a dictionary containing the extracted metadata. The keys of the dictionary should be \"uri\", \"version\", \"author\", \"email\", \"license\", and \"copyright\".\n\nFunction Signature: \n```python\ndef parse_init_py(content: str) -> dict:\n    pass\n```\n\nExample:\n```python\ncontent = '''__uri__ = \"https://github.com/Netflix-Skunkworks/historical\"\n__version__ = \"0.4.10\"\n__author__ = \"The Historical developers\"\n__email__ = \"<EMAIL>\"\n__license__ = \"Apache License, Version 2.0\"\n__copyright__ = f\"Copyright 2017 {__author__}\"'''\n\nprint(parse_init_py(content))\n# Output: \n# {\n#   'uri': 'https://github.com/Netflix-Skunkworks/historical',\n#   'version': '0.4.10',\n#   'author': 'The Historical developers',\n#   'email': '<EMAIL>',\n#   'license': 'Apache License, Version 2.0',\n#   'copyright': 'Copyright 2017 The Historical developers'\n# }\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"__uri__ = \\\"https://github.com/Netflix-Skunkworks/historical\\\"\\n__version__ = \\\"0.4.10\\\"\\n__author__ = \\\"The Historical developers\\\"\\n__email__ = \\\"<EMAIL>\\\"\\n__license__ = \\\"Apache License, Version 2.0\\\"\\n__copyright__ = f\\\"Copyright 2017 {__author__}\\\"\",\n    \"expected_output\": {\n      \"uri\": \"https://github.com/Netflix-Skunkworks/historical\",\n      \"version\": \"0.4.10\",\n      \"author\": \"The Historical developers\",\n      \"email\": \"<EMAIL>\",\n      \"license\": \"Apache License, Version 2.0\",\n      \"copyright\": \"Copyright 2017 The Historical developers\"\n    },\n    \"test_aspect\": \"Basic functionality with valid input\"\n  },\n  \"test_case2\": {\n    \"input\": \"\",\n    \"expected_output\": {},\n    \"test_aspect\": \"Empty input case\"\n  },\n  \"test_case3\": {\n    \"input\": \"__uri__ = \\\"\\\"\\n__version__ = \\\"0.4.10\\\"\\n__author__ = \\\"\\\"\\n__email__ = \\\"<EMAIL>\\\"\\n__license__ = \\\"Apache License, Version 2.0\\\"\\n__copyright__ = \\\"\\\"\",\n    \"expected_output\": {\n      \"uri\": \"\",\n      \"version\": \"0.4.10\",\n      \"author\": \"\",\n      \"email\": \"<EMAIL>\",\n      \"license\": \"Apache License, Version 2.0\",\n      \"copyright\": \"\"\n    },\n    \"test_aspect\": \"Partial metadata with some empty strings\"\n  },\n  \"test_case4\": {\n    \"input\": \"__uri__ = \\\"https://example.com\\\"\\n__version__ = \\\"1.0.0\\\"\\n__author__ = \\\"Jane Doe\\\"\\n__email__ = \\\"jane@example.com\\\"\\n__license__ = \\\"MIT\\\"\\n__copyright__ = f\\\"Copyright 2023 {__author__}\\\"\",\n    \"expected_output\": {\n      \"uri\": \"https://example.com\",\n      \"version\": \"1.0.0\",\n      \"author\": \"Jane Doe\",\n      \"email\": \"jane@example.com\",\n      \"license\": \"MIT\",\n      \"copyright\": \"Copyright 2023 Jane Doe\"\n    },\n    \"test_aspect\": \"Functionality with different valid metadata values\"\n  },\n  \"test_case5\": {\n    \"input\": \"__uri__ = \\\"invalid_uri\\\"\\n__version__ = \\\"0.1\\\"\\n__author__ = \\\"\\\"\\n__email__ = \\\"\\\"\\n__license__ = \\\"\\\"\\n__copyright__ = \\\"\\\"\",\n    \"expected_output\": {\n      \"uri\": \"invalid_uri\",\n      \"version\": \"0.1\",\n      \"author\": \"\",\n      \"email\": \"\",\n      \"license\": \"\",\n      \"copyright\": \"\"\n    },\n    \"test_aspect\": \"Handles invalid URI format correctly\"\n  },\n  \"test_case6\": {\n    \"input\": \"__uri__ = \\\"http://example.com\\\"\\n__version__ = \\\"2.0\\\"\\n__author__ = \\\"Author Name\\\"\\n__email__ = \\\"author@example.com\\\"\\n__license__ = \\\"GPL\\\"\\n__copyright__ = f\\\"Copyright {2023} {__author__}\\\"\",\n    \"expected_output\": {\n      \"uri\": \"http://example.com\",\n      \"version\": \"2.0\",\n      \"author\": \"Author Name\",\n      \"email\": \"author@example.com\",\n      \"license\": \"GPL\",\n      \"copyright\": \"Copyright 2023 Author Name\"\n    },\n    \"test_aspect\": \"Functionality with valid but different metadata values\"\n  },\n  \"test_case7\": {\n    \"input\": \"__uri__ = \\\"\\\"\\n__version__ = \\\"\\\"\\n__author__ = \\\"\\\"\\n__email__ = \\\"\\\"\\n__license__ = \\\"\\\"\\n__copyright__ = \\\"\\\"\",\n    \"expected_output\": {\n      \"uri\": \"\",\n      \"version\": \"\",\n      \"author\": \"\",\n      \"email\": \"\",\n      \"license\": \"\",\n      \"copyright\": \"\"\n    },\n    \"test_aspect\": \"All metadata fields empty\"\n  },\n  \"test_case8\": {\n    \"input\": \"__uri__ = \\\"http://test.com\\\"\\n__version__ = \\\"0.0.1\\\"\\n__author__ = \\\"Test Author\\\"\\n__email__ = \\\"test@example.com\\\"\\n__license__ = \\\"Apache 2.0\\\"\\n__copyright__ = f\\\"Copyright 2023 {__author__}\\\"\",\n    \"expected_output\": {\n      \"uri\": \"http://test.com\",\n      \"version\": \"0.0.1\",\n      \"author\": \"Test Author\",\n      \"email\": \"test@example.com\",\n      \"license\": \"Apache 2.0\",\n      \"copyright\": \"Copyright 2023 Test Author\"\n    },\n    \"test_aspect\": \"Valid input with minimal versioning\"\n  },\n  \"test_case9\": {\n    \"input\": \"__uri__ = \\\"http://no-email.com\\\"\\n__version__ = \\\"1.0\\\"\\n__author__ = \\\"No Name\\\"\\n__email__ = \\\"\\\"\\n__license__ = \\\"Public Domain\\\"\\n__copyright__ = f\\\"Copyright {2023} {__author__}\\\"\",\n    \"expected_output\": {\n      \"uri\": \"http://no-email.com\",\n      \"version\": \"1.0\",\n      \"author\": \"No Name\",\n      \"email\": \"\",\n      \"license\": \"Public Domain\",\n      \"copyright\": \"Copyright 2023 No Name\"\n    },\n    \"test_aspect\": \"Handles empty email field correctly\"\n  },\n  \"test_case10\": {\n    \"input\": \"__uri__ = \\\"\\\"\\\"https://multiline.com\\\"\\\"\\\"\\n__version__ = \\\"1.2.3\\\"\\n__author__ = \\\"Multi Line Author\\\"\\n__email__ = \\\"multi@example.com\\\"\\n__license__ = \\\"MIT License\\\"\\n__copyright__ = f\\\"Copyright {2023} {__author__}\\\"\",\n    \"expected_output\": {\n      \"uri\": \"\\\"https://multiline.com\\\"\",\n      \"version\": \"1.2.3\",\n      \"author\": \"Multi Line Author\",\n      \"email\": \"multi@example.com\",\n      \"license\": \"MIT License\",\n      \"copyright\": \"Copyright 2023 Multi Line Author\"\n    },\n    \"test_aspect\": \"Handles multi-line string format for URI\"\n  }\n}\n```"}
{"index": 2960, "preference": "functionality", "prompt": "You are tasked with creating a Java class that extends a given superclass and adds a new constant field. Your task is to complete the implementation of the subclass by adding the necessary code to achieve this.\n\nYou are given the following code snippet as a starting point:\n```java\npublic class HBaseInterfaceAudienceSpark extends HBaseInterfaceAudience {\n    //https://github.com/apache/hbase/blob/e6e52cd80f4ba26b196e2d20cd84ba167b303475/hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseInterfaceAudience.java\n    public static final String SPARK = \"Spark\";\n}\n```\n\nYour task is to complete the implementation of the `HBaseInterfaceAudienceSpark` class by adding the necessary code to extend the `HBaseInterfaceAudience` class and define a new constant field named `SPARK` with the value \"Spark\".\n\nComplete the implementation of the `HBaseInterfaceAudience` class by adding the necessary code to achieve this.\n\nYour solution should be in the form of a complete Java class that compiles without errors and includes the required implementation.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"new HBaseInterfaceAudienceSpark()\",\n    \"expected_output\": \"Instance of HBaseInterfaceAudienceSpark created\",\n    \"test_aspect\": \"Creation of the subclass instance\"\n  },\n  \"test_case2\": {\n    \"input\": \"HBaseInterfaceAudienceSpark.SPARK\",\n    \"expected_output\": \"\\\"Spark\\\"\",\n    \"test_aspect\": \"Accessing the constant SPARK\"\n  },\n  \"test_case3\": {\n    \"input\": \"HBaseInterfaceAudienceSpark.class.getSuperclass()\",\n    \"expected_output\": \"HBaseInterfaceAudience\",\n    \"test_aspect\": \"Verifying the superclass of HBaseInterfaceAudienceSpark\"\n  },\n  \"test_case4\": {\n    \"input\": \"HBaseInterfaceAudienceSpark.SPARK.equals(\\\"Spark\\\")\",\n    \"expected_output\": \"true\",\n    \"test_aspect\": \"Checking equality of the constant SPARK with expected value\"\n  },\n  \"test_case5\": {\n    \"input\": \"HBaseInterfaceAudienceSpark.SPARK.length()\",\n    \"expected_output\": \"5\",\n    \"test_aspect\": \"Verifying the length of the constant SPARK\"\n  },\n  \"test_case6\": {\n    \"input\": \"new HBaseInterfaceAudienceSpark() instanceof HBaseInterfaceAudience\",\n    \"expected_output\": \"true\",\n    \"test_aspect\": \"Checking if HBaseInterfaceAudienceSpark is an instance of its superclass\"\n  },\n  \"test_case7\": {\n    \"input\": \"HBaseInterfaceAudienceSpark.SPARK.getClass()\",\n    \"expected_output\": \"class java.lang.String\",\n    \"test_aspect\": \"Checking the class type of the constant SPARK\"\n  },\n  \"test_case8\": {\n    \"input\": \"HBaseInterfaceAudienceSpark.SPARK.toLowerCase()\",\n    \"expected_output\": \"\\\"spark\\\"\",\n    \"test_aspect\": \"Checking the output of the SPARK constant when converted to lower case\"\n  },\n  \"test_case9\": {\n    \"input\": \"\",\n    \"expected_output\": \"The class compiles without errors and extends HBaseInterfaceAudience\",\n    \"test_aspect\": \"Compilation and extension correctness of HBaseInterfaceAudienceSpark class\"\n  },\n  \"test_case10\": {\n    \"input\": \"HBaseInterfaceAudienceSpark.getClass().getDeclaredFields()\",\n    \"expected_output\": \"Includes 'SPARK'\",\n    \"test_aspect\": \"Checking if the SPARK field is defined in HBaseInterfaceAudienceSpark\"\n  }\n}\n```"}
{"index": 33020, "preference": "functionality", "prompt": "You are tasked with creating a Python function that interacts with a Twitter API to retrieve the status of a given parent tweet. The function should handle potential exceptions and return the status of the tweet in a specific format.\n\nWrite a Python function `retrieve_tweet_status(api, parent_tweet_id)` that takes in two parameters:\n- `api`: An instance of the Twitter API client.\n- `parent_tweet_id`: A string representing the ID of the parent tweet for which the status needs to be retrieved.\n\nThe function should perform the following tasks:\n1. Use the provided `api` instance to retrieve the status of the tweet with the ID `parent_tweet_id` using the `get_status` method. The `tweet_mode` parameter should be set to \"extended\" to ensure the full text of the tweet is retrieved.\n2. Handle any potential exceptions that may occur during the API call. If an exception occurs, the function should return the string \"Error: Unable to retrieve tweet status\".\n3. If the status is successfully retrieved, the function should return the full text of the tweet.\n\nAssume that the `api` instance and `parent_tweet_id` are valid inputs.\n\nExample:\nIf the parent tweet ID is \"123456789\" and the full text of the tweet is \"This is the full text of the tweet.\", the function should return \"This is the full text of the tweet.\".", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"123456789\"\n    },\n    \"expected_output\": \"This is the full text of the tweet.\",\n    \"test_aspect\": \"Successful retrieval of a valid tweet.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"987654321\"\n    },\n    \"expected_output\": \"Another example of tweet text.\",\n    \"test_aspect\": \"Successful retrieval of another valid tweet.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"000000000\"\n    },\n    \"expected_output\": \"Error: Unable to retrieve tweet status\",\n    \"test_aspect\": \"Handling of non-existing tweet ID.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"invalid_id_format\"\n    },\n    \"expected_output\": \"Error: Unable to retrieve tweet status\",\n    \"test_aspect\": \"Handling of invalid tweet ID format.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"api\": \"mock_api_instance_that_raises_exception\",\n      \"parent_tweet_id\": \"123456789\"\n    },\n    \"expected_output\": \"Error: Unable to retrieve tweet status\",\n    \"test_aspect\": \"Exception handling when API call fails.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"135792468\"\n    },\n    \"expected_output\": \"This is the extended text of a tweet with more details.\",\n    \"test_aspect\": \"Successful retrieval of a longer tweet.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"246813579\"\n    },\n    \"expected_output\": \"This tweet contains special characters! @#%^&*()\",\n    \"test_aspect\": \"Successful retrieval of a tweet with special characters.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"123456789\"\n    },\n    \"expected_output\": \"This is the full text of the tweet.\",\n    \"test_aspect\": \"Consistent output for repeated valid tweet ID calls.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"\"\n    },\n    \"expected_output\": \"Error: Unable to retrieve tweet status\",\n    \"test_aspect\": \"Handling of empty tweet ID input.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"api\": \"valid_api_instance\",\n      \"parent_tweet_id\": \"12345678901234567890\"  // Assumed valid long ID\n    },\n    \"expected_output\": \"Retrieving tweet text for very long tweet ID.\",\n    \"test_aspect\": \"Handling of unusually long tweet ID.\"\n  }\n}\n```"}
{"index": 24058, "preference": "functionality", "prompt": "You are tasked with creating a WebSocket-based pub/sub system using FastAPI and asyncio. Your goal is to implement a simple chat application where clients can connect to a WebSocket endpoint, subscribe to a specific topic, and receive messages published to that topic.\n\nYou are provided with a code snippet that sets up the FastAPI application and the WebSocket pub/sub endpoint. Your task is to complete the implementation by adding the necessary WebSocket route handlers for subscribing to topics and publishing messages to those topics.\n\nYour implementation should include the following:\n1. Define a WebSocket route `/ws` that handles incoming WebSocket connections.\n2. Implement a subscription mechanism where clients can send a JSON message to subscribe to a specific topic.\n3. Handle incoming messages from clients and publish them to the appropriate topic so that all subscribed clients receive the message.\n\nYou can assume the existence of a `PubSubEndpoint` class that provides the necessary methods for managing subscriptions and publishing messages.\n\n```python\nfrom fastapi_websocket_pubsub import PubSubEndpoint\nimport asyncio\nimport os\nfrom starlette.websockets import WebSocket\nimport uvicorn\nfrom fastapi import FastAPI\nfrom fastapi.routing import APIRouter\n\nPORT = int(os.environ.get(\"PORT\") or \"8000\")\n\napp = FastAPI()\nrouter = APIRouter()\npubsub = PubSubEndpoint()\n\n@router.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        try:\n            message = json.loads(data)\n            if message.get(\"action\") == \"subscribe\":\n                topic = message.get(\"topic\")\n                pubsub.subscribe(topic, websocket)\n            elif message.get(\"action\") == \"publish\":\n                topic = message.get(\"topic\")\n                payload = message.get(\"payload\")\n                pubsub.publish(topic, payload)\n        except json.JSONDecodeError:\n            pass\n\napp.include_router(router)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=PORT)\n```", "test_cases": "{\n  \"test_case1\": {\n    \"input\": '{\"action\": \"subscribe\", \"topic\": \"news\"}',\n    \"expected_output\": \"Client subscribed to topic 'news'.\",\n    \"test_aspect\": \"Verify that a client can successfully subscribe to a topic.\"\n  },\n  \"test_case2\": {\n    \"input\": '{\"action\": \"publish\", \"topic\": \"news\", \"payload\": \"Breaking News!\"}',\n    \"expected_output\": \"All clients subscribed to 'news' should receive 'Breaking News!'.\",\n    \"test_aspect\": \"Check that published messages are sent to all subscribed clients correctly.\"\n  },\n  \"test_case3\": {\n    \"input\": '{\"action\": \"subscribe\", \"topic\": \"sports\"}',\n    \"expected_output\": \"Client subscribed to topic 'sports'.\",\n    \"test_aspect\": \"Ensure multiple subscriptions can occur without issue.\"\n  },\n  \"test_case4\": {\n    \"input\": '{\"action\": \"publish\", \"topic\": \"sports\", \"payload\": \"Sports Update!\"}',\n    \"expected_output\": \"All clients subscribed to 'sports' should receive 'Sports Update!'.\",\n    \"test_aspect\": \"Validate that publish messages reach all clients for different topics.\"\n  },\n  \"test_case5\": {\n    \"input\": '{\"action\": \"subscribe\", \"topic\": \"\"}',\n    \"expected_output\": \"Error: Topic cannot be empty.\",\n    \"test_aspect\": \"Test rejection of empty topic subscriptions.\"\n  },\n  \"test_case6\": {\n    \"input\": '{\"action\": \"publish\", \"topic\": \"news\", \"payload\": \"\"}',\n    \"expected_output\": \"Error: Payload cannot be empty.\",\n    \"test_aspect\": \"Test rejection of publishing empty payloads.\"\n  },\n  \"test_case7\": {\n    \"input\": '{\"action\": \"subscribe\", \"topic\": \"tech\"}',\n    \"expected_output\": \"Client subscribed to topic 'tech'.\",\n    \"test_aspect\": \"Verify that subscribing to new topics works concurrently.\"\n  },\n  \"test_case8\": {\n    \"input\": '{\"action\": \"publish\", \"topic\": \"tech\", \"payload\": \"Tech News!\"}',\n    \"expected_output\": \"All clients subscribed to 'tech' should receive 'Tech News!'.\",\n    \"test_aspect\": \"Check that messages are correctly delivered to multiple topics.\"\n  },\n  \"test_case9\": {\n    \"input\": '{\"action\": \"subscribe\", \"topic\": \"invalid_topic\"}',\n    \"expected_output\": \"Client subscribed to topic 'invalid_topic'.\",\n    \"test_aspect\": \"Ensure that subscription to any topic (valid or invalid) can occur.\"\n  },\n  \"test_case10\": {\n    \"input\": '{\"action\": \"unknown_action\"}',\n    \"expected_output\": \"Error: Unknown action.\",\n    \"test_aspect\": \"Test system's handling of undefined actions.\"\n  }\n}"}
{"index": 3749, "preference": "functionality", "prompt": "You are given a set of integers and are required to implement a class that supports two operations: \n1. `addNumber(int num)`: Add a new integer to the set.\n2. `getMedian()`: Return the median of the set of integers.\n\nThe median of a set of numbers is the middle number when the numbers are arranged in ascending order. If the set has an odd number of elements, the median is the middle number. If the set has an even number of elements, the median is the average of the two middle numbers.\n\nYour task is to implement the `MedianFinder` class with the following methods:\n- `MedianFinder()`: Initializes the MedianFinder object.\n- `void addNumber(int num)`: Adds the integer num from the data stream to the set.\n- `double findMedian()`: Returns the median of all elements in the set.\n\nYou need to implement the `MedianFinder` class and its methods to support the above operations efficiently.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(1); mf.addNumber(2); mf.findMedian();\",\n    \"expected_output\": \"1.5\",\n    \"test_aspect\": \"Basic functionality with two numbers - checking median calculation.\"\n  },\n  \"test_case2\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(3); mf.addNumber(1); mf.addNumber(2); mf.findMedian();\",\n    \"expected_output\": \"2.0\",\n    \"test_aspect\": \"Median with odd number of elements added out of order - checking proper sorting.\"\n  },\n  \"test_case3\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(5); mf.addNumber(3); mf.addNumber(8); mf.addNumber(7); mf.findMedian();\",\n    \"expected_output\": \"6.0\",\n    \"test_aspect\": \"Median with an even number of elements - confirming average calculation.\"\n  },\n  \"test_case4\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(10); mf.addNumber(20); mf.addNumber(30); mf.addNumber(40); mf.addNumber(50); mf.findMedian();\",\n    \"expected_output\": \"30.0\",\n    \"test_aspect\": \"Median with larger set of numbers - ensuring correct handling of larger values.\"\n  },\n  \"test_case5\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(-1); mf.addNumber(-2); mf.addNumber(-3); mf.findMedian();\",\n    \"expected_output\": \"-2.0\",\n    \"test_aspect\": \"Negative numbers - checking median calculation with negative inputs.\"\n  },\n  \"test_case6\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(1); mf.addNumber(2); mf.addNumber(3); mf.addNumber(4); mf.addNumber(5); mf.addNumber(6); mf.findMedian();\",\n    \"expected_output\": \"3.5\",\n    \"test_aspect\": \"Even count of sequential numbers - verifying median calculation with consecutive integers.\"\n  },\n  \"test_case7\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(10); mf.addNumber(20); mf.addNumber(30); mf.addNumber(25); mf.addNumber(15); mf.findMedian();\",\n    \"expected_output\": \"20.0\",\n    \"test_aspect\": \"Mixed insertion order with an even count - checking median accuracy after random additions.\"\n  },\n  \"test_case8\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(2); mf.addNumber(1); mf.addNumber(3); mf.addNumber(4); mf.addNumber(5); mf.addNumber(6); mf.addNumber(7); mf.addNumber(8); mf.findMedian();\",\n    \"expected_output\": \"4.5\",\n    \"test_aspect\": \"Large set with mixed order - confirming median calculation for a broader range.\"\n  },\n  \"test_case9\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.addNumber(3); mf.addNumber(1); mf.findMedian(); mf.addNumber(2); mf.findMedian();\",\n    \"expected_output\": \"2.0\",\n    \"test_aspect\": \"Dynamic median retrieval after inserts - ensuring the state is maintained correctly.\"\n  },\n  \"test_case10\": {\n    \"input\": \"MedianFinder mf = new MedianFinder(); mf.findMedian();\",\n    \"expected_output\": \"0.0\",\n    \"test_aspect\": \"Median retrieval from an empty set - confirming behavior on no data.\"\n  }\n}\n```"}
{"index": 4192, "preference": "functionality", "prompt": "You are tasked with implementing a logging system in Python that supports different log levels and corresponding colored output. The provided code snippet shows a partial implementation of a Logger class with methods for printing log messages at different levels (info, debug, and blue). Each method checks the log level and prints the log message in a specific color if the current log level is equal to or higher than the level of the log message.\n\nYour task is to complete the Logger class by implementing the missing parts and adding support for additional log levels and colors. You should also write a method to set the log level and a method to clear the log messages.\n\nComplete the Logger class with the following requirements:\n1. Add support for log levels: ERROR, WARNING, INFO, DEBUG, and TRACE.\n2. Define the colors for each log level as follows:\n   - ERROR: Red\n   - WARNING: Magenta\n   - INFO: Green\n   - DEBUG: Yellow\n   - TRACE: Cyan\n3. Implement a method `set_level(level)` to set the log level.\n4. Implement a method `clear_logs()` to clear the log messages.\n\nYour implementation should ensure that log messages are printed only if the current log level is equal to or higher than the level of the log message.\n\nComplete the Logger class based on the given requirements and ensure that the log messages are printed in the specified colors.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"level\": \"ERROR\", \"message\": \"This is an error message.\"},\n    \"expected_output\": \"\\033[91mThis is an error message.\\033[0m\",\n    \"test_aspect\": \"Testing ERROR log output at ERROR level\"\n  },\n  \"test_case2\": {\n    \"input\": {\"level\": \"WARNING\", \"message\": \"This is a warning message.\"},\n    \"expected_output\": \"\\033[95mThis is a warning message.\\033[0m\",\n    \"test_aspect\": \"Testing WARNING log output at WARNING level\"\n  },\n  \"test_case3\": {\n    \"input\": {\"level\": \"INFO\", \"message\": \"This is an info message.\"},\n    \"expected_output\": \"\\033[92mThis is an info message.\\033[0m\",\n    \"test_aspect\": \"Testing INFO log output at INFO level\"\n  },\n  \"test_case4\": {\n    \"input\": {\"level\": \"DEBUG\", \"message\": \"This is a debug message.\"},\n    \"expected_output\": \"\\033[93mThis is a debug message.\\033[0m\",\n    \"test_aspect\": \"Testing DEBUG log output at DEBUG level\"\n  },\n  \"test_case5\": {\n    \"input\": {\"level\": \"TRACE\", \"message\": \"This is a trace message.\"},\n    \"expected_output\": \"\\033[96mThis is a trace message.\\033[0m\",\n    \"test_aspect\": \"Testing TRACE log output at TRACE level\"\n  },\n  \"test_case6\": {\n    \"input\": {\"level\": \"INFO\", \"message\": \"This is an info message.\"},\n    \"set_level\": \"WARNING\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Testing INFO log output that should not print at WARNING level\"\n  },\n  \"test_case7\": {\n    \"input\": {\"level\": \"DEBUG\", \"message\": \"This is a debug message.\"},\n    \"set_level\": \"ERROR\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Testing DEBUG log output that should not print at ERROR level\"\n  },\n  \"test_case8\": {\n    \"input\": {},\n    \"set_level\": \"WARNING\",\n    \"clear_logs\": true,\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Testing clear_logs method after setting log level\"\n  },\n  \"test_case9\": {\n    \"input\": {\"message\": \"This is a test after clearing logs.\"},\n    \"set_level\": \"INFO\",\n    \"expected_output\": \"\\033[92mThis is a test after clearing logs.\\033[0m\",\n    \"test_aspect\": \"Verifying log output after clearing logs and setting a new level\"\n  },\n  \"test_case10\": {\n    \"input\": {\"level\": \"TRACE\", \"message\": \"This should print at TRACE level.\"},\n    \"set_level\": \"TRACE\",\n    \"expected_output\": \"\\033[96mThis should print at TRACE level.\\033[0m\",\n    \"test_aspect\": \"Testing TRACE log output at TRACE level after setting level\"\n  }\n}\n```"}
{"index": 23796, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that manipulates a spreadsheet-like data structure. The function should take a list of values and insert them into a specific column of the spreadsheet. The column is represented by a letter, and the values should be inserted starting from a specified row number. The function should return the updated spreadsheet data structure.\n\nYou are given the following code snippet as a starting point:\n\n```python\nbody = { 'values': values }\n\ncol = 'C'\nrow = 1\n```\n\nYou need to write a function `insert_values_into_column` that takes the following parameters:\n- `body` (dict): A dictionary representing the spreadsheet data structure. The 'values' key contains a list of lists representing the rows and columns of the spreadsheet.\n- `col` (str): A single uppercase letter representing the column where the values should be inserted.\n- `row` (int): The row number where the insertion of values should start.\n\nThe function should insert the values from the `values` list into the specified column, starting from the given row number. The function should then return the updated `body` dictionary.\n\nFor example, given the following input:\n```python\nbody = { 'values': [['A1', 'B1', 'C1'], ['A2', 'B2', 'C2']] }\ncol = 'C'\nrow = 3\nvalues = ['C3', 'C4']\n```\nThe function should return:\n```python\n{ 'values': [['A1', 'B1', 'C1'], ['A2', 'B2', 'C2'], ['C3', '', ''], ['C4', '', '']] }\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1', 'B1', 'C1'], ['A2', 'B2', 'C2']] },\n      \"col\": \"C\",\n      \"row\": 3,\n      \"values\": ['C3', 'C4']\n    },\n    \"expected_output\": { \"values\": [['A1', 'B1', 'C1'], ['A2', 'B2', 'C2'], ['C3', '', ''], ['C4', '', '']] },\n    \"test_aspect\": \"Insertion of values into a specified column starting from a given row.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1', 'B1'], ['A2', 'B2']] },\n      \"col\": \"B\",\n      \"row\": 1,\n      \"values\": ['B1_new', 'B2_new']\n    },\n    \"expected_output\": { \"values\": [['A1', 'B1_new'], ['A2', 'B2_new']] },\n    \"test_aspect\": \"Insertion of values into the first row of an existing column.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1', 'B1', 'C1']] },\n      \"col\": \"A\",\n      \"row\": 2,\n      \"values\": ['A2']\n    },\n    \"expected_output\": { \"values\": [['A1', 'B1', 'C1'], ['A2', '', '']] },\n    \"test_aspect\": \"Insertion of values into a column with only one existing row.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"body\": { \"values\": [] },\n      \"col\": \"D\",\n      \"row\": 1,\n      \"values\": ['D1', 'D2']\n    },\n    \"expected_output\": { \"values\": [['', '', '', 'D1'], ['', '', '', 'D2']] },\n    \"test_aspect\": \"Handling empty spreadsheet and inserting values into the first row.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1']] },\n      \"col\": \"B\",\n      \"row\": 3,\n      \"values\": ['B3']\n    },\n    \"expected_output\": { \"values\": [['A1', ''], ['', '', 'B3']] },\n    \"test_aspect\": \"Insertion of values into a column with existing single row and empty cells.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1', 'B1', 'C1'], ['A2', 'B2', 'C2']] },\n      \"col\": \"C\",\n      \"row\": 0,\n      \"values\": ['C0']\n    },\n    \"expected_output\": { \"values\": [['C0', '', ''], ['A1', 'B1', 'C1'], ['A2', 'B2', 'C2']] },\n    \"test_aspect\": \"Handling insertion at row index 0, adding a new first row.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1']] },\n      \"col\": \"C\",\n      \"row\": 2,\n      \"values\": []\n    },\n    \"expected_output\": { \"values\": [['A1', '', '']] },\n    \"test_aspect\": \"Insertion of an empty values list into a column.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1', 'B1'], ['A2', 'B2']] },\n      \"col\": \"A\",\n      \"row\": 2,\n      \"values\": ['A2_new', 'A3_new']\n    },\n    \"expected_output\": { \"values\": [['A1', 'B1'], ['A2_new', 'B2'], ['A3_new', '']] },\n    \"test_aspect\": \"Overwriting the values in the A column while retaining other data.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1', 'B1'], ['A2', 'B2']] },\n      \"col\": \"E\",\n      \"row\": 2,\n      \"values\": ['E2']\n    },\n    \"expected_output\": { \"values\": [['A1', 'B1', '', '', ''], ['A2', 'B2', '', '', 'E2']] },\n    \"test_aspect\": \"Inserting values into a non-existing column, should create new cells.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"body\": { \"values\": [['A1', 'B1', 'C1']] },\n      \"col\": \"C\",\n      \"row\": 1,\n      \"values\": ['C2', 'C3']\n    },\n    \"expected_output\": { \"values\": [['C2', 'B1', 'C1'], ['C3', '', '']] },\n    \"test_aspect\": \"Insertion at the beginning of the column overwriting existing values.\"\n  }\n}\n```"}
{"index": 25593, "preference": "functionality", "prompt": "You are tasked with implementing a state machine for processing orders in an e-commerce system. The state machine has five states: PENDING_CONFIRM, PENDING_CANCEL, CANCELED, CONFIRMED, and FAILED, represented by the integer values 1, 2, 3, 4, and 5 respectively. The transitions between these states are governed by specific rules. \n\nYour task is to write a function that takes the current state and an event as input and returns the new state based on the transition rules. The transition rules are as follows:\n- If the current state is PENDING_CONFIRM and the event is \"confirm\", the new state is CONFIRMED.\n- If the current state is PENDING_CONFIRM and the event is \"cancel\", the new state is PENDING_CANCEL.\n- If the current state is PENDING_CANCEL and the event is \"confirm\", the new state is FAILED.\n- If the current state is PENDING_CANCEL and the event is \"cancel\", the new state is CANCELED.\n- If the current state is CONFIRMED or CANCELED, any event should keep the state unchanged.\n- If the current state is FAILED, any event should keep the state unchanged.\n\nWrite a function `process_order_state(current_state, event)` that takes the current state and event as input and returns the new state based on the transition rules.\n\nExample:\n```\nprocess_order_state(PENDING_CONFIRM, \"confirm\") => CONFIRMED\nprocess_order_state(PENDING_CONFIRM, \"cancel\") => PENDING_CANCEL\nprocess_order_state(PENDING_CANCEL, \"confirm\") => FAILED\nprocess_order_state(PENDING_CANCEL, \"cancel\") => CANCELED\nprocess_order_state(CONFIRMED, \"any_event\") => CONFIRMED\nprocess_order_state(CANCELED, \"any_event\") => CANCELED\nprocess_order_state(FAILED, \"any_event\") => FAILED\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"current_state\": 1,\n      \"event\": \"confirm\"\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"Transition from PENDING_CONFIRM to CONFIRMED\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"current_state\": 1,\n      \"event\": \"cancel\"\n    },\n    \"expected_output\": 2,\n    \"test_aspect\": \"Transition from PENDING_CONFIRM to PENDING_CANCEL\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"current_state\": 2,\n      \"event\": \"confirm\"\n    },\n    \"expected_output\": 5,\n    \"test_aspect\": \"Transition from PENDING_CANCEL to FAILED\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"current_state\": 2,\n      \"event\": \"cancel\"\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"Transition from PENDING_CANCEL to CANCELED\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"current_state\": 4,\n      \"event\": \"any_event\"\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"State remains CONFIRMED with any event\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"current_state\": 3,\n      \"event\": \"any_event\"\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"State remains CANCELED with any event\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"current_state\": 5,\n      \"event\": \"any_event\"\n    },\n    \"expected_output\": 5,\n    \"test_aspect\": \"State remains FAILED with any event\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"current_state\": 1,\n      \"event\": \"invalid_event\"\n    },\n    \"expected_output\": 1,\n    \"test_aspect\": \"State remains PENDING_CONFIRM with invalid event\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"current_state\": 2,\n      \"event\": \"invalid_event\"\n    },\n    \"expected_output\": 2,\n    \"test_aspect\": \"State remains PENDING_CANCEL with invalid event\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"current_state\": 4,\n      \"event\": \"cancel\"\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"State remains CONFIRMED with cancel event\"\n  }\n}\n```"}
{"index": 26402, "preference": "functionality", "prompt": "You are tasked with implementing a function that validates a given password based on certain criteria. The function should return True if the password meets all the criteria, and False otherwise. The criteria for a valid password are as follows:\n1. The password must be at least 8 characters long.\n2. The password must contain at least one uppercase letter, one lowercase letter, and one digit.\n3. The password must not contain any spaces.\n\nYou are provided with a partial code snippet for the function, which includes a try-except block. Your task is to complete the function by adding the necessary code inside the try block to validate the password based on the given criteria.\n\nCode snippet for the function:\n```python\ndef validate_password(password):\n    try:\n        # Add code here to validate the password based on the given criteria\n        return True\n    except AssertionError as ex:\n        print(ex)\n        return False\n```\n\nYour task is to complete the `validate_password` function by adding the necessary code inside the try block to validate the password based on the given criteria. Ensure that the function returns True if the password meets all the criteria, and False otherwise.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"abc123\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Password length is less than 8 characters.\"\n  },\n  \"test_case2\": {\n    \"input\": \"abcdefg1\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Password does not contain an uppercase letter.\"\n  },\n  \"test_case3\": {\n    \"input\": \"ABCDEFG1\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Password does not contain a lowercase letter.\"\n  },\n  \"test_case4\": {\n    \"input\": \"Abcdefgh\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Password does not contain a digit.\"\n  },\n  \"test_case5\": {\n    \"input\": \"Abcdefg1\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Password meets all criteria.\"\n  },\n  \"test_case6\": {\n    \"input\": \"Abc dEf1\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Password contains a space.\"\n  },\n  \"test_case7\": {\n    \"input\": \"12345678\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Password does not contain uppercase or lowercase letters.\"\n  },\n  \"test_case8\": {\n    \"input\": \"Valid1Password\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Password meets all criteria, length is greater than 8.\"\n  },\n  \"test_case9\": {\n    \"input\": \"Uppercase1\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Password does not contain a lowercase letter.\"\n  },\n  \"test_case10\": {\n    \"input\": \"lowercase123\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Password does not contain an uppercase letter.\"\n  }\n}\n```"}
{"index": 31956, "preference": "functionality", "prompt": "You are given a Python function that takes two integers `num` and `den` as input. The function is intended to perform a specific operation and return a list containing the result of the operation. However, the code snippet provided is incomplete and contains some missing parts. Your task is to complete the function based on the given code snippet and the following context.\n\nThe function is intended to perform the following operation:\n1. Divide the value of `num` by the greatest common divisor (GCD) of `num` and `den`, and update the value of `num` with the result of this division.\n2. If the division is possible (i.e., `den` is not zero), return a list containing the updated value of `num` and the original value of `den`.\n3. If the division is not possible (i.e., `den` is zero), return a list containing the string \"Impossible\".\n\nYour task is to complete the given function to achieve the intended operation and handle the possible scenarios as described above.\n\nComplete the function:\n```python\ndef perform_operation(num, den):\n    # Your code here\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"perform_operation(10, 5)\",\n    \"expected_output\": \"[2, 5]\",\n    \"test_aspect\": \"Basic division with non-zero denominator\"\n  },\n  \"test_case2\": {\n    \"input\": \"perform_operation(20, 0)\",\n    \"expected_output\": \"[\\\"Impossible\\\"]\",\n    \"test_aspect\": \"Division by zero handling\"\n  },\n  \"test_case3\": {\n    \"input\": \"perform_operation(0, 5)\",\n    \"expected_output\": \"[0, 5]\",\n    \"test_aspect\": \"Zero numerator with non-zero denominator\"\n  },\n  \"test_case4\": {\n    \"input\": \"perform_operation(15, 10)\",\n    \"expected_output\": \"[3, 10]\",\n    \"test_aspect\": \"Division with GCD greater than 1\"\n  },\n  \"test_case5\": {\n    \"input\": \"perform_operation(7, 1)\",\n    \"expected_output\": \"[7, 1]\",\n    \"test_aspect\": \"Numerator greater than denominator with GCD of 1\"\n  },\n  \"test_case6\": {\n    \"input\": \"perform_operation(1, 1)\",\n    \"expected_output\": \"[1, 1]\",\n    \"test_aspect\": \"Both numerator and denominator are 1\"\n  },\n  \"test_case7\": {\n    \"input\": \"perform_operation(-10, 5)\",\n    \"expected_output\": \"[-2, 5]\",\n    \"test_aspect\": \"Negative numerator test case\"\n  },\n  \"test_case8\": {\n    \"input\": \"perform_operation(-20, 0)\",\n    \"expected_output\": \"[\\\"Impossible\\\"]\",\n    \"test_aspect\": \"Negative numerator with zero denominator\"\n  },\n  \"test_case9\": {\n    \"input\": \"perform_operation(100, 25)\",\n    \"expected_output\": \"[4, 25]\",\n    \"test_aspect\": \"Larger numbers with GCD greater than 1\"\n  },\n  \"test_case10\": {\n    \"input\": \"perform_operation(9, -3)\",\n    \"expected_output\": \"[-3, -3]\",\n    \"test_aspect\": \"Negative denominator test case\"\n  }\n}\n```"}
{"index": 1324, "preference": "functionality", "prompt": "You are tasked with implementing a C++ class that simulates a simple bank account. The class should have the following functionalities:\n1. Ability to set the account holder's name and initial balance.\n2. Deposit funds into the account.\n3. Withdraw funds from the account (if sufficient balance is available).\n4. Get the current balance of the account.\n\nYour task is to create a C++ class named `BankAccount` with the necessary member functions and variables to achieve the above functionalities. You should also include a main function that demonstrates the usage of the `BankAccount` class by creating an instance of the class, performing various operations, and displaying the results.\n\nYour `BankAccount` class should have the following public member functions:\n- `BankAccount(const std::string& name, double initialBalance)`: A constructor that takes the account holder's name and initial balance as parameters.\n- `void deposit(double amount)`: A function to deposit the specified amount into the account.\n- `bool withdraw(double amount)`: A function to withdraw the specified amount from the account. It should return true if the withdrawal is successful, and false if there are insufficient funds.\n- `double getBalance() const`: A function to retrieve the current balance of the account.\n\nYour main function should demonstrate the usage of the `BankAccount` class by creating an instance of the class, performing deposit and withdrawal operations, and displaying the account balance after each operation.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"BankAccount account(\\\"John Doe\\\", 1000.0); account.getBalance();\",\n    \"expected_output\": \"1000.0\",\n    \"test_aspect\": \"Verify the initial balance is set correctly upon account creation.\"\n  },\n  \"test_case2\": {\n    \"input\": \"BankAccount account(\\\"Jane Doe\\\", 500.0); account.deposit(200.0); account.getBalance();\",\n    \"expected_output\": \"700.0\",\n    \"test_aspect\": \"Check that the deposit function correctly increases the balance.\"\n  },\n  \"test_case3\": {\n    \"input\": \"BankAccount account(\\\"Alice Smith\\\", 300.0); account.withdraw(100.0); account.getBalance();\",\n    \"expected_output\": \"200.0\",\n    \"test_aspect\": \"Confirm that withdrawing a valid amount decreases the balance appropriately.\"\n  },\n  \"test_case4\": {\n    \"input\": \"BankAccount account(\\\"Bob Brown\\\", 150.0); bool result = account.withdraw(200.0); result; account.getBalance();\",\n    \"expected_output\": \"false, 150.0\",\n    \"test_aspect\": \"Ensure withdrawal fails and balance remains unchanged when insufficient funds are available.\"\n  },\n  \"test_case5\": {\n    \"input\": \"BankAccount account(\\\"Charlie Green\\\", 0.0); account.deposit(50.0); account.getBalance();\",\n    \"expected_output\": \"50.0\",\n    \"test_aspect\": \"Check deposit functionality when starting balance is zero.\"\n  },\n  \"test_case6\": {\n    \"input\": \"BankAccount account(\\\"Diana Prince\\\", 800.0); account.withdraw(800.0); account.getBalance();\",\n    \"expected_output\": \"0.0\",\n    \"test_aspect\": \"Verify that withdrawing the entire balance results in a zero balance.\"\n  },\n  \"test_case7\": {\n    \"input\": \"BankAccount account(\\\"Ethan Hunt\\\", 1000.0); account.deposit(-200.0); account.getBalance();\",\n    \"expected_output\": \"1000.0\",\n    \"test_aspect\": \"Test that depositing a negative amount does not change the balance.\"\n  },\n  \"test_case8\": {\n    \"input\": \"BankAccount account(\\\"Fiona Gallagher\\\", 500.0); account.withdraw(50.0); account.withdraw(100.0); account.getBalance();\",\n    \"expected_output\": \"350.0\",\n    \"test_aspect\": \"Ensure multiple withdrawals correctly deduct from the account balance.\"\n  },\n  \"test_case9\": {\n    \"input\": \"BankAccount account(\\\"George Costanza\\\", 0.0); account.withdraw(10.0); account.getBalance();\",\n    \"expected_output\": \"0.0\",\n    \"test_aspect\": \"Check that attempting to withdraw from an empty account does not change the balance.\"\n  },\n  \"test_case10\": {\n    \"input\": \"BankAccount account(\\\"Hannah Baker\\\", 250.0); account.deposit(50.0); account.withdraw(100.0); account.getBalance();\",\n    \"expected_output\": \"200.0\",\n    \"test_aspect\": \"Verify that after a deposit and a withdrawal, the balance is updated correctly.\"\n  }\n}\n```"}
{"index": 31304, "preference": "functionality", "prompt": "You are tasked with implementing a Python class that manages authentication tokens for a Flask-based remote application. The class, `FlaskRemoteApp`, is responsible for handling request tokens and updating the authentication tokens. Your task is to complete the implementation of the `FlaskRemoteApp` class by adding the necessary methods and attributes.\n\nThe class should have the following attributes:\n- `token`: A string representing the authentication token.\n\nThe class should have the following methods:\n- `__init__(self, fetch_request_token, save_request_token)`: A constructor that initializes the `fetch_request_token` and `save_request_token` functions.\n- `_on_update_token(self, token, refresh_token=None, access_token=None)`: A method that updates the authentication token and optionally the refresh token and access token.\n\nYour task is to complete the implementation of the `FlaskRemoteApp` class by adding the necessary methods and attributes to manage authentication tokens.\n\nComplete the implementation of the `FlaskRemoteApp` class according to the given requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"fetch_request_token\": \"dummy_fetch_function\",\n      \"save_request_token\": \"dummy_save_function\"\n    },\n    \"expected_output\": \"FlaskRemoteApp instance created with token initialized to None.\",\n    \"test_aspect\": \"Initialization of class and default token value\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"fetch_request_token\": \"dummy_fetch_function\",\n      \"save_request_token\": \"dummy_save_function\"\n    },\n    \"expected_output\": {\n      \"token\": null\n    },\n    \"test_aspect\": \"Initial state of the token after class instantiation\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"token\": \"new_token_value\",\n      \"refresh_token\": \"new_refresh_token\",\n      \"access_token\": \"new_access_token\"\n    },\n    \"expected_output\": {\n      \"token\": \"new_token_value\",\n      \"refresh_token\": \"new_refresh_token\",\n      \"access_token\": \"new_access_token\"\n    },\n    \"test_aspect\": \"_on_update_token updates token, refresh_token, and access_token\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"token\": \"just_a_token\",\n      \"refresh_token\": null,\n      \"access_token\": null\n    },\n    \"expected_output\": {\n      \"token\": \"just_a_token\",\n      \"refresh_token\": null,\n      \"access_token\": null\n    },\n    \"test_aspect\": \"_on_update_token updates token with no refresh or access token\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"token\": null,\n      \"refresh_token\": null,\n      \"access_token\": null\n    },\n    \"expected_output\": {\n      \"token\": null,\n      \"refresh_token\": null,\n      \"access_token\": null\n    },\n    \"test_aspect\": \"Handles updating with all None values\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"token\": \"token1\",\n      \"refresh_token\": \"refresh1\",\n      \"access_token\": \"access1\"\n    },\n    \"expected_output\": {\n      \"token\": \"token1\",\n      \"refresh_token\": \"refresh1\",\n      \"access_token\": \"access1\"\n    },\n    \"test_aspect\": \"Check if multiple update calls maintain state correctly\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"token\": \"token2\",\n      \"refresh_token\": \"refresh2\",\n      \"access_token\": \"access2\"\n    },\n    \"expected_output\": {\n      \"token\": \"token2\",\n      \"refresh_token\": \"refresh2\",\n      \"access_token\": \"access2\"\n    },\n    \"test_aspect\": \"Ensure state changes reflect correctly after updates\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"token\": \"token3\"\n    },\n    \"expected_output\": {\n      \"token\": \"token3\",\n      \"refresh_token\": null,\n      \"access_token\": null\n    },\n    \"test_aspect\": \"Update token with only token provided\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"token\": \"another_token\"\n    },\n    \"expected_output\": {\n      \"token\": \"another_token\",\n      \"refresh_token\": null,\n      \"access_token\": null\n    },\n    \"test_aspect\": \"Test token update without refresh or access tokens\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"token\": \"\",\n      \"refresh_token\": \"\",\n      \"access_token\": \"\"\n    },\n    \"expected_output\": {\n      \"token\": \"\",\n      \"refresh_token\": \"\",\n      \"access_token\": \"\"\n    },\n    \"test_aspect\": \"Check if empty strings are handled correctly\"\n  }\n}\n```"}
{"index": 34961, "preference": "functionality", "prompt": "You are tasked with implementing a custom warning system for a machine learning library. The library needs to handle convergence issues that may arise during the training of models. To achieve this, you are required to create a custom warning class called `ConvergenceWarning` that captures convergence problems.\n\nYour task is to implement the `ConvergenceWarning` class and demonstrate its usage in a simple example.\n\nYour implementation should include the following:\n- Define a class `ConvergenceWarning` that inherits from `UserWarning`.\n- The `ConvergenceWarning` class should have a docstring explaining its purpose.\n- Demonstrate the usage of the `ConvergenceWarning` class by raising it in a sample function.\n\nYour solution should be in Python.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"ConvergenceWarning.__doc__\",\n    \"expected_output\": \"A warning for convergence issues during model training.\",\n    \"test_aspect\": \"Docstring presence and content\"\n  },\n  \"test_case2\": {\n    \"input\": \"issubclass(ConvergenceWarning, UserWarning)\",\n    \"expected_output\": \"True\",\n    \"test_aspect\": \"Inheritance from UserWarning\"\n  },\n  \"test_case3\": {\n    \"input\": \"raise ConvergenceWarning('Test warning')\",\n    \"expected_output\": \"ConvergenceWarning: Test warning\",\n    \"test_aspect\": \"Raising the warning with a message\"\n  },\n  \"test_case4\": {\n    \"input\": \"warn = ConvergenceWarning('Warning raised')\\nprint(warn)\",\n    \"expected_output\": \"ConvergenceWarning: Warning raised\",\n    \"test_aspect\": \"Output format of raised warning\"\n  },\n  \"test_case5\": {\n    \"input\": \"try:\\n    raise ConvergenceWarning('Test warning')\\nexcept ConvergenceWarning as e:\\n    output = str(e)\",\n    \"expected_output\": \"Test warning\",\n    \"test_aspect\": \"Exception handling and message retrieval\"\n  },\n  \"test_case6\": {\n    \"input\": \"import warnings\\nwarnings.simplefilter('always')\\nwarnings.warn('Convergence issue', category=ConvergenceWarning)\",\n    \"expected_output\": \"ConvergenceWarning: Convergence issue\",\n    \"test_aspect\": \"Warning filter settings\"\n  },\n  \"test_case7\": {\n    \"input\": \"warnings.resetwarnings()\",\n    \"expected_output\": \"No Warning Output\",\n    \"test_aspect\": \"Warning reset functionality\"\n  },\n  \"test_case8\": {\n    \"input\": \"try:\\n    raise ConvergenceWarning()  # no message\\nexcept ConvergenceWarning as e:\\n    output = str(e)\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Handling of warning with no message\"\n  },\n  \"test_case9\": {\n    \"input\": \"def convergence_function():\\n    raise ConvergenceWarning('Convergence failed')\\nconvergence_function()\",\n    \"expected_output\": \"ConvergenceWarning: Convergence failed\",\n    \"test_aspect\": \"Function demonstrating the warning\"\n  },\n  \"test_case10\": {\n    \"input\": \"warnings.warn('Example warning', category=ConvergenceWarning)\",\n    \"expected_output\": \"ConvergenceWarning: Example warning\",\n    \"test_aspect\": \"General warning usage\"\n  }\n}\n```"}
{"index": 32834, "preference": "functionality", "prompt": "You are tasked with creating a Python GUI application using the wxPython library. Your application should have a dialog window with several widgets, including a multiline text control, static text labels, and a choice control. Additionally, you need to bind an event to the choice control to handle user interactions.\n\nYour task is to complete the implementation of the `MyDialog` class by adding the necessary code to set properties and layout for the widgets, as well as to bind an event to the choice control.\n\nComplete the following tasks:\n1. Set the title of the dialog window to \"Calculate Add/Sub to New Tab\".\n2. Set the initial selection of the `ChoiceLoop` control to the first item.\n3. Bind the `on_loop` method to the `EVT_CHOICE` event of the `ChoiceLoop` control.\n\nYour solution should include the necessary code to achieve the tasks within the `MyDialog` class.\n\n```python\nimport wx\n\nclass MyDialog(wx.Dialog):\n    def __init__(self, *args, **kwds):\n        # Initialize the dialog window\n        super(MyDialog, self).__init__(*args, **kwds)\n\n        # Create widgets\n        self.TextComment = wx.TextCtrl(self, wx.ID_ANY, \"\", style=wx.TE_MULTILINE)\n        self.LabelStatus = wx.StaticText(self, wx.ID_ANY, \"Welcome\")\n        self.LabelOkCancelPlaceholder = wx.StaticText(self, wx.ID_ANY, \"LabelOkCancelPlaceholder\", style=wx.ALIGN_RIGHT)\n        self.ChoiceLoop = wx.Choice(self, wx.ID_ANY, choices=[\"Choice 1\", \"Choice 2\", \"Choice 3\"])\n\n        # Set properties and do layout\n        self.__set_properties()\n        self.__do_layout()\n\n        # Bind event\n        self.Bind(wx.EVT_CHOICE, self.on_loop, self.ChoiceLoop)\n\n    def __set_properties(self):\n        # Set the title of the dialog window\n        self.SetTitle(\"Calculate Add/Sub to New Tab\")\n        # Set the initial selection of the ChoiceLoop control\n        self.ChoiceLoop.SetSelection(0)\n\n    def __do_layout(self):\n        # Define the layout of the widgets\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.TextComment, 1, wx.EXPAND, 0)\n        sizer.Add(self.LabelStatus, 0, 0, 0)\n        sizer.Add(self.LabelOkCancelPlaceholder, 0, wx.ALIGN_RIGHT, 0)\n        sizer.Add(self.ChoiceLoop, 0, wx.EXPAND, 0)\n        self.SetSizer(sizer)\n        sizer.Fit(self)\n        self.Layout()\n\n    def on_loop(self, event):\n        # Event handler for the ChoiceLoop control\n        selected_choice = self.ChoiceLoop.GetString(self.ChoiceLoop.GetSelection())\n        print(f\"Selected choice: {selected_choice}\")\n\n# Create and show the dialog\nif __name__ == \"__main__\":\n    app = wx.App(False)\n    dialog = MyDialog(None, wx.ID_ANY, \"\")\n    dialog.ShowModal()\n    app.MainLoop()\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Open the dialog window.\",\n    \"expected_output\": \"Dialog window title is 'Calculate Add/Sub to New Tab'.\",\n    \"test_aspect\": \"Title setting of the dialog window.\"\n  },\n  \"test_case2\": {\n    \"input\": \"Initialize the dialog and check the ChoiceLoop control state.\",\n    \"expected_output\": \"The initial selection of ChoiceLoop is 'Choice 1'.\",\n    \"test_aspect\": \"Initial selection setting of the ChoiceLoop control.\"\n  },\n  \"test_case3\": {\n    \"input\": \"User selects 'Choice 2' from ChoiceLoop.\",\n    \"expected_output\": \"Prints 'Selected choice: Choice 2'.\",\n    \"test_aspect\": \"Event binding functionality for ChoiceLoop control.\"\n  },\n  \"test_case4\": {\n    \"input\": \"User selects 'Choice 3' from ChoiceLoop.\",\n    \"expected_output\": \"Prints 'Selected choice: Choice 3'.\",\n    \"test_aspect\": \"Event binding functionality and dynamic selection handling.\"\n  },\n  \"test_case5\": {\n    \"input\": \"Dialog is opened and the TextComment control is checked.\",\n    \"expected_output\": \"TextComment is displayed as a multiline text control.\",\n    \"test_aspect\": \"Configuration of the TextCtrl widget.\"\n  },\n  \"test_case6\": {\n    \"input\": \"Check the LabelStatus displayed on initialization.\",\n    \"expected_output\": \"LabelStatus displays 'Welcome'.\",\n    \"test_aspect\": \"Initialization and display of static text label.\"\n  },\n  \"test_case7\": {\n    \"input\": \"Check the LabelOkCancelPlaceholder control.\",\n    \"expected_output\": \"LabelOkCancelPlaceholder is displayed correctly.\",\n    \"test_aspect\": \"Verification of additional static text label.\"\n  },\n  \"test_case8\": {\n    \"input\": \"Check the overall layout of the widgets.\",\n    \"expected_output\": \"Widgets are arranged vertically in the dialog.\",\n    \"test_aspect\": \"Layout arrangement of the dialog.\"\n  },\n  \"test_case9\": {\n    \"input\": \"Resize the dialog window.\",\n    \"expected_output\": \"Widgets adjust appropriately without overflow.\",\n    \"test_aspect\": \"Responsiveness of the GUI layout on resize.\"\n  },\n  \"test_case10\": {\n    \"input\": \"Close the dialog without making a selection.\",\n    \"expected_output\": \"Dialog closes without error.\",\n    \"test_aspect\": \"Handling closing of the dialog.\"\n  }\n}\n```"}
{"index": 19933, "preference": "functionality", "prompt": "You are tasked with creating a Python program that processes a given text and performs natural language processing (NLP) tasks using the Natural Language Toolkit (nltk) library. Your program should tokenize the input text into individual words and then tag each word with its part of speech (POS) using the nltk library. Finally, the program should print the tokenized words and their corresponding POS tags.\n\nYour task is to complete the Python program by implementing the missing parts of the code. Specifically, you need to write a function that takes a sentence as input, tokenizes it, tags each token with its POS, and then prints the tokenized words and their POS tags.\n\nYour program should follow these steps:\n1. Tokenize the input sentence into individual words using the nltk library.\n2. Tag each token with its corresponding part of speech using the nltk library.\n3. Print the tokenized words and their corresponding POS tags.\n\nYour completed program should be able to process any given input sentence and produce the tokenized words along with their POS tags.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"The quick brown fox jumps over the lazy dog.\",\n    \"expected_output\": {\n      \"tokens\": [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"],\n      \"pos_tags\": [\"DT\", \"JJ\", \"JJ\", \"NN\", \"VBZ\", \"IN\", \"DT\", \"JJ\", \"NN\"]\n    },\n    \"test_aspect\": \"Basic sentence processing with common words.\"\n  },\n  \"test_case2\": {\n    \"input\": \"I love programming in Python.\",\n    \"expected_output\": {\n      \"tokens\": [\"I\", \"love\", \"programming\", \"in\", \"Python\"],\n      \"pos_tags\": [\"PRP\", \"VBP\", \"VBG\", \"IN\", \"NNP\"]\n    },\n    \"test_aspect\": \"Sentence with a personal statement and a programming language.\"\n  },\n  \"test_case3\": {\n    \"input\": \"What's the weather like today?\",\n    \"expected_output\": {\n      \"tokens\": [\"What\", \"'s\", \"the\", \"weather\", \"like\", \"today\"],\n      \"pos_tags\": [\"WP\", \"VBZ\", \"DT\", \"NN\", \"IN\", \"NN\"]\n    },\n    \"test_aspect\": \"Sentence with a contraction and a question.\"\n  },\n  \"test_case4\": {\n    \"input\": \"Python is great for data science.\",\n    \"expected_output\": {\n      \"tokens\": [\"Python\", \"is\", \"great\", \"for\", \"data\", \"science\"],\n      \"pos_tags\": [\"NNP\", \"VBZ\", \"JJ\", \"IN\", \"NNS\", \"NN\"]\n    },\n    \"test_aspect\": \"A positive statement about a programming language.\"\n  },\n  \"test_case5\": {\n    \"input\": \"\",\n    \"expected_output\": {\n      \"tokens\": [],\n      \"pos_tags\": []\n    },\n    \"test_aspect\": \"Empty input test case.\"\n  },\n  \"test_case6\": {\n    \"input\": \"12345 is a number.\",\n    \"expected_output\": {\n      \"tokens\": [\"12345\", \"is\", \"a\", \"number\"],\n      \"pos_tags\": [\"CD\", \"VBZ\", \"DT\", \"NN\"]\n    },\n    \"test_aspect\": \"Input containing digits and a basic statement.\"\n  },\n  \"test_case7\": {\n    \"input\": \"She quickly ran away.\",\n    \"expected_output\": {\n      \"tokens\": [\"She\", \"quickly\", \"ran\", \"away\"],\n      \"pos_tags\": [\"PRP\", \"RB\", \"VBD\", \"RB\"]\n    },\n    \"test_aspect\": \"Sentence with an adverb and a past tense verb.\"\n  },\n  \"test_case8\": {\n    \"input\": \"Can you help me?\",\n    \"expected_output\": {\n      \"tokens\": [\"Can\", \"you\", \"help\", \"me\"],\n      \"pos_tags\": [\"MD\", \"PRP\", \"VB\", \"PRP\"]\n    },\n    \"test_aspect\": \"Interrogative sentence asking for help.\"\n  },\n  \"test_case9\": {\n    \"input\": \"The cat sat on the mat.\",\n    \"expected_output\": {\n      \"tokens\": [\"The\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"],\n      \"pos_tags\": [\"DT\", \"NN\", \"VBD\", \"IN\", \"DT\", \"NN\"]\n    },\n    \"test_aspect\": \"Simple declarative sentence with a subject and object.\"\n  },\n  \"test_case10\": {\n    \"input\": \"It's a sunny day!\",\n    \"expected_output\": {\n      \"tokens\": [\"It\", \"'s\", \"a\", \"sunny\", \"day\"],\n      \"pos_tags\": [\"PRP\", \"VBZ\", \"DT\", \"JJ\", \"NN\"]\n    },\n    \"test_aspect\": \"Sentence containing a contraction and an exclamation.\"\n  }\n}\n```"}
{"index": 30787, "preference": "functionality", "prompt": "You are working on a project that involves analyzing the scattering parameters (S-parameters) of a microwave network. The code snippet provided is a part of a Python script that uses the `matplotlib` library to plot the magnitude of S11 and S21 parameters against frequency.\n\nYour task is to write a Python function that takes the S-parameters data and frequency as input and returns the magnitude of S11 and S21 in decibels (dB) at the given frequency.\n\nThe function signature should be:\n```python\ndef calculate_magnitude(s_params, frequency):\n    # Your code here\n    pass\n```\n\nThe `s_params` parameter is a dictionary containing the S-parameters data in the format `{(i, j): value}`, where `i` and `j` are the row and column indices of the S-parameter matrix, and `value` is the complex S-parameter value.\n\nThe `frequency` parameter is the frequency at which the magnitude of S-parameters needs to be calculated.\n\nAssume that the necessary libraries and data are already imported and available for use.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"s_params\": {(1, 1): 0.5 + 0.5j, (2, 1): 0.3 + 0.2j}, \"frequency\": 1.0},\n    \"expected_output\": {\"S11\": -6.020599913279624, \"S21\": -11.764118346202543},\n    \"test_aspect\": \"Normal case with typical S-parameter values.\"\n  },\n  \"test_case2\": {\n    \"input\": {\"s_params\": {(1, 1): 0 + 0j, (2, 1): 0 + 0j}, \"frequency\": 2.0},\n    \"expected_output\": {\"S11\": -inf, \"S21\": -inf},\n    \"test_aspect\": \"Case with zero S-parameters (results should be -inf for dB).\"\n  },\n  \"test_case3\": {\n    \"input\": {\"s_params\": {(1, 1): 1 + 0j, (2, 1): 0.707 + 0.707j}, \"frequency\": 3.0},\n    \"expected_output\": {\"S11\": 0.0, \"S21\": -3.0102999566398116},\n    \"test_aspect\": \"Case with S-parameters leading to positive dB results and a valid frequency.\"\n  },\n  \"test_case4\": {\n    \"input\": {\"s_params\": {(1, 1): 0.5 + 0.5j, (2, 1): 0.5 + 0.5j}, \"frequency\": 4.0},\n    \"expected_output\": {\"S11\": -6.020599913279624, \"S21\": -6.020599913279624},\n    \"test_aspect\": \"Case where both S-parameters are equal.\"\n  },\n  \"test_case5\": {\n    \"input\": {\"s_params\": {(1, 1): 1 + 1j, (2, 1): 1 + 0j}, \"frequency\": 5.0},\n    \"expected_output\": {\"S11\": -3.0102999566398116, \"S21\": 0.0},\n    \"test_aspect\": \"Case with varying S-parameters resulting in a mix of dB values.\"\n  },\n  \"test_case6\": {\n    \"input\": {\"s_params\": {(1, 1): -1 + 0j, (2, 1): 0.5 + 0.5j}, \"frequency\": 6.0},\n    \"expected_output\": {\"S11\": 0.0, \"S21\": -6.020599913279624},\n    \"test_aspect\": \"Case with a negative S-parameter leading to zero dB output.\"\n  },\n  \"test_case7\": {\n    \"input\": {\"s_params\": {(1, 1): 1 + 0j, (2, 1): 1 + 1j}, \"frequency\": 7.0},\n    \"expected_output\": {\"S11\": 0.0, \"S21\": -3.0102999566398116},\n    \"test_aspect\": \"Test with varying phase in S21 while maintaining a fixed S11.\"\n  },\n  \"test_case8\": {\n    \"input\": {\"s_params\": {(1, 1): 0.1 + 0.1j, (2, 1): 1 + 1j}, \"frequency\": 8.0},\n    \"expected_output\": {\"S11\": -20.000000000000004, \"S21\": -3.0102999566398116},\n    \"test_aspect\": \"Case with very small S11 and larger S21 leading to significant dB difference.\"\n  },\n  \"test_case9\": {\n    \"input\": {\"s_params\": {(1, 1): 1 + 0j, (2, 1): 0 + 0j}, \"frequency\": 9.0},\n    \"expected_output\": {\"S11\": 0.0, \"S21\": -inf},\n    \"test_aspect\": \"Case where S21 is zero, resulting in -inf output.\"\n  },\n  \"test_case10\": {\n    \"input\": {\"s_params\": {(1, 1): 0.707 + 0.707j, (2, 1): 0.866 + 0.5j}, \"frequency\": 10.0},\n    \"expected_output\": {\"S11\": -3.0102999566398116, \"S21\": -1.2287822296912017},\n    \"test_aspect\": \"Testing with common S-parameter values reflecting reasonable network behavior.\"\n  }\n}\n```"}
{"index": 13172, "preference": "functionality", "prompt": "You are working on a program to display the price of products in a store. The code snippet provided is a part of the program that prints the price of a product. The variables `xval`, `products`, and `price` are arrays of the same length, representing the product identifier, product name, and product price in cents, respectively. The code snippet prints the product identifier, product name, and the price of the product in dollars and cents format.\n\nYour task is to write a function that takes these arrays as input and returns a formatted string for each product in the following format: \"xval[i] of products[i]: $price[i].xx\", where \"xval[i]\" is the product identifier, \"products[i]\" is the product name, and \"price[i].xx\" is the price in dollars and cents.\n\nWrite a function `formatProductPrices(xval, products, price)` that takes three arrays as input and returns an array of strings containing the formatted product prices.\n\nFunction Signature: `def formatProductPrices(xval: List[int], products: List[str], price: List[int]) -> List[str]`\n\nExample:\nInput:\nxval = [1, 2, 3]\nproducts = [\"Apple\", \"Banana\", \"Orange\"]\nprice = [150, 200, 175]\n\nOutput:\n[\"1 of Apple: $1.50\", \"2 of Banana: $2.00\", \"3 of Orange: $1.75\"]", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"xval\": [1, 2, 3],\n      \"products\": [\"Apple\", \"Banana\", \"Orange\"],\n      \"price\": [150, 200, 175]\n    },\n    \"expected_output\": [\"1 of Apple: $1.50\", \"2 of Banana: $2.00\", \"3 of Orange: $1.75\"],\n    \"test_aspect\": \"Basic functionality with standard input values.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"xval\": [],\n      \"products\": [],\n      \"price\": []\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Handles empty input arrays gracefully.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"xval\": [4],\n      \"products\": [\"Grapes\"],\n      \"price\": [100]\n    },\n    \"expected_output\": [\"4 of Grapes: $1.00\"],\n    \"test_aspect\": \"Handles single product input correctly.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"xval\": [5, 6],\n      \"products\": [\"Cherries\", \"Peaches\"],\n      \"price\": [0, 300]\n    },\n    \"expected_output\": [\"5 of Cherries: $0.00\", \"6 of Peaches: $3.00\"],\n    \"test_aspect\": \"Handles price edge cases (zero and high values).\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"xval\": [7, 8],\n      \"products\": [\"Mango\", \"Pineapple\"],\n      \"price\": [9999, 2500]\n    },\n    \"expected_output\": [\"7 of Mango: $99.99\", \"8 of Pineapple: $25.00\"],\n    \"test_aspect\": \"Handles large price values correctly.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"xval\": [9, 10],\n      \"products\": [\"Strawberry\", \"Blueberry\"],\n      \"price\": [1500, 500]\n    },\n    \"expected_output\": [\"9 of Strawberry: $15.00\", \"10 of Blueberry: $5.00\"],\n    \"test_aspect\": \"Ensures correct dollar and cents formatting for varied inputs.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"xval\": [11],\n      \"products\": [\"Watermelon\"],\n      \"price\": [1234]\n    },\n    \"expected_output\": [\"11 of Watermelon: $12.34\"],\n    \"test_aspect\": \"Checks response for price with non-zero cents.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"xval\": [12, 13, 14],\n      \"products\": [\"Tomato\", \"Cucumber\", \"Lettuce\"],\n      \"price\": [250, 300, 450]\n    },\n    \"expected_output\": [\"12 of Tomato: $2.50\", \"13 of Cucumber: $3.00\", \"14 of Lettuce: $4.50\"],\n    \"test_aspect\": \"Verifies proper handling of multiple products with positive prices.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"xval\": [15],\n      \"products\": [\"Pumpkin\"],\n      \"price\": [999]\n    },\n    \"expected_output\": [\"15 of Pumpkin: $9.99\"],\n    \"test_aspect\": \"Tests correct formatting for price just under $10.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"xval\": [16, 17],\n      \"products\": [\"Zucchini\", \"Radish\"],\n      \"price\": [128, 695]\n    },\n    \"expected_output\": [\"16 of Zucchini: $1.28\", \"17 of Radish: $6.95\"],\n    \"test_aspect\": \"Ensures accurate conversion and formatting of cents to dollar outputs.\"\n  }\n}\n```"}
{"index": 22995, "preference": "functionality", "prompt": "You are tasked with creating a program that manages the download URLs for various language models used in natural language processing. The program should allow users to add, retrieve, and remove model URLs, as well as provide a method to display all available model URLs.\n\nYour task is to implement a class `ModelManager` with the following methods:\n- `add_model(model_name, model_url)`: Adds a new model with the given `model_name` and `model_url` to the manager.\n- `get_model(model_name)`: Retrieves the URL of the model with the given `model_name`.\n- `remove_model(model_name)`: Removes the model with the given `model_name` from the manager.\n- `display_all_models()`: Returns a list of all model names and their corresponding URLs.\n\nUse the provided code snippet as a reference for the format of model URLs and their descriptions.\n\nExample:\n```python\nmanager = ModelManager()\nmanager.add_model('SIGHAN2005_PKU_CONVSEG', 'https://hanlp.com/tok/sighan2005-pku-convseg_20200110_153722.zip')\nmanager.add_model('SIGHAN2005_MSR_CONVSEG', 'https://hanlp.com/tok/convseg-msr-nocrf-noembed_20200110_153524.zip')\nmanager.display_all_models()\n# Output: [('SIGHAN2005_PKU_CONVSEG', 'https://hanlp.com/tok/sighan2005-pku-convseg_20200110_153722.zip'), ('SIGHAN2005_MSR_CONVSEG', 'https://hanlp.com/tok/convseg-msr-nocrf-noembed_20200110_153524.zip')]\nmanager.get_model('SIGHAN2005_PKU_CONVSEG')\n# Output: 'https://hanlp.com/tok/sighan2005-pku-convseg_20200110_153722.zip'\nmanager.remove_model('SIGHAN2005_MSR_CONVSEG')\nmanager.display_all_models()\n# Output: [('SIGHAN2005_PKU_CONVSEG', 'https://hanlp.com/tok/sighan2005-pku-convseg_20200110_153722.zip')]\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"method\": \"add_model\",\n      \"params\": [\"ModelA\", \"http://example.com/modelA.zip\"]\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Testing adding a new model with valid parameters.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"method\": \"get_model\",\n      \"params\": [\"ModelA\"]\n    },\n    \"expected_output\": \"http://example.com/modelA.zip\",\n    \"test_aspect\": \"Testing retrieving the URL of an existing model.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"method\": \"remove_model\",\n      \"params\": [\"ModelA\"]\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Testing removing an existing model.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"method\": \"get_model\",\n      \"params\": [\"ModelA\"]\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Testing retrieving the URL of a removed model, expecting null.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"method\": \"add_model\",\n      \"params\": [\"ModelB\", \"http://example.com/modelB.zip\"]\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Testing adding another model with valid parameters.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"method\": \"display_all_models\",\n      \"params\": []\n    },\n    \"expected_output\": [[\"ModelB\", \"http://example.com/modelB.zip\"]],\n    \"test_aspect\": \"Testing displaying all models after adding one.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"method\": \"add_model\",\n      \"params\": [\"ModelC\", \"http://example.com/modelC.zip\"]\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Testing adding a third model with valid parameters.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"method\": \"display_all_models\",\n      \"params\": []\n    },\n    \"expected_output\": [\n      [\"ModelB\", \"http://example.com/modelB.zip\"],\n      [\"ModelC\", \"http://example.com/modelC.zip\"]\n    ],\n    \"test_aspect\": \"Testing displaying all models after adding two.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"method\": \"remove_model\",\n      \"params\": [\"ModelB\"]\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Testing removing a model that exists.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"method\": \"display_all_models\",\n      \"params\": []\n    },\n    \"expected_output\": [[\"ModelC\", \"http://example.com/modelC.zip\"]],\n    \"test_aspect\": \"Testing displaying all models after removing one.\"\n  }\n}\n```"}
{"index": 15984, "preference": "functionality", "prompt": "You are tasked with creating a Python class for a VoltageSensor that reads voltage and current values from a configuration file. Your task is to implement the VoltageSensor class and its methods to ensure that it correctly reads non-zero voltage and current values from the configuration file.\n\nYour task is to complete the implementation of the VoltageSensor class and its methods based on the given code snippet and the following requirements:\n1. The VoltageSensor class should have a constructor that takes a configuration object as a parameter.\n2. The configuration object should have a property named 'sensors' which contains a property named 'voltage' representing the voltage sensor configuration.\n3. The VoltageSensor class should have a method named 'voltage' that returns the voltage value from the configuration.\n4. The VoltageSensor class should have a method named 'current' that returns the current value from the configuration.\n5. The voltage and current values should be non-zero (i.e., not equal to 0).\n\nYour implementation should pass the provided unit test case TestVoltageSensorMethods.\n\nComplete the implementation of the VoltageSensor class and its methods to satisfy the requirements and pass the unit test case.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": 5,\n        \"current\": 10\n      }\n    },\n    \"expected_output\": {\n      \"voltage\": 5,\n      \"current\": 10\n    },\n    \"test_aspect\": \"Basic functionality with valid non-zero voltage and current values.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": 12,\n        \"current\": 3\n      }\n    },\n    \"expected_output\": {\n      \"voltage\": 12,\n      \"current\": 3\n    },\n    \"test_aspect\": \"Valid large non-zero voltage and current values.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": 1,\n        \"current\": 1\n      }\n    },\n    \"expected_output\": {\n      \"voltage\": 1,\n      \"current\": 1\n    },\n    \"test_aspect\": \"Minimum valid non-zero voltage and current values.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": 0,\n        \"current\": 10\n      }\n    },\n    \"expected_output\": \"Error: Voltage must be non-zero.\",\n    \"test_aspect\": \"Validation check for zero voltage.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": 5,\n        \"current\": 0\n      }\n    },\n    \"expected_output\": \"Error: Current must be non-zero.\",\n    \"test_aspect\": \"Validation check for zero current.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": -5,\n        \"current\": -10\n      }\n    },\n    \"expected_output\": {\n      \"voltage\": -5,\n      \"current\": -10\n    },\n    \"test_aspect\": \"Handling negative non-zero voltage and current values.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": 3.3,\n        \"current\": 2.1\n      }\n    },\n    \"expected_output\": {\n      \"voltage\": 3.3,\n      \"current\": 2.1\n    },\n    \"test_aspect\": \"Handling floating-point non-zero voltage and current values.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": \"15\",\n        \"current\": \"20\"\n      }\n    },\n    \"expected_output\": \"Error: Voltage and current must be numeric.\",\n    \"test_aspect\": \"Validation check for string inputs instead of numbers.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": null,\n        \"current\": 5\n      }\n    },\n    \"expected_output\": \"Error: Voltage must be non-zero.\",\n    \"test_aspect\": \"Validation check for null voltage.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"sensors\": {\n        \"voltage\": 10,\n        \"current\": undefined\n      }\n    },\n    \"expected_output\": \"Error: Current must be non-zero.\",\n    \"test_aspect\": \"Validation check for undefined current.\"\n  }\n}\n```"}
{"index": 11467, "preference": "functionality", "prompt": "You are given a code snippet that processes data using PyTorch. Your task is to write a function that performs similar data processing operations using Python and NumPy.\n\nWrite a Python function `data_processing` that takes the following inputs:\n- `tbar`: a list of tuples, where each tuple contains the following elements in order:\n  - `image`: a 3D array representing an image\n  - `seg_target`: a 2D array representing segmentation target\n  - `vertex_target`: a 2D array representing vertex target\n  - `pose_target`: a 1D array representing pose target\n  - `camera_k_matrix`: a 2D array representing camera K matrix\n  - `ori_img`: a 3D array representing original image\n  - `valid_mask`: a 2D array representing a valid mask\n\nThe function should perform the following operations on the input data:\n1. Convert `image`, `seg_target`, `vertex_target`, `pose_target`, `camera_k_matrix`, `ori_img`, and `valid_mask` to NumPy arrays.\n2. Convert `seg_target` to data type `int`.\n3. Create a new `valid_mask` by setting it to 1 where `seg_target` is greater than 0, and 0 elsewhere.\n\nThe function should return the processed `image`, `seg_target`, `vertex_target`, `pose_target`, `camera_k_matrix`, `ori_img`, and `valid_mask` as a tuple in the same order.\n\nNote: You can assume that the input data will always be in the correct format and of the correct shape.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\n      (np.random.rand(100, 100, 3), np.random.randint(0, 2, (100, 100)), np.random.rand(100, 2), np.random.rand(5), np.random.rand(3, 3), np.random.rand(100, 100, 3), np.random.randint(0, 2, (100, 100))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Basic functionality with standard shapes and values.\"\n  },\n  \"test_case2\": {\n    \"input\": [\n      (np.random.rand(50, 50, 3), np.zeros((50, 50)), np.random.rand(50, 2), np.random.rand(5), np.random.rand(3, 3), np.random.rand(50, 50, 3), np.random.randint(0, 2, (50, 50))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with zero segmentation target.\"\n  },\n  \"test_case3\": {\n    \"input\": [\n      (np.random.rand(200, 200, 3), np.random.randint(0, 3, (200, 200)), np.random.rand(200, 2), np.random.rand(5), np.random.rand(3, 3), np.random.rand(200, 200, 3), np.random.randint(0, 2, (200, 200))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with multiple segmentation classes.\"\n  },\n  \"test_case4\": {\n    \"input\": [\n      (np.random.rand(0, 0, 3), np.random.randint(0, 2, (0, 0)), np.random.rand(0, 2), np.random.rand(0), np.random.rand(3, 3), np.random.rand(0, 0, 3), np.random.randint(0, 2, (0, 0))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with empty arrays for all inputs.\"\n  },\n  \"test_case5\": {\n    \"input\": [\n      (np.random.rand(100, 100, 3), np.random.randint(0, 2, (100, 100)), np.random.rand(100, 2), np.random.rand(5), np.eye(3), np.random.rand(100, 100, 3), np.random.randint(0, 2, (100, 100))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with an identity camera K matrix.\"\n  },\n  \"test_case6\": {\n    \"input\": [\n      (np.random.rand(75, 75, 3), np.random.randint(0, 2, (75, 75)), np.random.rand(75, 2), np.random.rand(5), np.random.rand(3, 3), np.random.rand(75, 75, 3), np.random.randint(0, 2, (75, 75))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with a square image of dimension 75.\"\n  },\n  \"test_case7\": {\n    \"input\": [\n      (np.random.rand(100, 200, 3), np.random.randint(0, 2, (100, 200)), np.random.rand(100, 2), np.random.rand(5), np.random.rand(3, 3), np.random.rand(100, 200, 3), np.random.randint(0, 2, (100, 200))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with a rectangular image (100x200).\"\n  },\n  \"test_case8\": {\n    \"input\": [\n      (np.random.rand(100, 100, 3), np.random.randint(0, 2, (100, 100)), np.random.rand(100, 2), np.random.rand(5), np.random.rand(3, 3), np.random.rand(100, 100, 3), np.ones((100, 100))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with valid mask initialized to ones.\"\n  },\n  \"test_case9\": {\n    \"input\": [\n      (np.random.rand(120, 120, 3), np.random.randint(0, 2, (120, 120)), np.random.rand(120, 2), np.random.rand(5), np.random.rand(3, 3), np.random.rand(120, 120, 3), np.random.randint(0, 2, (120, 120))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with larger image dimensions.\"\n  },\n  \"test_case10\": {\n    \"input\": [\n      (np.random.rand(300, 300, 3), np.random.randint(0, 2, (300, 300)), np.random.rand(300, 2), np.random.rand(5), np.random.rand(3, 3), np.random.rand(300, 300, 3), np.random.randint(0, 2, (300, 300))),\n    ],\n    \"expected_output\": [\n      \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\", \"np.ndarray\"\n    ],\n    \"test_aspect\": \"Testing with very large image dimensions.\"\n  }\n}\n```"}
{"index": 5230, "preference": "functionality", "prompt": "You are tasked with creating a Python class that simulates a simple banking system. The class should have methods for depositing funds, withdrawing funds, and checking the account balance. Additionally, the class should have a method for generating a monthly statement that includes the transaction history.\n\nYour task is to implement the `BankAccount` class with the following methods:\n1. `__init__(self, account_number: str, initial_balance: float)`: Initializes the `BankAccount` with the given account number and initial balance.\n2. `deposit(self, amount: float)`: Adds the specified amount to the account balance.\n3. `withdraw(self, amount: float)`: Subtracts the specified amount from the account balance. If the withdrawal amount exceeds the current balance, print \"Insufficient funds\" and do not perform the withdrawal.\n4. `get_balance(self) -> float`: Returns the current account balance.\n5. `generate_statement(self) -> str`: Returns a string representing the monthly statement, including the account number, initial balance, all deposits, withdrawals, and the final balance.\n\nYou should also create an instance of the `BankAccount` class and demonstrate the usage of its methods by performing several transactions and generating a monthly statement.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"method\": \"__init__\",\n      \"params\": [\"123456\", 1000.0]\n    },\n    \"expected_output\": \"BankAccount initialized with account number '123456' and balance '1000.0'\",\n    \"test_aspect\": \"Initialization of the BankAccount class with valid account number and initial balance.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"method\": \"deposit\",\n      \"params\": [500.0]\n    },\n    \"expected_output\": \"Balance after deposit: 1500.0\",\n    \"test_aspect\": \"Depositing a valid amount to the account.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"method\": \"withdraw\",\n      \"params\": [300.0]\n    },\n    \"expected_output\": \"Balance after withdrawal: 1200.0\",\n    \"test_aspect\": \"Withdrawing a valid amount from the account.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"method\": \"withdraw\",\n      \"params\": [1500.0]\n    },\n    \"expected_output\": \"Insufficient funds\",\n    \"test_aspect\": \"Attempting to withdraw an amount greater than the current balance.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"method\": \"get_balance\",\n      \"params\": []\n    },\n    \"expected_output\": 1200.0,\n    \"test_aspect\": \"Retrieving the current account balance.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"method\": \"deposit\",\n      \"params\": [200.0]\n    },\n    \"expected_output\": \"Balance after deposit: 1400.0\",\n    \"test_aspect\": \"Depositing another valid amount to the account.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"method\": \"generate_statement\",\n      \"params\": []\n    },\n    \"expected_output\": \"Account Number: 123456\\nInitial Balance: 1000.0\\nDeposits: [500.0, 200.0]\\nWithdrawals: [300.0]\\nFinal Balance: 1400.0\",\n    \"test_aspect\": \"Generating a monthly statement that summarizes transactions.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"method\": \"withdraw\",\n      \"params\": [0.0]\n    },\n    \"expected_output\": \"Balance after withdrawal: 1400.0\",\n    \"test_aspect\": \"Withdrawing an amount of zero to check stability.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"method\": \"deposit\",\n      \"params\": [-100.0]\n    },\n    \"expected_output\": \"Balance remains: 1400.0\",\n    \"test_aspect\": \"Attempting to deposit a negative amount.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"method\": \"get_balance\",\n      \"params\": []\n    },\n    \"expected_output\": 1400.0,\n    \"test_aspect\": \"Ensuring that balance is consistent after multiple transactions.\"\n  }\n}\n```"}
{"index": 9708, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes a list of addresses and generates a list of corresponding links. The function should take a list of addresses as input and return a list of links formed by appending the addresses to a base URL.\n\nThe function should be named `generate_links` and should have the following signature:\n```python\ndef generate_links(adrs: list) -> list:\n    pass\n```\nWhere:\n- `adrs` (list of strings) - a list of addresses for which links need to be generated.\n\nFor example, given the input `adrs = ['/page1', '/page2', '/page3']`, the function should return `['https://bcy.net/page1', 'https://bcy.net/page2', 'https://bcy.net/page3']`.\n\nWrite the `generate_links` function to achieve this behavior.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\"/page1\", \"/page2\", \"/page3\"],\n    \"expected_output\": [\"https://bcy.net/page1\", \"https://bcy.net/page2\", \"https://bcy.net/page3\"],\n    \"test_aspect\": \"Standard case with multiple valid addresses\"\n  },\n  \"test_case2\": {\n    \"input\": [\"/home\", \"/about\"],\n    \"expected_output\": [\"https://bcy.net/home\", \"https://bcy.net/about\"],\n    \"test_aspect\": \"Standard case with two addresses\"\n  },\n  \"test_case3\": {\n    \"input\": [],\n    \"expected_output\": [],\n    \"test_aspect\": \"Edge case with an empty list of addresses\"\n  },\n  \"test_case4\": {\n    \"input\": [\"/contact\"],\n    \"expected_output\": [\"https://bcy.net/contact\"],\n    \"test_aspect\": \"Single address input\"\n  },\n  \"test_case5\": {\n    \"input\": [\"/page with spaces\", \"/another page\"],\n    \"expected_output\": [\"https://bcy.net/page with spaces\", \"https://bcy.net/another page\"],\n    \"test_aspect\": \"Valid addresses with spaces\"\n  },\n  \"test_case6\": {\n    \"input\": [\"/page1\", \"\", \"/page3\"],\n    \"expected_output\": [\"https://bcy.net/page1\", \"https://bcy.net/\", \"https://bcy.net/page3\"],\n    \"test_aspect\": \"Handles empty strings within the address list\"\n  },\n  \"test_case7\": {\n    \"input\": [\"/page1\", \"/page2\", \"/page3\"],\n    \"expected_output\": [\"https://bcy.net/page1\", \"https://bcy.net/page2\", \"https://bcy.net/page3\"],\n    \"test_aspect\": \"Repeating the same valid addresses for consistency check\"\n  },\n  \"test_case8\": {\n    \"input\": [\"/special@chars!\", \"/test#page\"],\n    \"expected_output\": [\"https://bcy.net/special@chars!\", \"https://bcy.net/test#page\"],\n    \"test_aspect\": \"Handles addresses with special characters\"\n  },\n  \"test_case9\": {\n    \"input\": [\"/12345\"],\n    \"expected_output\": [\"https://bcy.net/12345\"],\n    \"test_aspect\": \"Valid address with only numeric characters\"\n  },\n  \"test_case10\": {\n    \"input\": [\"/\", \"/page\", \"/sub/page\"],\n    \"expected_output\": [\"https://bcy.net/\", \"https://bcy.net/page\", \"https://bcy.net/sub/page\"],\n    \"test_aspect\": \"Handles root and sub-page addresses\"\n  }\n}\n```"}
{"index": 2651, "preference": "functionality", "prompt": "You are tasked with implementing a function to modify a graph data structure based on a set of rules. The graph is represented using an adjacency list, where each key-value pair represents a node and its adjacent nodes. The function should take the graph as input and return the modified graph according to the specified rules.\n\nThe rules for modifying the graph are as follows:\n1. For each node in the graph, if the node has an odd number of adjacent nodes, remove the node from the graph along with its edges.\n2. If any node becomes isolated (i.e., has no adjacent nodes) after the removal of other nodes, remove the isolated node as well.\n\nYou are required to implement the `modify_graph` function, which takes the original graph as input and returns the modified graph based on the specified rules.\n\nExample:\nInput:\nOriginal graph:\n{\n    1: [2, 3],\n    2: [1, 3, 4],\n    3: [1, 2, 4],\n    4: [2, 3]\n}\n\nOutput:\nModified graph:\n{\n    2: [4],\n    4: [2]\n}", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"1\": [2, 3],\n      \"2\": [1, 3, 4],\n      \"3\": [1, 2, 4],\n      \"4\": [2, 3]\n    },\n    \"expected_output\": {\n      \"2\": [4],\n      \"4\": [2]\n    },\n    \"test_aspect\": \"Basic functionality with a graph where some nodes have odd number of edges.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"1\": [2],\n      \"2\": [1],\n      \"3\": [],\n      \"4\": [5],\n      \"5\": [4]\n    },\n    \"expected_output\": {\n      \"4\": [5],\n      \"5\": [4]\n    },\n    \"test_aspect\": \"Graph with isolated nodes and odd-degree nodes.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"1\": [2, 3, 4],\n      \"2\": [1, 3],\n      \"3\": [1, 2],\n      \"4\": [1]\n    },\n    \"expected_output\": {\n      \"2\": [3],\n      \"3\": [2]\n    },\n    \"test_aspect\": \"All nodes with an even number of edges remain.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"1\": [2],\n      \"2\": [1, 3],\n      \"3\": [2],\n      \"4\": [5],\n      \"5\": [4, 6],\n      \"6\": [5]\n    },\n    \"expected_output\": {\n      \"4\": [5],\n      \"5\": [4, 6],\n      \"6\": [5]\n    },\n    \"test_aspect\": \"Multiple components with mixed even and odd edges.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"7\": []\n    },\n    \"expected_output\": {},\n    \"test_aspect\": \"Single node with no edges (should be removed).\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"1\": [2, 3, 4],\n      \"2\": [1],\n      \"3\": [1],\n      \"4\": [1]\n    },\n    \"expected_output\": {},\n    \"test_aspect\": \"All nodes have odd degrees, resulting in complete removal.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"1\": [2],\n      \"2\": [1, 3],\n      \"3\": [2, 4],\n      \"4\": [3]\n    },\n    \"expected_output\": {\n      \"2\": [3],\n      \"3\": [2]\n    },\n    \"test_aspect\": \"Chain of nodes; some odd-degree nodes lead to removals.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"1\": [2],\n      \"2\": [1],\n      \"3\": [4],\n      \"4\": [3]\n    },\n    \"expected_output\": {},\n    \"test_aspect\": \"Two separate pairs of nodes, all odd degrees leading to removal.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"1\": [2, 3],\n      \"2\": [1],\n      \"3\": [1, 4],\n      \"4\": [3, 5],\n      \"5\": [4]\n    },\n    \"expected_output\": {\n      \"4\": [5],\n      \"5\": [4]\n    },\n    \"test_aspect\": \"Complex graph with various degrees, ensuring proper removals.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"10\": [11, 12],\n      \"11\": [10, 12],\n      \"12\": [10, 11, 13],\n      \"13\": [12]\n    },\n    \"expected_output\": {\n      \"11\": [12],\n      \"12\": [11]\n    },\n    \"test_aspect\": \"Graph including a few odd and even degree nodes to assess removals.\"\n  }\n}\n```"}
{"index": 13483, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that performs a specific type of validation on a given set of loss records. The function should compare the loss records against a reference array using a specified relative tolerance (rtol) and absolute tolerance (atol). If the validation fails, an error message should be raised. Additionally, the function should load a dynamic model after the validation process.\n\nYour task is to implement the `validate_loss_records` function according to the following specifications:\n\nFunction Signature: `def validate_loss_records(loss_records: List[float], reference_array: np.ndarray, rtol: float, atol: float) -> None`\n\nInput:\n- `loss_records` (List[float]): A list of floating-point numbers representing the loss records to be validated.\n- `reference_array` (np.ndarray): A NumPy array serving as the reference for comparison.\n- `rtol` (float): The relative tolerance to be used in the comparison.\n- `atol` (float): The absolute tolerance to be used in the comparison.\n\nOutput:\n- None. The function should raise an AssertionError with the message \"Failed to do the imperative qat.\" if the validation fails.\n\nConstraints:\n- The length of `loss_records` will be at least 1.\n- The length of `loss_records` will be equal to the length of `reference_array`.\n- All input floating-point numbers are finite.\n\nExample:\n```python\nimport numpy as np\n\nloss_records = [0.1, 0.2, 0.3, 0.4]\nreference_array = np.array([0.11, 0.19, 0.31, 0.41])\nrtol = 0.1\natol = 0.05\n\nvalidate_loss_records(loss_records, reference_array, rtol, atol)  # Should raise AssertionError with the message \"Failed to do the imperative qat.\"\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"loss_records\": [0.1, 0.2, 0.3, 0.4],\n      \"reference_array\": [0.11, 0.19, 0.31, 0.41],\n      \"rtol\": 0.1,\n      \"atol\": 0.05\n    },\n    \"expected_output\": \"AssertionError: Failed to do the imperative qat.\",\n    \"test_aspect\": \"Validation fails as the loss records are outside the tolerance limits.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"loss_records\": [0.1, 0.2, 0.3, 0.4],\n      \"reference_array\": [0.1, 0.2, 0.3, 0.4],\n      \"rtol\": 0.1,\n      \"atol\": 0.05\n    },\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Validation succeeds as the loss records are equal to the reference array.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"loss_records\": [1.0],\n      \"reference_array\": [1.05],\n      \"rtol\": 0.1,\n      \"atol\": 0.1\n    },\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Validation succeeds with single element records within tolerance.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"loss_records\": [0.9, 1.1, 1.3],\n      \"reference_array\": [1.0, 1.0, 1.0],\n      \"rtol\": 0.1,\n      \"atol\": 0.2\n    },\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Validation succeeds with multiple records, all within tolerance.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"loss_records\": [0.0, 0.0, 0.0],\n      \"reference_array\": [0.01, 0.01, 0.01],\n      \"rtol\": 0.1,\n      \"atol\": 0.005\n    },\n    \"expected_output\": \"AssertionError: Failed to do the imperative qat.\",\n    \"test_aspect\": \"Validation fails as all records are outside the absolute tolerance.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"loss_records\": [1.0, 2.0, 3.0],\n      \"reference_array\": [1.1, 2.2, 3.3],\n      \"rtol\": 0.1,\n      \"atol\": 0.1\n    },\n    \"expected_output\": \"AssertionError: Failed to do the imperative qat.\",\n    \"test_aspect\": \"Validation fails due to all records exceeding both tolerances.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"loss_records\": [0.5, 0.5],\n      \"reference_array\": [0.5, 0.5],\n      \"rtol\": 0.0,\n      \"atol\": 0.0\n    },\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Validation succeeds as both records match exactly with no tolerance.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"loss_records\": [10.0, 20.0],\n      \"reference_array\": [10.1, 19.9],\n      \"rtol\": 0.01,\n      \"atol\": 0.1\n    },\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Validation succeeds as records are within the specified relative and absolute tolerance.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"loss_records\": [5.0],\n      \"reference_array\": [5.2],\n      \"rtol\": 0.05,\n      \"atol\": 0.1\n    },\n    \"expected_output\": \"AssertionError: Failed to do the imperative qat.\",\n    \"test_aspect\": \"Validation fails for single element exceeding the relative tolerance.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"loss_records\": [0.3],\n      \"reference_array\": [0.3],\n      \"rtol\": 0.0,\n      \"atol\": 0.0\n    },\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Validation succeeds with a single exact match.\"\n  }\n}\n```"}
{"index": 32782, "preference": "functionality", "prompt": "You are tasked with creating a Python function that securely retrieves and returns credentials for connecting to a Windows Remote Management (WinRM) host. The function should take three command-line arguments representing the WinRM host, username, and password, and should exit with an error code if the number of arguments is incorrect. The function should then return the provided WinRM host, username, and password.\n\nYour task is to implement the `get_winrm_credentials` function according to the following specifications:\n\nFunction Signature: \n```python\ndef get_winrm_credentials() -> Tuple[str, str, str]:\n    pass\n```\n\nInput:\n- The function does not take any direct input. The WinRM host, username, and password are provided as command-line arguments when the script is executed.\n\nOutput:\n- The function should return a tuple containing the WinRM host, username, and password.\n\nConstraints:\n- The function should exit with an error code if the number of command-line arguments is not equal to 3.\n\nExample:\n```bash\n$ python script.py winrm-host username password\n```\nOutput:\n```python\n('winrm-host', 'username', 'password')\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"script.py winrm-host username password\",\n    \"expected_output\": \"('winrm-host', 'username', 'password')\",\n    \"test_aspect\": \"Valid case with correct number of arguments.\"\n  },\n  \"test_case2\": {\n    \"input\": \"script.py winrm-host username\",\n    \"expected_output\": \"Error code for incorrect number of arguments.\",\n    \"test_aspect\": \"Invalid case with too few arguments.\"\n  },\n  \"test_case3\": {\n    \"input\": \"script.py winrm-host username password extra_arg\",\n    \"expected_output\": \"Error code for incorrect number of arguments.\",\n    \"test_aspect\": \"Invalid case with too many arguments.\"\n  },\n  \"test_case4\": {\n    \"input\": \"script.py localhost user pass123\",\n    \"expected_output\": \"('localhost', 'user', 'pass123')\",\n    \"test_aspect\": \"Valid case with common host and credentials.\"\n  },\n  \"test_case5\": {\n    \"input\": \"script.py 192.168.1.1 admin admin_pass\",\n    \"expected_output\": \"('192.168.1.1', 'admin', 'admin_pass')\",\n    \"test_aspect\": \"Valid case with IP address as host.\"\n  },\n  \"test_case6\": {\n    \"input\": \"script.py winrm-host user \\\"password with spaces\\\"\",\n    \"expected_output\": \"('winrm-host', 'user', 'password with spaces')\",\n    \"test_aspect\": \"Valid case with password containing spaces.\"\n  },\n  \"test_case7\": {\n    \"input\": \"script.py winrm-host user ''\",\n    \"expected_output\": \"('winrm-host', 'user', '')\",\n    \"test_aspect\": \"Valid case with an empty password.\"\n  },\n  \"test_case8\": {\n    \"input\": \"script.py winrm-host '' password\",\n    \"expected_output\": \"('winrm-host', '', 'password')\",\n    \"test_aspect\": \"Valid case with an empty username.\"\n  },\n  \"test_case9\": {\n    \"input\": \"script.py winrm-host username password -extra\",\n    \"expected_output\": \"Error code for incorrect number of arguments.\",\n    \"test_aspect\": \"Invalid case with unexpected options included.\"\n  },\n  \"test_case10\": {\n    \"input\": \"script.py 'winrm-host with spaces' username password\",\n    \"expected_output\": \"('winrm-host with spaces', 'username', 'password')\",\n    \"test_aspect\": \"Valid case with host containing spaces.\"\n  }\n}\n```"}
{"index": 8417, "preference": "functionality", "prompt": "You are tasked with implementing a function that processes keyword arguments and uses them to create a package configuration for a build system. The function should handle default values for certain arguments and apply specific substitutions to the package configuration.\n\nWrite a function `create_package_config` that takes in the following parameters:\n- `name` (string): The name of the package.\n- `deps` (list): List of dependencies for the package.\n- `readme_md` (string): The content of the package's readme file in markdown format.\n- `license_banner` (string): The license banner for the package.\n- `**kwargs`: Additional keyword arguments that may include `visibility`, `substitutions`, `ng_packager`, and `terser_config_file`.\n\nThe function should process the `kwargs` to extract the following optional parameters with default values if not provided:\n- `visibility` (string): The visibility of the package. If not provided, it should default to `None`.\n- `substitutions` (dict): A dictionary of substitutions to be applied to the package configuration. If not provided, it should default to `PKG_GROUP_REPLACEMENTS`.\n- `ng_packager` (string): The ng packager for the package. If not provided, it should default to `_INTERNAL_NG_PACKAGE_PACKAGER`.\n- `terser_config_file` (string): The terser config file for the package. If not provided, it should default to `_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE`.\n\nThe function should then construct and return a package configuration dictionary with the processed parameters and default values.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\", \"dep2\"],\n      \"readme_md\": \"This is an example package.\",\n      \"license_banner\": \"MIT License\"\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\", \"dep2\"],\n      \"readme_md\": \"This is an example package.\",\n      \"license_banner\": \"MIT License\",\n      \"visibility\": null,\n      \"substitutions\": \"PKG_GROUP_REPLACEMENTS\",\n      \"ng_packager\": \"_INTERNAL_NG_PACKAGE_PACKAGER\",\n      \"terser_config_file\": \"_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE\"\n    },\n    \"test_aspect\": \"Basic input with all required parameters.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\"],\n      \"readme_md\": \"This is a minimal package.\",\n      \"license_banner\": \"Apache License 2.0\",\n      \"visibility\": \"public\"\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\"],\n      \"readme_md\": \"This is a minimal package.\",\n      \"license_banner\": \"Apache License 2.0\",\n      \"visibility\": \"public\",\n      \"substitutions\": \"PKG_GROUP_REPLACEMENTS\",\n      \"ng_packager\": \"_INTERNAL_NG_PACKAGE_PACKAGER\",\n      \"terser_config_file\": \"_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE\"\n    },\n    \"test_aspect\": \"Input includes visibility parameter.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [],\n      \"readme_md\": \"\",\n      \"license_banner\": \"MIT License\",\n      \"substitutions\": {\"key\": \"value\"}\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [],\n      \"readme_md\": \"\",\n      \"license_banner\": \"MIT License\",\n      \"visibility\": null,\n      \"substitutions\": {\"key\": \"value\"},\n      \"ng_packager\": \"_INTERNAL_NG_PACKAGE_PACKAGER\",\n      \"terser_config_file\": \"_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE\"\n    },\n    \"test_aspect\": \"Handles empty strings and lists for readme and deps.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\", \"dep2\"],\n      \"readme_md\": \"Example package readme.\",\n      \"license_banner\": \"GPL\",\n      \"ng_packager\": \"custom_packager\"\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\", \"dep2\"],\n      \"readme_md\": \"Example package readme.\",\n      \"license_banner\": \"GPL\",\n      \"visibility\": null,\n      \"substitutions\": \"PKG_GROUP_REPLACEMENTS\",\n      \"ng_packager\": \"custom_packager\",\n      \"terser_config_file\": \"_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE\"\n    },\n    \"test_aspect\": \"Custom ng_packager provided.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\"],\n      \"readme_md\": \"Readme contents.\",\n      \"license_banner\": \"MIT License\",\n      \"terser_config_file\": \"custom_config_file.js\"\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\"],\n      \"readme_md\": \"Readme contents.\",\n      \"license_banner\": \"MIT License\",\n      \"visibility\": null,\n      \"substitutions\": \"PKG_GROUP_REPLACEMENTS\",\n      \"ng_packager\": \"_INTERNAL_NG_PACKAGE_PACKAGER\",\n      \"terser_config_file\": \"custom_config_file.js\"\n    },\n    \"test_aspect\": \"Custom terser_config_file provided.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\", \"dep2\", \"dep3\"],\n      \"readme_md\": \"Package with multiple dependencies.\",\n      \"license_banner\": \"BSD\"\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\", \"dep2\", \"dep3\"],\n      \"readme_md\": \"Package with multiple dependencies.\",\n      \"license_banner\": \"BSD\",\n      \"visibility\": null,\n      \"substitutions\": \"PKG_GROUP_REPLACEMENTS\",\n      \"ng_packager\": \"_INTERNAL_NG_PACKAGE_PACKAGER\",\n      \"terser_config_file\": \"_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE\"\n    },\n    \"test_aspect\": \"Handles multiple dependencies.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [],\n      \"readme_md\": \"Empty dependencies.\",\n      \"license_banner\": \"MIT License\",\n      \"visibility\": \"private\",\n      \"substitutions\": {}\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [],\n      \"readme_md\": \"Empty dependencies.\",\n      \"license_banner\": \"MIT License\",\n      \"visibility\": \"private\",\n      \"substitutions\": {},\n      \"ng_packager\": \"_INTERNAL_NG_PACKAGE_PACKAGER\",\n      \"terser_config_file\": \"_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE\"\n    },\n    \"test_aspect\": \"Handles empty dependencies and empty substitutions.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\"],\n      \"readme_md\": \"Example package.\",\n      \"license_banner\": \"None\",\n      \"visibility\": \"internal\",\n      \"ng_packager\": \"ng-packager\"\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\"],\n      \"readme_md\": \"Example package.\",\n      \"license_banner\": \"None\",\n      \"visibility\": \"internal\",\n      \"substitutions\": \"PKG_GROUP_REPLACEMENTS\",\n      \"ng_packager\": \"ng-packager\",\n      \"terser_config_file\": \"_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE\"\n    },\n    \"test_aspect\": \"Custom visibility and ng_packager while using default substitutions.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\", \"dep2\"],\n      \"readme_md\": \"Package with default parameters.\",\n      \"license_banner\": \"MIT\"\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [\"dep1\", \"dep2\"],\n      \"readme_md\": \"Package with default parameters.\",\n      \"license_banner\": \"MIT\",\n      \"visibility\": null,\n      \"substitutions\": \"PKG_GROUP_REPLACEMENTS\",\n      \"ng_packager\": \"_INTERNAL_NG_PACKAGE_PACKAGER\",\n      \"terser_config_file\": \"_INTERNAL_NG_PACKAGE_DEFALUT_TERSER_CONFIG_FILE\"\n    },\n    \"test_aspect\": \"All default values used with specific required parameters.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"name\": \"example-package\",\n      \"deps\": [],\n      \"readme_md\": \"Complete package.\",\n      \"license_banner\": \"MIT License\",\n      \"visibility\": \"public\",\n      \"ng_packager\": \"custom_packager\",\n      \"terser_config_file\": \"custom_config_file.js\",\n      \"substitutions\": {\"a\": \"1\", \"b\": \"2\"}\n    },\n    \"expected_output\": {\n      \"name\": \"example-package\",\n      \"deps\": [],\n      \"readme_md\": \"Complete package.\",\n      \"license_banner\": \"MIT License\",\n      \"visibility\": \"public\",\n      \"substitutions\": {\"a\": \"1\", \"b\": \"2\"},\n      \"ng_packager\": \"custom_packager\",\n      \"terser_config_file\": \"custom_config_file.js\"\n    },\n    \"test_aspect\": \"All parameters provided with custom values.\"\n  }\n}\n```"}
{"index": 13231, "preference": "functionality", "prompt": "You are tasked with implementing a function to transform an image to represent the flag of the Netherlands. The flag consists of three horizontal bands of color: red at the top, white in the middle, and blue at the bottom. You are given a code snippet that manipulates pixels in an image using a custom image processing library. Your task is to complete the function `makeNetherlands(picture)` to apply the color bands to the given `picture` object.\n\nThe `makeNetherlands(picture)` function should perform the following steps:\n1. Divide the image into three equal horizontal bands.\n2. Set the top band to be a solid red color, the middle band to be a solid white color, and the bottom band to be a solid blue color.\n\nYou have access to the following functions:\n- `getPixels(picture)`: Returns a list of all the pixels in the given `picture`.\n- `makeColor(red, green, blue)`: Creates a color object with the specified RGB values.\n- `setRed(pixel, value)`: Sets the red component of the given `pixel` to the specified `value`.\n- `setGreen(pixel, value)`: Sets the green component of the given `pixel` to the specified `value`.\n- `setBlue(pixel, value)`: Sets the blue component of the given `pixel` to the specified `value`.\n- `repaint(picture)`: Updates the display of the `picture` to reflect any changes made to its pixels.\n\nYour task is to complete the `makeNetherlands(picture)` function to correctly apply the colors of the Netherlands flag to the given `picture` object.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"A picture object with dimensions 3x3 pixels.\",\n    \"expected_output\": \"Top 1 pixel red (255, 0, 0), Middle 1 pixel white (255, 255, 255), Bottom 1 pixel blue (0, 0, 255).\",\n    \"test_aspect\": \"Basic functionality with a minimum size image.\"\n  },\n  \"test_case2\": {\n    \"input\": \"A picture object with dimensions 6x6 pixels.\",\n    \"expected_output\": \"Top 2 rows red (255, 0, 0), Middle 2 rows white (255, 255, 255), Bottom 2 rows blue (0, 0, 255).\",\n    \"test_aspect\": \"Even image height check to confirm correct banding.\"\n  },\n  \"test_case3\": {\n    \"input\": \"A picture object with dimensions 5x5 pixels.\",\n    \"expected_output\": \"Top 2 rows red (255, 0, 0), Middle 1 row white (255, 255, 255), Bottom 2 rows blue (0, 0, 255).\",\n    \"test_aspect\": \"Odd image height check to ensure proper rounding of bands.\"\n  },\n  \"test_case4\": {\n    \"input\": \"A picture object with dimensions 10x10 pixels.\",\n    \"expected_output\": \"Top 3 rows red (255, 0, 0), Middle 4 rows white (255, 255, 255), Bottom 3 rows blue (0, 0, 255).\",\n    \"test_aspect\": \"Larger size image to verify proper application of color bands.\"\n  },\n  \"test_case5\": {\n    \"input\": \"A picture object with dimensions 1x1 pixel.\",\n    \"expected_output\": \"The single pixel should turn red (255, 0, 0).\",\n    \"test_aspect\": \"Edge case for the smallest possible image size.\"\n  },\n  \"test_case6\": {\n    \"input\": \"A picture object with dimensions 4x8 pixels.\",\n    \"expected_output\": \"Top 2 rows red (255, 0, 0), Middle 4 rows white (255, 255, 255), Bottom 2 rows blue (0, 0, 255).\",\n    \"test_aspect\": \"Different height, ensuring correct division into bands.\"\n  },\n  \"test_case7\": {\n    \"input\": \"A picture object with dimensions 7x3 pixels.\",\n    \"expected_output\": \"Top 2 rows red (255, 0, 0), Middle 1 row white (255, 255, 255), Bottom 2 rows blue (0, 0, 255).\",\n    \"test_aspect\": \"Odd width check to validate uniform horizontal banding.\"\n  },\n  \"test_case8\": {\n    \"input\": \"A picture object with dimensions 12x12 pixels.\",\n    \"expected_output\": \"Top 4 rows red (255, 0, 0), Middle 4 rows white (255, 255, 255), Bottom 4 rows blue (0, 0, 255).\",\n    \"test_aspect\": \"Testing with a larger square image for consistent banding.\"\n  },\n  \"test_case9\": {\n    \"input\": \"A picture object with dimensions 9x7 pixels.\",\n    \"expected_output\": \"Top 3 rows red (255, 0, 0), Middle 3 rows white (255, 255, 255), Bottom 3 rows blue (0, 0, 255).\",\n    \"test_aspect\": \"Ensures the middle section is handled correctly in a non-divisible scenario.\"\n  },\n  \"test_case10\": {\n    \"input\": \"A picture object with dimensions 8x10 pixels.\",\n    \"expected_output\": \"Top 3 rows red (255, 0, 0), Middle 4 rows white (255, 255, 255), Bottom 3 rows blue (0, 0, 255).\",\n    \"test_aspect\": \"Check for standard application of color bands across various dimensions.\"\n  }\n}\n```"}
{"index": 8230, "preference": "functionality", "prompt": "You are tasked with designing a system to manage queues in a cloud-based application. The system should allow users to create, retrieve, update, and delete queues. Each queue can be associated with various attributes, such as name, visibility timeout, and maximum message retention period. Your task is to implement a function that retrieves queues based on specific filter criteria.\n\nYou are given a code snippet that retrieves all queues from the cloud service and then calls a function `lookup` to filter the queues based on certain criteria. The `lookup` function takes the retrieved queues and a `filter_by` keyword argument, which specifies the filtering criteria.\n\nYour task is to implement the `lookup` function to filter the queues based on the provided criteria and return the filtered result.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 120},\n        {\"name\": \"queue2\", \"visibility_timeout\": 60, \"max_message_retention\": 300}\n      ],\n      \"filter_by\": {\"visibility_timeout\": 30}\n    },\n    \"expected_output\": [\n      {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 120}\n    ],\n    \"test_aspect\": \"Filter by visibility timeout matching exactly\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 120},\n        {\"name\": \"queue2\", \"visibility_timeout\": 60, \"max_message_retention\": 300}\n      ],\n      \"filter_by\": {\"max_message_retention\": 300}\n    },\n    \"expected_output\": [\n      {\"name\": \"queue2\", \"visibility_timeout\": 60, \"max_message_retention\": 300}\n    ],\n    \"test_aspect\": \"Filter by max message retention matching exactly\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 120},\n        {\"name\": \"queue2\", \"visibility_timeout\": 60, \"max_message_retention\": 300},\n        {\"name\": \"queue3\", \"visibility_timeout\": 30, \"max_message_retention\": 300}\n      ],\n      \"filter_by\": {\"visibility_timeout\": 30, \"max_message_retention\": 300}\n    },\n    \"expected_output\": [\n      {\"name\": \"queue3\", \"visibility_timeout\": 30, \"max_message_retention\": 300}\n    ],\n    \"test_aspect\": \"Filter by multiple criteria: both visibility timeout and max message retention\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"queues\": [],\n      \"filter_by\": {\"visibility_timeout\": 30}\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Handle empty queues list\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 15, \"max_message_retention\": 60},\n        {\"name\": \"queue2\", \"visibility_timeout\": 30, \"max_message_retention\": 120}\n      ],\n      \"filter_by\": {\"visibility_timeout\": 15}\n    },\n    \"expected_output\": [\n      {\"name\": \"queue1\", \"visibility_timeout\": 15, \"max_message_retention\": 60}\n    ],\n    \"test_aspect\": \"Filter by visibility timeout with lower boundary value\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 0},\n        {\"name\": \"queue2\", \"visibility_timeout\": 30, \"max_message_retention\": 300}\n      ],\n      \"filter_by\": {\"max_message_retention\": 0}\n    },\n    \"expected_output\": [\n      {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 0}\n    ],\n    \"test_aspect\": \"Filter by max message retention with lower boundary value\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 60},\n        {\"name\": \"queue2\", \"visibility_timeout\": 30, \"max_message_retention\": 300}\n      ],\n      \"filter_by\": {\"visibility_timeout\": 35}\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"No queues match the filter criteria\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 120}\n      ],\n      \"filter_by\": {\"name\": \"queue1\"}\n    },\n    \"expected_output\": [\n      {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 120}\n    ],\n    \"test_aspect\": \"Filter by queue name\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 60, \"max_message_retention\": 120},\n        {\"name\": \"queue2\", \"visibility_timeout\": 30, \"max_message_retention\": 120}\n      ],\n      \"filter_by\": {\"max_message_retention\": 120}\n    },\n    \"expected_output\": [\n      {\"name\": \"queue1\", \"visibility_timeout\": 60, \"max_message_retention\": 120},\n      {\"name\": \"queue2\", \"visibility_timeout\": 30, \"max_message_retention\": 120}\n    ],\n    \"test_aspect\": \"Filter by max message retention with multiple matches\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"queues\": [\n        {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 120},\n        {\"name\": \"queue2\", \"visibility_timeout\": 60, \"max_message_retention\": 300}\n      ],\n      \"filter_by\": {}\n    },\n    \"expected_output\": [\n      {\"name\": \"queue1\", \"visibility_timeout\": 30, \"max_message_retention\": 120},\n      {\"name\": \"queue2\", \"visibility_timeout\": 60, \"max_message_retention\": 300}\n    ],\n    \"test_aspect\": \"No filter criteria, should return all queues\"\n  }\n}\n```"}
{"index": 19163, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes a directory containing specification files and extracts specific information from them. Your function should take the input directory path as a parameter and perform the following tasks:\n1. Create an instance of the `SpecDir` class using the input directory path.\n2. Check if the specified directory exists using the `exists()` method of the `SpecDir` class. If the directory does not exist, raise an assertion error with a message indicating the absence of the specified directory.\n3. Retrieve a list of definitions from the `SpecDir` instance and sort them alphabetically.\n4. Format the sorted definitions with tab indentation and store them in a list named `collect` under the \"Definitions\" section.\n\nYour task is to complete the Python function `list_specd(input_dir: str)` by implementing the steps mentioned above.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"non_existent_directory\",\n    \"expected_output\": {\n      \"error\": \"AssertionError\",\n      \"message\": \"The specified directory does not exist.\"\n    },\n    \"test_aspect\": \"Testing behavior when a non-existent directory is provided.\"\n  },\n  \"test_case2\": {\n    \"input\": \"empty_directory\",\n    \"expected_output\": {\n      \"Definitions\": []\n    },\n    \"test_aspect\": \"Testing behavior when the directory exists but contains no specification files.\"\n  },\n  \"test_case3\": {\n    \"input\": \"single_definition_directory\",\n    \"expected_output\": {\n      \"Definitions\": [\n        \"\\tSingleDefinition\"\n      ]\n    },\n    \"test_aspect\": \"Testing a directory with a single definition file to ensure it is correctly formatted and indented.\"\n  },\n  \"test_case4\": {\n    \"input\": \"multiple_definitions_directory\",\n    \"expected_output\": {\n      \"Definitions\": [\n        \"\\tAlphaDefinition\",\n        \"\\tBetaDefinition\",\n        \"\\tGammaDefinition\"\n      ]\n    },\n    \"test_aspect\": \"Testing behavior when multiple definition files are present, ensuring they are sorted and formatted.\"\n  },\n  \"test_case5\": {\n    \"input\": \"definition_with_special_characters_directory\",\n    \"expected_output\": {\n      \"Definitions\": [\n        \"\\t#Special$Definition\",\n        \"\\tNormalDefinition\"\n      ]\n    },\n    \"test_aspect\": \"Testing behavior when definitions contain special characters, ensuring they are included and formatted correctly.\"\n  },\n  \"test_case6\": {\n    \"input\": \"case_sensitivity_directory\",\n    \"expected_output\": {\n      \"Definitions\": [\n        \"\\talphaDefinition\",\n        \"\\tAlphaDefinition\"\n      ]\n    },\n    \"test_aspect\": \"Testing case sensitivity of definitions to ensure they are sorted correctly.\"\n  },\n  \"test_case7\": {\n    \"input\": \"mixed_content_directory\",\n    \"expected_output\": {\n      \"Definitions\": [\n        \"\\tDefinition1\",\n        \"\\tDefinition2\",\n        \"\\tDefinition3\"\n      ]\n    },\n    \"test_aspect\": \"Testing behavior when the directory contains a mix of files (non-specification files should be ignored).\"\n  },\n  \"test_case8\": {\n    \"input\": \"definitions_with_whitespace_directory\",\n    \"expected_output\": {\n      \"Definitions\": [\n        \"\\tDefinition With Spaces\",\n        \"\\tAnother Definition\"\n      ]\n    },\n    \"test_aspect\": \"Testing behavior when definitions contain leading/trailing whitespace to ensure proper handling.\"\n  },\n  \"test_case9\": {\n    \"input\": \"nested_directory_structure\",\n    \"expected_output\": {\n      \"error\": \"AssertionError\",\n      \"message\": \"The specified directory does not exist.\"\n    },\n    \"test_aspect\": \"Testing behavior when a nested directory is provided as input but does not exist.\"\n  },\n  \"test_case10\": {\n    \"input\": \"directory_with_invalid_files\",\n    \"expected_output\": {\n      \"Definitions\": [\n        \"\\tValidDefinition\"\n      ]\n    },\n    \"test_aspect\": \"Testing behavior when the directory contains invalid files to ensure only valid definitions are returned.\"\n  }\n}\n```"}
{"index": 1179, "preference": "functionality", "prompt": "You are tasked with implementing a simple message builder class in C++. The class should allow the addition of message strings with corresponding IDs, and provide a method to retrieve a message by its ID.\n\nYou are given the following code snippet as a starting point:\n```cpp\nbuilder->Add(\"gaiaLoading\", IDS_LOGIN_GAIA_LOADING_MESSAGE);\n```\nHere, `builder` is a pointer to an instance of the message builder class, and `IDS_LOGIN_GAIA_LOADING_MESSAGE` is a constant representing the ID of the message \"gaiaLoading\".\n\nYour task is to implement the `MessageBuilder` class with the following requirements:\n- The `Add` method should take a message string and its corresponding ID, and store them for later retrieval.\n- The `GetMessage` method should take an ID as input and return the corresponding message string. If the ID is not found, it should return an empty string.\n\nYour implementation should be able to handle multiple message additions and retrievals.\n\nImplement the `MessageBuilder` class and demonstrate its usage by adding messages and retrieving them using their IDs.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"message\": \"Hello World\",\n      \"id\": 1\n    },\n    \"expected_output\": \"Hello World\",\n    \"test_aspect\": \"Adding a message and retrieving by ID\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"message\": \"Goodbye!\",\n      \"id\": 2\n    },\n    \"expected_output\": \"Goodbye!\",\n    \"test_aspect\": \"Adding another message and retrieving by ID\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"id\": 999\n    },\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Retrieving a message that does not exist\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"message\": \"Error Loading\",\n      \"id\": 3\n    },\n    \"expected_output\": \"Error Loading\",\n    \"test_aspect\": \"Adding a message and ensuring it can be retrieved correctly\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"message\": \"\",\n      \"id\": 4\n    },\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Adding an empty message and retrieving it\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"message\": \"Welcome to the system\",\n      \"id\": 5\n    },\n    \"expected_output\": \"Welcome to the system\",\n    \"test_aspect\": \"Adding a message and retrieving multiple messages\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"id\": 5\n    },\n    \"expected_output\": \"Welcome to the system\",\n    \"test_aspect\": \"Retrieving a previously stored message by ID\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"message\": \"Processing...\",\n      \"id\": 6\n    },\n    \"expected_output\": \"Processing...\",\n    \"test_aspect\": \"Adding a message with special characters and retrieving it\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"id\": 6\n    },\n    \"expected_output\": \"Processing...\",\n    \"test_aspect\": \"Retrieving a message with special characters\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"message\": \"Finalizing process\",\n      \"id\": 7\n    },\n    \"expected_output\": \"Finalizing process\",\n    \"test_aspect\": \"Adding a message and ensuring retrieval works after multiple additions\"\n  }\n}\n```"}
{"index": 488, "preference": "functionality", "prompt": "You are tasked with implementing a signal handling mechanism in C++ to capture the Ctrl-C event and perform a specific action when the user triggers this signal. The given code snippet is a part of a namespace `mimir` and declares an external variable `signaled` of type `sig_atomic_t`, which is used to indicate the occurrence of the Ctrl-C event.\n\nYour task is to complete the signal handling mechanism by writing a function that sets up a signal handler for Ctrl-C and updates the `signaled` variable when the signal is received. Additionally, you need to implement a function that performs a specific action when the Ctrl-C signal is captured.\n\nWrite the following functions:\n1. `void handleCtrlC(int signal)`: A signal handler function that sets the `signaled` variable to indicate the occurrence of the Ctrl-C event.\n2. `void performActionOnCtrlC()`: A function that performs a specific action when the Ctrl-C signal is captured. For this problem, you can simply print a message indicating the capture of the Ctrl-C signal.\n\nYou should use the standard C++ library for signal handling.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Trigger Ctrl-C during program execution\",\n    \"expected_output\": \"Captured Ctrl-C signal.\",\n    \"test_aspect\": \"Verifies if the signal handler is correctly invoked when Ctrl-C is pressed.\"\n  },\n  \"test_case2\": {\n    \"input\": \"No Ctrl-C signal triggered\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Ensures that the program runs without interruption and does not produce output when Ctrl-C is not pressed.\"\n  },\n  \"test_case3\": {\n    \"input\": \"Call performActionOnCtrlC() directly\",\n    \"expected_output\": \"Captured Ctrl-C signal.\",\n    \"test_aspect\": \"Checks if the action function works properly when called directly, simulating the Ctrl-C behavior.\"\n  },\n  \"test_case4\": {\n    \"input\": \"Simulate rapid pressing of Ctrl-C\",\n    \"expected_output\": \"Captured Ctrl-C signal.\\nCaptured Ctrl-C signal.\",\n    \"test_aspect\": \"Tests the ability of the handler to respond correctly to multiple signals in rapid succession.\"\n  },\n  \"test_case5\": {\n    \"input\": \"Setup signal handler multiple times\",\n    \"expected_output\": \"Captured Ctrl-C signal.\",\n    \"test_aspect\": \"Verifies that re-setting the signal handler does not affect the program's ability to capture the signal.\"\n  },\n  \"test_case6\": {\n    \"input\": \"Program runs for an extended period\",\n    \"expected_output\": \"No output until Ctrl-C is pressed.\",\n    \"test_aspect\": \"Checks that the program continues to run correctly without output until the signal is captured.\"\n  },\n  \"test_case7\": {\n    \"input\": \"Check the value of signaled after Ctrl-C\",\n    \"expected_output\": \"signaled = 1\",\n    \"test_aspect\": \"Verifies that the signaled variable is correctly updated to indicate the Ctrl-C signal was received.\"\n  },\n  \"test_case8\": {\n    \"input\": \"Simulate Ctrl-C after some computation\",\n    \"expected_output\": \"Captured Ctrl-C signal.\",\n    \"test_aspect\": \"Ensures the program can capture the signal even after performing other computations.\"\n  },\n  \"test_case9\": {\n    \"input\": \"Run program with no external interruptions\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Confirms that the program does not produce unexpected outputs or errors if run continuously without Ctrl-C.\"\n  },\n  \"test_case10\": {\n    \"input\": \"Test program termination without Ctrl-C\",\n    \"expected_output\": \"Program exits cleanly without Ctrl-C.\",\n    \"test_aspect\": \"Checks that the program can exit normally without requiring a Ctrl-C signal.\"\n  }\n}\n```"}
{"index": 1747, "preference": "functionality", "prompt": "You are tasked with creating a Python class that represents a student. The class should have a property `name` with a setter method that enforces certain constraints on the input name. The setter method should ensure that the name provided is a string and is not empty. If the input name does not meet these criteria, an appropriate error message should be displayed. Your task is to implement the setter method for the `name` property of the `Student` class.\n\nYour task is to complete the implementation of the `name` setter method in the `Student` class. The method should accept a parameter `name` and ensure that it is a non-empty string. If the input `name` is not a string or is empty, the method should raise a `ValueError` with an appropriate error message.\n\n```python\nclass Student:\n    def __init__(self, name):\n        self._name = name\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        # Your implementation here\n        pass\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"\",\n    \"expected_output\": \"ValueError: Name cannot be empty\",\n    \"test_aspect\": \"Testing with an empty string to ensure ValueError is raised\"\n  },\n  \"test_case2\": {\n    \"input\": 123,\n    \"expected_output\": \"ValueError: Name must be a string\",\n    \"test_aspect\": \"Testing with an integer to ensure ValueError is raised\"\n  },\n  \"test_case3\": {\n    \"input\": None,\n    \"expected_output\": \"ValueError: Name must be a string\",\n    \"test_aspect\": \"Testing with None to ensure ValueError is raised\"\n  },\n  \"test_case4\": {\n    \"input\": \"John Doe\",\n    \"expected_output\": \"John Doe\",\n    \"test_aspect\": \"Testing with a valid string to ensure name is set correctly\"\n  },\n  \"test_case5\": {\n    \"input\": \"   \",\n    \"expected_output\": \"ValueError: Name cannot be empty\",\n    \"test_aspect\": \"Testing with whitespace string to ensure ValueError is raised\"\n  },\n  \"test_case6\": {\n    \"input\": [\"John\", \"Doe\"],\n    \"expected_output\": \"ValueError: Name must be a string\",\n    \"test_aspect\": \"Testing with a list to ensure ValueError is raised\"\n  },\n  \"test_case7\": {\n    \"input\": \"Alice Wonderland\",\n    \"expected_output\": \"Alice Wonderland\",\n    \"test_aspect\": \"Testing with a valid string containing spaces to ensure name is set correctly\"\n  },\n  \"test_case8\": {\n    \"input\": \"Bob@2023\",\n    \"expected_output\": \"Bob@2023\",\n    \"test_aspect\": \"Testing with a valid string containing special characters to ensure name is set correctly\"\n  },\n  \"test_case9\": {\n    \"input\": \"A\" * 1000,\n    \"expected_output\": \"A\" * 1000,\n    \"test_aspect\": \"Testing with a long valid string to ensure name is set correctly\"\n  },\n  \"test_case10\": {\n    \"input\": \"User123\",\n    \"expected_output\": \"User123\",\n    \"test_aspect\": \"Testing with a valid alphanumeric string to ensure name is set correctly\"\n  }\n}\n```"}
{"index": 39977, "preference": "functionality", "prompt": "You are working on a project that involves processing audio data for a machine learning task. The code snippet provided is a part of a data preprocessing script. The script reads a list of audio files from a dataset and copies them to a new location. However, the code is incomplete and contains placeholders denoted by `<gh_stars>` and `<path to dataset>`. Your task is to complete the script by replacing these placeholders with appropriate values and ensuring that the audio files are copied correctly.\n\nYour task is to write a Python function that takes the base path to the dataset and the range of GitHub stars `<gh_stars>` as input and completes the data preprocessing script. The function should copy the audio files from the specified locations to the new destination based on the provided range of GitHub stars.\n\nComplete the function `copy_audio_files(basepath, gh_stars)`:\n\n```python\nimport os\nimport shutil\nimport tqdm\n\ndef copy_audio_files(basepath, gh_stars):\n    start, end = map(int, gh_stars.split('-'))\n    for dataset_type in ['train_bg', 'dev_bg']:\n        with open(os.path.join(basepath, f\"{start}_{end}\", f\"{dataset_type}/wav.scp\")) as f:\n            lines = f.read().strip().split('\\n')\n        for line in tqdm.tqdm(lines):\n            name = line.strip().split(' ')[0]\n            source_path = os.path.join(basepath, f\"audio/{name}.flac\")\n            destination_path = os.path.join(basepath, f\"{start}_{end}\", f\"{dataset_type}_wav/{name}.flac\")\n            shutil.copy(source_path, destination_path)\n```\n\nThe function `copy_audio_files` takes the base path to the dataset and the range of GitHub stars as input. It reads the list of audio files from the specified locations and copies them to a new destination based on the provided range of GitHub stars. The function uses the `shutil.copy` method to perform the file copy operation and `tqdm` for progress visualization.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"100-200\"\n    },\n    \"expected_output\": \"Files copied from /path/to/dataset/audio/filename1.flac to /path/to/dataset/100_200/train_bg_wav/filename1.flac, and similar for other files listed in wav.scp\",\n    \"test_aspect\": \"Standard functionality for valid input\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"0-50\"\n    },\n    \"expected_output\": \"Files copied from /path/to/dataset/audio/filename2.flac to /path/to/dataset/0_50/train_bg_wav/filename2.flac, and similar for other files listed in wav.scp\",\n    \"test_aspect\": \"Standard functionality for lower range of GitHub stars\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"200-300\"\n    },\n    \"expected_output\": \"Files copied from /path/to/dataset/audio/filename3.flac to /path/to/dataset/200_300/train_bg_wav/filename3.flac, and similar for other files listed in wav.scp\",\n    \"test_aspect\": \"Standard functionality for upper range of GitHub stars\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"50-50\"\n    },\n    \"expected_output\": \"Files copied from /path/to/dataset/audio/filename4.flac to /path/to/dataset/50_50/train_bg_wav/filename4.flac, and similar for other files listed in wav.scp\",\n    \"test_aspect\": \"Boundary case where start and end GitHub stars are the same\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"basepath\": \"/invalid/path\",\n      \"gh_stars\": \"100-200\"\n    },\n    \"expected_output\": \"Error regarding invalid base path\",\n    \"test_aspect\": \"Handling of an invalid base path scenario\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"300-200\"\n    },\n    \"expected_output\": \"Error regarding the range of GitHub stars being invalid\",\n    \"test_aspect\": \"Handling of invalid GitHub stars range input\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"100-100\"\n    },\n    \"expected_output\": \"Files copied based on the specified range, even if it's a single file\",\n    \"test_aspect\": \"Functionality for a single file copy case\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"100-200\"\n    },\n    \"expected_output\": \"Correct files copied regardless of varying numbers of audio files listed in wav.scp\",\n    \"test_aspect\": \"Handling of varying number of audio files in wav.scp\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"999-1000\"\n    },\n    \"expected_output\": \"No files copied, as there are no matching records in wav.scp\",\n    \"test_aspect\": \"Functionality when there are no matching files to copy\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"basepath\": \"/path/to/dataset\",\n      \"gh_stars\": \"100-200\"\n    },\n    \"expected_output\": \"Progress displayed correctly indicating files being copied\",\n    \"test_aspect\": \"Output progress functionality verification\"\n  }\n}\n```"}
{"index": 2335, "preference": "functionality", "prompt": "You are tasked with implementing a DPC (Deferred Procedure Call) mechanism in C++ for handling asynchronous events. The DPC object should be able to call a supplied function with context when it fires. Your goal is to create a class that encapsulates this functionality and returns a handle to the DPC object.\n\nYour task is to implement the `DPC` class with the following specifications:\n\n```cpp\nclass DPC {\npublic:\n    using FunctionType = void(*)(void*);\n\n    // Constructor that takes a function and context as arguments\n    DPC(FunctionType function, void* context);\n\n    // Method to set the DPC object to fire after a specified delay in milliseconds\n    void SetTimer(unsigned int delayMs);\n\n    // Method to cancel the DPC object\n    void Cancel();\n\n    // Destructor to release any allocated resources\n    ~DPC();\n};\n```\n\nThe `DPC` class should allow the user to create a DPC object with a given function and context, set a timer for the DPC to fire after a specified delay, and cancel the DPC if needed. The `FunctionType` is a pointer to a function that takes a `void*` context parameter and returns `void`.\n\nYour task is to implement the `DPC` class with the specified functionality.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"contextData\",\n      \"delayMs\": 100\n    },\n    \"expected_output\": \"DPC is set to fire after 100 milliseconds\",\n    \"test_aspect\": \"Test that DPC can be successfully created with a function and context.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"contextData\",\n      \"delayMs\": 0\n    },\n    \"expected_output\": \"DPC fires immediately\",\n    \"test_aspect\": \"Test behavior when delay is set to 0 milliseconds.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"contextData\",\n      \"delayMs\": 500\n    },\n    \"expected_output\": \"DPC fires after 500 milliseconds\",\n    \"test_aspect\": \"Verify the timer functionality with a valid delay.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"contextData\"\n    },\n    \"expected_output\": \"DPC can be canceled\",\n    \"test_aspect\": \"Test that DPC can be canceled before firing.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"contextData\",\n      \"delayMs\": 200\n    },\n    \"expected_output\": \"DPC fires after 200 milliseconds\",\n    \"test_aspect\": \"Verify that a DPC fires after the specified delay.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"nullptr\",\n      \"delayMs\": 100\n    },\n    \"expected_output\": \"DPC fires with null context\",\n    \"test_aspect\": \"Test DPC behavior with a null context.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"function\": \"nullptr\",\n      \"context\": \"contextData\",\n      \"delayMs\": 100\n    },\n    \"expected_output\": \"Error: Invalid function pointer\",\n    \"test_aspect\": \"Verify that the DPC class handles an invalid function pointer correctly.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"contextData\",\n      \"delayMs\": 1000\n    },\n    \"expected_output\": \"DPC fires after 1000 milliseconds\",\n    \"test_aspect\": \"Test DPC with the maximum reasonable delay.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"contextData\",\n      \"delayMs\": 1500\n    },\n    \"expected_output\": \"DPC fires after 1500 milliseconds\",\n    \"test_aspect\": \"Verify that DPC can handle longer delays correctly.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"function\": \"sampleFunction\",\n      \"context\": \"contextData\",\n      \"delayMs\": 0\n    },\n    \"expected_output\": \"DPC fires immediately\",\n    \"test_aspect\": \"Test repeated immediate firing of DPC.\"\n  }\n}\n```"}
{"index": 15498, "preference": "functionality", "prompt": "You are tasked with implementing a Python class for a fully connected head in a machine learning model. The class should have a constructor with specific arguments and default values.\n\nYour task is to complete the constructor for the `FullyConnectedHead` class, ensuring that it initializes the class attributes according to the provided specifications. The class should have the following attributes:\n- `unique_id`: A unique identifier for the head.\n- `in_plane`: An integer representing the input dimension for the fully connected head.\n- `zero_init_bias`: A boolean indicating whether the bias should be initialized to zero. It has a default value of `False`.\n\nComplete the constructor for the `FullyConnectedHead` class to initialize these attributes based on the provided arguments and default values.\n\nYour implementation should adhere to the following guidelines:\n- Use the provided argument names and default values in the constructor.\n- Ensure that the constructor initializes the class attributes correctly.\n\n```python\nclass FullyConnectedHead:\n    def __init__(self, unique_id, in_plane, zero_init_bias=False):\n        # Your implementation here\n        pass\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"unique_id\": 1,\n      \"in_plane\": 64,\n      \"zero_init_bias\": false\n    },\n    \"expected_output\": {\n      \"unique_id\": 1,\n      \"in_plane\": 64,\n      \"zero_init_bias\": false\n    },\n    \"test_aspect\": \"Basic instantiation with default zero_init_bias set to False.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"unique_id\": 2,\n      \"in_plane\": 128,\n      \"zero_init_bias\": true\n    },\n    \"expected_output\": {\n      \"unique_id\": 2,\n      \"in_plane\": 128,\n      \"zero_init_bias\": true\n    },\n    \"test_aspect\": \"Basic instantiation with zero_init_bias set to True.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"unique_id\": 3,\n      \"in_plane\": 0\n    },\n    \"expected_output\": {\n      \"unique_id\": 3,\n      \"in_plane\": 0,\n      \"zero_init_bias\": false\n    },\n    \"test_aspect\": \"Handling input dimension in_plane as zero, with default zero_init_bias.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"unique_id\": 4,\n      \"in_plane\": -10,\n      \"zero_init_bias\": true\n    },\n    \"expected_output\": {\n      \"unique_id\": 4,\n      \"in_plane\": -10,\n      \"zero_init_bias\": true\n    },\n    \"test_aspect\": \"Testing negative input dimension in_plane with zero_init_bias set to True.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"unique_id\": 5,\n      \"in_plane\": 1024\n    },\n    \"expected_output\": {\n      \"unique_id\": 5,\n      \"in_plane\": 1024,\n      \"zero_init_bias\": false\n    },\n    \"test_aspect\": \"Testing large input dimension in_plane with default zero_init_bias.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"unique_id\": 6,\n      \"in_plane\": 256,\n      \"zero_init_bias\": false\n    },\n    \"expected_output\": {\n      \"unique_id\": 6,\n      \"in_plane\": 256,\n      \"zero_init_bias\": false\n    },\n    \"test_aspect\": \"Standard case with typical in_plane and zero_init_bias set to False.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"unique_id\": 7,\n      \"in_plane\": 512,\n      \"zero_init_bias\": true\n    },\n    \"expected_output\": {\n      \"unique_id\": 7,\n      \"in_plane\": 512,\n      \"zero_init_bias\": true\n    },\n    \"test_aspect\": \"Testing standard case with in_plane as 512 and zero_init_bias as True.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"unique_id\": 8,\n      \"in_plane\": 1,\n      \"zero_init_bias\": false\n    },\n    \"expected_output\": {\n      \"unique_id\": 8,\n      \"in_plane\": 1,\n      \"zero_init_bias\": false\n    },\n    \"test_aspect\": \"Testing minimum valid input dimension in_plane with default zero_init_bias.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"unique_id\": 9,\n      \"in_plane\": 2048,\n      \"zero_init_bias\": false\n    },\n    \"expected_output\": {\n      \"unique_id\": 9,\n      \"in_plane\": 2048,\n      \"zero_init_bias\": false\n    },\n    \"test_aspect\": \"Testing maximum input dimension in_plane with default zero_init_bias.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"unique_id\": 10,\n      \"in_plane\": 16,\n      \"zero_init_bias\": true\n    },\n    \"expected_output\": {\n      \"unique_id\": 10,\n      \"in_plane\": 16,\n      \"zero_init_bias\": true\n    },\n    \"test_aspect\": \"Basic instantiation with in_plane as typical value and zero_init_bias set to True.\"\n  }\n}\n```"}
{"index": 39869, "preference": "functionality", "prompt": "You are tasked with creating a Python function that takes a file path as input and returns the absolute path of the directory containing the file. You should use the `os.path` module to achieve this.\n\nWrite a function called `get_directory_path` that takes a single parameter:\n- `file_path` (string): A string representing the path to a file.\n\nThe function should return the absolute path of the directory containing the specified file.\n\nFor example, given the file path \"/home/user/documents/example.txt\", the function should return \"/home/user/documents\".\n\nYour task is to implement the `get_directory_path` function using the `os.path` module to obtain the absolute path of the directory containing the specified file.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"/home/user/documents/example.txt\",\n    \"expected_output\": \"/home/user/documents\",\n    \"test_aspect\": \"Standard input with a valid file path\"\n  },\n  \"test_case2\": {\n    \"input\": \"C:\\\\Users\\\\User\\\\Documents\\\\file.docx\",\n    \"expected_output\": \"C:\\\\Users\\\\User\\\\Documents\",\n    \"test_aspect\": \"Standard input with a Windows file path\"\n  },\n  \"test_case3\": {\n    \"input\": \"/single_file.txt\",\n    \"expected_output\": \"/\",\n    \"test_aspect\": \"Input with a single file in the root directory\"\n  },\n  \"test_case4\": {\n    \"input\": \"relative/path/to/file.txt\",\n    \"expected_output\": \"/absolute/path/to\",\n    \"test_aspect\": \"Relative file path in a hypothetical structure (assumed absolute path for testing)\"\n  },\n  \"test_case5\": {\n    \"input\": \"/home/user/documents/\",\n    \"expected_output\": \"/home/user/documents\",\n    \"test_aspect\": \"Input with a directory path instead of a file\"\n  },\n  \"test_case6\": {\n    \"input\": \"/home/user/empty_dir/\",\n    \"expected_output\": \"/home/user/empty_dir\",\n    \"test_aspect\": \"Input with an empty directory path\"\n  },\n  \"test_case7\": {\n    \"input\": \"\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Empty input string\"\n  },\n  \"test_case8\": {\n    \"input\": \"/path/to/file/with/space in name.txt\",\n    \"expected_output\": \"/path/to/file\",\n    \"test_aspect\": \"File path with spaces in the file name\"\n  },\n  \"test_case9\": {\n    \"input\": \"/path/to/special@char$file.txt\",\n    \"expected_output\": \"/path/to/special@char\",\n    \"test_aspect\": \"File path with special characters in the file name\"\n  },\n  \"test_case10\": {\n    \"input\": \"/home/user/documents/..//example.txt\",\n    \"expected_output\": \"/home/user/documents/..\",\n    \"test_aspect\": \"File path with redundant separators\"\n  }\n}\n```"}
{"index": 36826, "preference": "functionality", "prompt": "You are given a Python code snippet that involves a list named `names`. The code snippet contains three lines of code, each preceded by a comment in a different language. Your task is to understand the code snippet and write a Python function that performs the same operations as the code snippet.\n\nThe operations to be performed are:\n1. Print the length of the list `names`.\n2. Print the length of the list `names` again.\n3. Retrieve an element from the list `names` using an index.\n\nYour task is to write a Python function `perform_operations(names)` that takes a list `names` as input and performs the above operations. The function should return the element retrieved from the list using an index.\n\nExample:\nIf `names = ['Alice', 'Bob', 'Charlie']`, the function should return the element at index 1 (i.e., 'Bob') and print the length of the list `names` twice.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"['Alice', 'Bob', 'Charlie']\",\n    \"expected_output\": {\n      \"length_prints\": [3, 3],\n      \"returned_element\": \"Bob\"\n    },\n    \"test_aspect\": \"Basic functionality with a typical list\"\n  },\n  \"test_case2\": {\n    \"input\": \"[]\",\n    \"expected_output\": {\n      \"length_prints\": [0, 0],\n      \"returned_element\": null\n    },\n    \"test_aspect\": \"Handling of empty list\"\n  },\n  \"test_case3\": {\n    \"input\": \"['Alice']\",\n    \"expected_output\": {\n      \"length_prints\": [1, 1],\n      \"returned_element\": \"Alice\"\n    },\n    \"test_aspect\": \"Single element list\"\n  },\n  \"test_case4\": {\n    \"input\": \"['Alice', 'Bob']\",\n    \"expected_output\": {\n      \"length_prints\": [2, 2],\n      \"returned_element\": \"Bob\"\n    },\n    \"test_aspect\": \"Two element list\"\n  },\n  \"test_case5\": {\n    \"input\": \"['Alice', 'Bob', 'Charlie', 'Dave']\",\n    \"expected_output\": {\n      \"length_prints\": [4, 4],\n      \"returned_element\": \"Bob\"\n    },\n    \"test_aspect\": \"Four element list\"\n  },\n  \"test_case6\": {\n    \"input\": \"['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\",\n    \"expected_output\": {\n      \"length_prints\": [5, 5],\n      \"returned_element\": \"Bob\"\n    },\n    \"test_aspect\": \"Five element list\"\n  },\n  \"test_case7\": {\n    \"input\": \"['Alice', 'Bob', 'Charlie']\",\n    \"expected_output\": {\n      \"length_prints\": [3, 3],\n      \"returned_element\": \"Charlie\"\n    },\n    \"test_aspect\": \"Retrieving last element in a typical list\"\n  },\n  \"test_case8\": {\n    \"input\": \"['Alice', 'Bob', 'Charlie']\",\n    \"expected_output\": {\n      \"length_prints\": [3, 3],\n      \"returned_element\": \"Alice\"\n    },\n    \"test_aspect\": \"Retrieving first element in a typical list\"\n  },\n  \"test_case9\": {\n    \"input\": \"['Alice', 'Bob', 'Charlie', 'Dave', 'Eve', 'Frank']\",\n    \"expected_output\": {\n      \"length_prints\": [6, 6],\n      \"returned_element\": \"Bob\"\n    },\n    \"test_aspect\": \"Six element list\"\n  },\n  \"test_case10\": {\n    \"input\": \"['Alice', 'Bob']\",\n    \"expected_output\": {\n      \"length_prints\": [2, 2],\n      \"returned_element\": \"Bob\"\n    },\n    \"test_aspect\": \"Retrieving element from a two-element list\"\n  }\n}\n```"}
{"index": 20687, "preference": "functionality", "prompt": "You are tasked with implementing a function to calculate the maximum exponent array for a given precision. The maximum exponent array is used in the context of a Bancor formula, which is a mathematical formula used in the field of finance and economics. The function should take the maximum precision as input and return an array of uint256 values representing the maximum exponents.\n\nThe maximum exponent array is used in the Bancor formula to optimize the calculation of exponential functions, which are commonly used in financial models. The array is precomputed and stored for efficient access during runtime.\n\nYour task is to implement the function `getMaxExpArray` that takes the maximum precision as input and returns the maximum exponent array. The array should contain uint256 values and its length should be `MAX_PRECISION + 1`.\n\nYou should assume that the `getMaxExpArray` function is part of a larger smart contract or program, and the returned array will be used in subsequent calculations within that context.\n\nWrite the `getMaxExpArray` function and ensure that it correctly computes and returns the maximum exponent array based on the given precision.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": 0,\n    \"expected_output\": [1],\n    \"test_aspect\": \"Testing minimum precision, should return an array of length 1 with the value of 1.\"\n  },\n  \"test_case2\": {\n    \"input\": 1,\n    \"expected_output\": [1, 2],\n    \"test_aspect\": \"Testing precision of 1, should return an array of length 2 with values [1, 2].\"\n  },\n  \"test_case3\": {\n    \"input\": 2,\n    \"expected_output\": [1, 2, 4],\n    \"test_aspect\": \"Testing precision of 2, should return an array of length 3 with values [1, 2, 4].\"\n  },\n  \"test_case4\": {\n    \"input\": 3,\n    \"expected_output\": [1, 2, 4, 8],\n    \"test_aspect\": \"Testing precision of 3, should return an array of length 4 with values [1, 2, 4, 8].\"\n  },\n  \"test_case5\": {\n    \"input\": 4,\n    \"expected_output\": [1, 2, 4, 8, 16],\n    \"test_aspect\": \"Testing precision of 4, should return an array of length 5 with values [1, 2, 4, 8, 16].\"\n  },\n  \"test_case6\": {\n    \"input\": 5,\n    \"expected_output\": [1, 2, 4, 8, 16, 32],\n    \"test_aspect\": \"Testing precision of 5, should return an array of length 6 with values [1, 2, 4, 8, 16, 32].\"\n  },\n  \"test_case7\": {\n    \"input\": 10,\n    \"expected_output\": [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024],\n    \"test_aspect\": \"Testing precision of 10, should return an array of length 11 with powers of 2 up to 10.\"\n  },\n  \"test_case8\": {\n    \"input\": 20,\n    \"expected_output\": [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576],\n    \"test_aspect\": \"Testing larger precision of 20, ensuring the output array length is 21.\"\n  },\n  \"test_case9\": {\n    \"input\": 30,\n    \"expected_output\": [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824],\n    \"test_aspect\": \"Testing maximum precision of 30, checking if the output correctly computes up to 30.\"\n  },\n  \"test_case10\": {\n    \"input\": -1,\n    \"expected_output\": \"Error or empty array\",\n    \"test_aspect\": \"Testing negative precision input, should handle gracefully without crashing.\"\n  }\n}\n```"}
{"index": 29372, "preference": "functionality", "prompt": "You are given a string `num` that contains only digits and an integer `target`. Your task is to write a function that returns all possible ways to add the binary operators '+', '-', or '*' between the digits of `num` so that the resultant expression evaluates to the target value.\n\nWrite a function `addOperators` that takes in a string `num` and an integer `target` as input and returns a list of strings representing all possible expressions that evaluate to the target value.\n\nFunction signature: \n```python\ndef addOperators(num: str, target: int) -> List[str]:\n    pass\n```\n\n**Input:**\n- The input consists of two arguments:\n  - A string `num` (1 <= len(num) <= 10) containing only digits.\n  - An integer `target` (-10^9 <= target <= 10^9).\n\n**Output:**\n- Return a list of strings representing all possible expressions that evaluate to the target value. The strings should be in any order.\n\n**Note:**\n- The expression should be evaluated from left to right, and there should be no leading zeros in the expression.\n\n**Example:**\n```python\nnum = \"123\"\ntarget = 6\naddOperators(num, target)\nOutput: [\"1+2+3\", \"1*2*3\"]\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"num\": \"123\",\n      \"target\": 6\n    },\n    \"expected_output\": [\"1+2+3\", \"1*2*3\"],\n    \"test_aspect\": \"Basic functionality with simple addition and multiplication\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"num\": \"123\",\n      \"target\": 7\n    },\n    \"expected_output\": [\"1+2*3\"],\n    \"test_aspect\": \"Ensuring multiplication and addition order is handled correctly\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"num\": \"232\",\n      \"target\": 8\n    },\n    \"expected_output\": [\"2*3+2\", \"2+3*2\"],\n    \"test_aspect\": \"Testing for multiple valid expressions resulting in the target\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"num\": \"345\",\n      \"target\": 12\n    },\n    \"expected_output\": [\"3+4+5\"],\n    \"test_aspect\": \"Single valid expression using addition\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"num\": \"105\",\n      \"target\": 5\n    },\n    \"expected_output\": [\"1*0+5\", \"10-5\"],\n    \"test_aspect\": \"Testing inclusion of zero and ensuring no leading zeros in expressions\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"num\": \"00\",\n      \"target\": 0\n    },\n    \"expected_output\": [\"0+0\", \"0-0\", \"0*0\"],\n    \"test_aspect\": \"Handling of leading zero scenarios\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"num\": \"12345\",\n      \"target\": 12345\n    },\n    \"expected_output\": [\"12345\"],\n    \"test_aspect\": \"Test with the input as the target, should return the input as a valid expression\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"num\": \"999\",\n      \"target\": 1000\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Test case with no valid expressions resulting in a target greater than the maximum possible value\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"num\": \"123456789\",\n      \"target\": 45\n    },\n    \"expected_output\": [\"1+2+3+4+5+6+7+8+9\", \"1*2*3*4*5-6-7-8-9\", \"12+34-5+6-7+8-9\"],\n    \"test_aspect\": \"Testing larger input with multiple digits and combinations of operations\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"num\": \"123\",\n      \"target\": -1\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Test case where no combination of operations can yield a negative target\"\n  }\n}\n```"}
{"index": 39828, "preference": "functionality", "prompt": "You are tasked with implementing a Python function to copy metadata from one GeoTIFF file to another. The metadata contains information about the geographic data, such as the coordinate system, projection, and other relevant details. The function should take two input file paths: the source GeoTIFF file from which the metadata will be copied, and the destination GeoTIFF file to which the metadata will be applied. The function should read the metadata from the source file and then write it to the destination file.\n\nYour task is to complete the `copy_metadata` function, ensuring that it correctly reads the metadata from the source file and applies it to the destination file. You can assume that the necessary libraries and functions for working with GeoTIFF files are available.\n\n```python\nimport argparse\nfrom osgeo import gdal\nfrom osgeo import osr\n\ndef copy_metadata(infile, outfile):\n    # Open the source GeoTIFF file\n    source_ds = gdal.Open(infile, gdal.GA_ReadOnly)\n    if source_ds is None:\n        raise Exception(\"Failed to open the source GeoTIFF file\")\n\n    # Read the metadata from the source file\n    metadata = source_ds.GetMetadata()\n\n    # Open the destination GeoTIFF file\n    dest_ds = gdal.Open(outfile, gdal.GA_Update)\n    if dest_ds is None:\n        raise Exception(\"Failed to open the destination GeoTIFF file\")\n\n    # Set the metadata in the destination file\n    dest_ds.SetMetadata(metadata)\n\n    # Close the files\n    source_ds = None\n    dest_ds = None\n```", "test_cases": "{\n  \"test_case1\": {\n    \"input\": {\n      \"infile\": \"valid_source.tif\",\n      \"outfile\": \"valid_destination.tif\"\n    },\n    \"expected_output\": \"Metadata copied successfully.\",\n    \"test_aspect\": \"Standard case with valid source and destination GeoTIFF files.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"infile\": \"non_existent_source.tif\",\n      \"outfile\": \"valid_destination.tif\"\n    },\n    \"expected_output\": \"Exception: Failed to open the source GeoTIFF file\",\n    \"test_aspect\": \"Source file does not exist.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"infile\": \"valid_source.tif\",\n      \"outfile\": \"non_existent_destination.tif\"\n    },\n    \"expected_output\": \"Exception: Failed to open the destination GeoTIFF file\",\n    \"test_aspect\": \"Destination file does not exist.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"infile\": \"empty_source.tif\",\n      \"outfile\": \"valid_destination.tif\"\n    },\n    \"expected_output\": \"Metadata copied successfully.\",\n    \"test_aspect\": \"Source file is empty but still valid. Metadata may be empty.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"infile\": \"valid_source_with_metadata.tif\",\n      \"outfile\": \"valid_destination_without_metadata.tif\"\n    },\n    \"expected_output\": \"Metadata copied successfully.\",\n    \"test_aspect\": \"Copying metadata from a source with valid metadata to a destination without any metadata.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"infile\": \"valid_source.tif\",\n      \"outfile\": \"read_only_destination.tif\"\n    },\n    \"expected_output\": \"Exception: Failed to open the destination GeoTIFF file\",\n    \"test_aspect\": \"Destination file is read-only and cannot be modified.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"infile\": \"valid_source.tif\",\n      \"outfile\": \"valid_destination.tif\"\n    },\n    \"expected_output\": {\n      \"metadata\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n      }\n    },\n    \"test_aspect\": \"Ensure metadata structure is correct after copying.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"infile\": \"valid_source_with_special_chars.tif\",\n      \"outfile\": \"valid_destination.tif\"\n    },\n    \"expected_output\": \"Metadata copied successfully.\",\n    \"test_aspect\": \"Handling metadata with special characters in keys and values.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"infile\": \"valid_source_with_large_metadata.tif\",\n      \"outfile\": \"valid_destination.tif\"\n    },\n    \"expected_output\": \"Metadata copied successfully.\",\n    \"test_aspect\": \"Copying metadata with a large number of entries.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"infile\": \"valid_source.tif\",\n      \"outfile\": \"valid_destination.tif\"\n    },\n    \"expected_output\": \"Exception: Failed to open the destination GeoTIFF file\",\n    \"test_aspect\": \"Destination file is in a format that does not support metadata writing.\"\n  }\n}"}
{"index": 132, "preference": "functionality", "prompt": "You are tasked with implementing a function that determines the index of the next child to be processed based on certain conditions. The function takes in the index of the previously processed child and the result of the last execution. Additionally, there is a helper function `VerifyExecution` that checks the validity of the last execution, and a function `GetChildrenNum` that returns the total number of children to be processed.\n\nThe function should follow these rules:\n1. If the previous child index is `BTSpecialChild::NotInitialized`, set the index of the next child to 0.\n2. If the last execution was valid (as per `VerifyExecution`) and incrementing the previous child index by 1 does not exceed the total number of children, set the index of the next child to the incremented value of the previous child index.\n\nImplement the function to determine the index of the next child to be processed based on the given conditions.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"previous_child_index\": \"BTSpecialChild::NotInitialized\",\n      \"last_execution_result\": true\n    },\n    \"expected_output\": 0,\n    \"test_aspect\": \"Initial case when previous child index is not initialized\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"previous_child_index\": 0,\n      \"last_execution_result\": true\n    },\n    \"expected_output\": 1,\n    \"test_aspect\": \"Valid execution and incrementing previous index within bounds\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"previous_child_index\": 1,\n      \"last_execution_result\": false\n    },\n    \"expected_output\": 1,\n    \"test_aspect\": \"Invalid execution, should not increment previous index\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"previous_child_index\": 2,\n      \"last_execution_result\": true\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"Valid execution with incrementing previous index within bounds\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"previous_child_index\": 3,\n      \"last_execution_result\": true\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"Valid execution with incrementing previous index within bounds\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"previous_child_index\": 4,\n      \"last_execution_result\": true\n    },\n    \"expected_output\": 5,\n    \"test_aspect\": \"Valid execution with incrementing previous index within bounds\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"previous_child_index\": 4,\n      \"last_execution_result\": false\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"Invalid execution, should return previous index\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"previous_child_index\": 5,\n      \"last_execution_result\": true\n    },\n    \"expected_output\": \"Out of bounds error\",\n    \"test_aspect\": \"Valid execution but exceeding total children, should handle edge case\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"previous_child_index\": 0,\n      \"last_execution_result\": true\n    },\n    \"expected_output\": 1,\n    \"test_aspect\": \"Testing with minimum valid index and valid execution\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"previous_child_index\": 0,\n      \"last_execution_result\": false\n    },\n    \"expected_output\": 0,\n    \"test_aspect\": \"Previous index is 0 but execution is invalid, should remain at 0\"\n  }\n}\n```"}
{"index": 13175, "preference": "functionality", "prompt": "You are tasked with creating a Python function that simulates a simple stack data structure. A stack is a Last-In-First-Out (LIFO) data structure, where elements are added and removed from the top of the stack. You need to implement the `Stack` class with the following methods:\n- `push(item)`: Add an item to the top of the stack.\n- `pop()`: Remove and return the item at the top of the stack. If the stack is empty, return None.\n- `peek()`: Return the item at the top of the stack without removing it. If the stack is empty, return None.\n- `is_empty()`: Return True if the stack is empty, otherwise return False.\n\nYou should use a list to store the stack elements and implement the stack operations based on this list.\n\nExample:\n```python\nstack = Stack()\nstack.push(5)\nstack.push(10)\nprint(stack.peek())  # Output: 10\nprint(stack.pop())   # Output: 10\nprint(stack.is_empty())  # Output: False\nprint(stack.pop())   # Output: 5\nprint(stack.pop())   # Output: None\nprint(stack.is_empty())  # Output: True\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"stack = Stack()\\nstack.push(5)\\nstack.push(10)\\nstack.peek()\",\n    \"expected_output\": \"10\",\n    \"test_aspect\": \"Basic push and peek functionality\"\n  },\n  \"test_case2\": {\n    \"input\": \"stack = Stack()\\nstack.push(5)\\nstack.pop()\",\n    \"expected_output\": \"5\",\n    \"test_aspect\": \"Basic push and pop functionality\"\n  },\n  \"test_case3\": {\n    \"input\": \"stack = Stack()\\nstack.pop()\",\n    \"expected_output\": \"None\",\n    \"test_aspect\": \"Pop on empty stack\"\n  },\n  \"test_case4\": {\n    \"input\": \"stack = Stack()\\nstack.push(5)\\nstack.push(10)\\nstack.is_empty()\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Checking non-empty stack\"\n  },\n  \"test_case5\": {\n    \"input\": \"stack = Stack()\\nstack.is_empty()\",\n    \"expected_output\": \"True\",\n    \"test_aspect\": \"Checking empty stack\"\n  },\n  \"test_case6\": {\n    \"input\": \"stack = Stack()\\nstack.push(5)\\nstack.push(10)\\nstack.push(15)\\nstack.pop()\\nstack.peek()\",\n    \"expected_output\": \"10\",\n    \"test_aspect\": \"Multiple pushes and pop, check peek\"\n  },\n  \"test_case7\": {\n    \"input\": \"stack = Stack()\\nstack.push('a')\\nstack.push('b')\\nstack.pop()\\nstack.pop()\",\n    \"expected_output\": \"'a'\",\n    \"test_aspect\": \"Pushing string elements and checking pop\"\n  },\n  \"test_case8\": {\n    \"input\": \"stack = Stack()\\nstack.push(10)\\nstack.push(20)\\nstack.push(30)\\nstack.pop()\\nstack.is_empty()\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Check is_empty after multiple pushes and a pop\"\n  },\n  \"test_case9\": {\n    \"input\": \"stack = Stack()\\nstack.push(1.5)\\nstack.push(2.5)\\nstack.peek()\",\n    \"expected_output\": \"2.5\",\n    \"test_aspect\": \"Pushing float elements and checking peek\"\n  },\n  \"test_case10\": {\n    \"input\": \"stack = Stack()\\nstack.push(1)\\nstack.push(2)\\nstack.push(3)\\nstack.pop()\\nstack.pop()\\nstack.pop()\\nstack.is_empty()\",\n    \"expected_output\": \"True\",\n    \"test_aspect\": \"Check is_empty after all elements are popped\"\n  }\n}\n```"}
{"index": 19743, "preference": "functionality", "prompt": "You are tasked with creating a Python function that generates an RSA key pair and then encrypts and decrypts a message using the generated keys. The function should take in a message as input and return the encrypted message and the decrypted message.\n\nYou are provided with a code snippet that imports the necessary module and initializes a dictionary with hashing algorithms. You can use this code snippet as a reference for the required imports and the dictionary of hashing algorithms.\n\nYour task is to complete the Python function `rsa_encrypt_decrypt` that performs the following steps:\n1. Generate an RSA key pair with a key size of 2048 bits.\n2. Encrypt the input message using the public key from the generated key pair.\n3. Decrypt the encrypted message using the private key from the generated key pair.\n4. Return the encrypted message and the decrypted message as a tuple.\n\nUse the following code snippet as a reference for generating the RSA key pair:\n```python\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\n\ndef rsa_encrypt_decrypt(message):\n    # Generate an RSA key pair with a key size of 2048 bits\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048\n    )\n    public_key = private_key.public_key()\n\n    # Encrypt the input message using the public key\n    encrypted_message = public_key.encrypt(\n        message.encode(),\n        padding.OAEP(\n            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n            algorithm=hashes.SHA256(),\n            label=None\n        )\n    )\n\n    # Decrypt the encrypted message using the private key\n    decrypted_message = private_key.decrypt(\n        encrypted_message,\n        padding.OAEP(\n            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n            algorithm=hashes.SHA256(),\n            label=None\n        )\n    )\n\n    return encrypted_message, decrypted_message.decode()\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Hello, World!\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"Hello, World!\"\n    },\n    \"test_aspect\": \"Basic functionality with a typical message.\"\n  },\n  \"test_case2\": {\n    \"input\": \"\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"\"\n    },\n    \"test_aspect\": \"Handling of empty string input.\"\n  },\n  \"test_case3\": {\n    \"input\": \"1234567890\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"1234567890\"\n    },\n    \"test_aspect\": \"Numeric string as input.\"\n  },\n  \"test_case4\": {\n    \"input\": \"Special characters !@#$%^&*()\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"Special characters !@#$%^&*()\"\n    },\n    \"test_aspect\": \"Input containing special characters.\"\n  },\n  \"test_case5\": {\n    \"input\": \"A very long message that exceeds normal lengths to test boundary conditions.\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"A very long message that exceeds normal lengths to test boundary conditions.\"\n    },\n    \"test_aspect\": \"Handling of long input strings.\"\n  },\n  \"test_case6\": {\n    \"input\": \"Message with unicode characters: 你好, мир, 🐍\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"Message with unicode characters: 你好, мир, 🐍\"\n    },\n    \"test_aspect\": \"Input containing unicode characters.\"\n  },\n  \"test_case7\": {\n    \"input\": \"Maximum length message for RSA encryption\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"Maximum length message for RSA encryption\"\n    },\n    \"test_aspect\": \"Testing maximum length constraints for RSA.\"\n  },\n  \"test_case8\": {\n    \"input\": \"Repeated message \" + \"A\" * 200,\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"Repeated message \" + \"A\" * 200\n    },\n    \"test_aspect\": \"Input with repeated characters to test encryption.\"\n  },\n  \"test_case9\": {\n    \"input\": \"End-to-end test for RSA functionality: message\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"End-to-end test for RSA functionality: message\"\n    },\n    \"test_aspect\": \"General end-to-end test case.\"\n  },\n  \"test_case10\": {\n    \"input\": \"Checking resilience against null messages\",\n    \"expected_output\": {\n      \"encrypted_message\": \"byte_sequence\",\n      \"decrypted_message\": \"Checking resilience against null messages\"\n    },\n    \"test_aspect\": \"Testing the system's resilience against diverse inputs.\"\n  }\n}\n```"}
{"index": 19779, "preference": "functionality", "prompt": "You are tasked with creating a Python script to process command-line options for a website migration tool. The script should handle the migration of content from one domain to another. The provided code snippet is a part of the command-line option setup for the script. Your task is to complete the script by implementing the logic to read the command-line options and perform the necessary actions for the website migration.\n\nThe script should accept the following command-line options:\n1. `--from`: Specifies the domain of the original site from which content will be migrated.\n2. `--to`: Specifies the domain of the new site to which content will be migrated.\n\nYour task is to write the logic to process these options and perform the website migration. Assume that the migration logic involves copying content from the original site to the new site, updating internal links, and handling any necessary redirects.\n\nYour script should handle cases where the required options are not provided, and it should provide appropriate feedback to the user in such cases.\n\nWrite a Python script that processes the command-line options and performs the website migration based on the provided domains.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"--from example.com --to newsite.com\",\n    \"expected_output\": \"Migration from example.com to newsite.com completed successfully.\",\n    \"test_aspect\": \"Valid input with both required options provided.\"\n  },\n  \"test_case2\": {\n    \"input\": \"--from example.com\",\n    \"expected_output\": \"Error: Missing required option --to.\",\n    \"test_aspect\": \"Valid input with only 'from' option provided.\"\n  },\n  \"test_case3\": {\n    \"input\": \"--to newsite.com\",\n    \"expected_output\": \"Error: Missing required option --from.\",\n    \"test_aspect\": \"Valid input with only 'to' option provided.\"\n  },\n  \"test_case4\": {\n    \"input\": \"\",\n    \"expected_output\": \"Error: Missing required options --from and --to.\",\n    \"test_aspect\": \"No options provided.\"\n  },\n  \"test_case5\": {\n    \"input\": \"--from invalid-domain --to newsite.com\",\n    \"expected_output\": \"Error: Invalid source domain invalid-domain.\",\n    \"test_aspect\": \"Valid 'to' option but invalid 'from' domain.\"\n  },\n  \"test_case6\": {\n    \"input\": \"--from example.com --to invalid-domain\",\n    \"expected_output\": \"Error: Invalid destination domain invalid-domain.\",\n    \"test_aspect\": \"Valid 'from' option but invalid 'to' domain.\"\n  },\n  \"test_case7\": {\n    \"input\": \"--from example.com --to newsite.com --extra-option test\",\n    \"expected_output\": \"Error: Unrecognized option --extra-option.\",\n    \"test_aspect\": \"Extra options provided that are not recognized.\"\n  },\n  \"test_case8\": {\n    \"input\": \"--from example.com --to newsite.com --to newsite2.com\",\n    \"expected_output\": \"Error: Multiple destination domains provided.\",\n    \"test_aspect\": \"Valid 'from' option but multiple 'to' options provided.\"\n  },\n  \"test_case9\": {\n    \"input\": \"--from example.com --to newsite.com --from example2.com\",\n    \"expected_output\": \"Error: Multiple source domains provided.\",\n    \"test_aspect\": \"Valid 'to' option but multiple 'from' options provided.\"\n  },\n  \"test_case10\": {\n    \"input\": \"--from EXAMPLE.COM --to NEWSITE.COM\",\n    \"expected_output\": \"Migration from EXAMPLE.COM to NEWSITE.COM completed successfully.\",\n    \"test_aspect\": \"Valid input with case-sensitive domain names.\"\n  }\n}\n```"}
{"index": 13558, "preference": "functionality", "prompt": "You are tasked with implementing a custom URL routing system for a web application using Python's Django framework. The provided code snippet is a part of the URL configuration in Django, where different URLs are mapped to specific views. The `urlpatterns` list contains several URL patterns, each associated with a corresponding view function. Additionally, the `load_checkout` function is used to wrap the view functions for the checkout process.\n\nYour task is to create a function that takes a URL pattern and returns the associated view function. If the URL pattern is not found in the `urlpatterns` list, the function should return a default view function.\n\nWrite a Python function `get_view_function(url_pattern)` that takes a URL pattern as a string and returns the associated view function. If the URL pattern is not found in the `urlpatterns` list, the function should return a default view function named `default_view`.\n\nAssume the following definitions for the views and `load_checkout` function:\n```python\ndef index_view(request):\n    # View implementation for the index page\n    pass\n\ndef shipping_address_view(request):\n    # View implementation for the shipping address page\n    pass\n\ndef shipping_method_view(request):\n    # View implementation for the shipping method page\n    pass\n\ndef summary_view(request):\n    # View implementation for the summary page\n    pass\n\ndef remove_voucher_view(request):\n    # View implementation for removing a voucher\n    pass\n\ndef load_checkout(view_function):\n    # Function to load the checkout process\n    pass\n\ndef default_view(request):\n    # Default view function\n    pass\n```\n\nFor example, if `get_view_function('^shipping-method/')` is called, it should return the `shipping_method_view` function. If `get_view_function('^payment/')` is called, it should return the `default_view` function.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"^index/$\",\n    \"expected_output\": \"index_view\",\n    \"test_aspect\": \"Valid pattern mapping to index_view\"\n  },\n  \"test_case2\": {\n    \"input\": \"^shipping-address/$\",\n    \"expected_output\": \"shipping_address_view\",\n    \"test_aspect\": \"Valid pattern mapping to shipping_address_view\"\n  },\n  \"test_case3\": {\n    \"input\": \"^shipping-method/$\",\n    \"expected_output\": \"shipping_method_view\",\n    \"test_aspect\": \"Valid pattern mapping to shipping_method_view\"\n  },\n  \"test_case4\": {\n    \"input\": \"^summary/$\",\n    \"expected_output\": \"summary_view\",\n    \"test_aspect\": \"Valid pattern mapping to summary_view\"\n  },\n  \"test_case5\": {\n    \"input\": \"^remove-voucher/$\",\n    \"expected_output\": \"remove_voucher_view\",\n    \"test_aspect\": \"Valid pattern mapping to remove_voucher_view\"\n  },\n  \"test_case6\": {\n    \"input\": \"^payment/$\",\n    \"expected_output\": \"default_view\",\n    \"test_aspect\": \"Invalid pattern returning default_view\"\n  },\n  \"test_case7\": {\n    \"input\": \"^non-existent-pattern/$\",\n    \"expected_output\": \"default_view\",\n    \"test_aspect\": \"Non-existing pattern returning default_view\"\n  },\n  \"test_case8\": {\n    \"input\": \"\",\n    \"expected_output\": \"default_view\",\n    \"test_aspect\": \"Empty string input returning default_view\"\n  },\n  \"test_case9\": {\n    \"input\": \"^shipping-address/extra/$\",\n    \"expected_output\": \"default_view\",\n    \"test_aspect\": \"Extra path segment returning default_view\"\n  },\n  \"test_case10\": {\n    \"input\": \"^shipping-method/some/other/path/$\",\n    \"expected_output\": \"default_view\",\n    \"test_aspect\": \"Invalid full pattern returning default_view\"\n  }\n}\n```"}
{"index": 7220, "preference": "functionality", "prompt": "You are tasked with creating a custom error handling system for a web application. The system should include error pages for 400 (Bad Request), 403 (Permission Denied), 404 (Page Not Found), and 500 (Server Error) HTTP status codes. Each error page should display a custom message associated with the error.\n\nYour task is to implement a Python function that generates the URL patterns for the error pages using Django's URL dispatcher. The function should take the error code and the custom error message as input and return the corresponding URL pattern.\n\nWrite a function `generate_error_url_pattern` that takes two parameters:\n- `error_code` (integer): The HTTP status code for the error page (e.g., 400, 403, 404, 500).\n- `error_message` (string): The custom error message to be displayed on the error page.\n\nThe function should return a string representing the URL pattern for the given error page. The URL pattern should be in the format: `url(r'^<error_code>/$', default_views.<error_handler>, kwargs={'exception': Exception(\"<error_message>\")})`.\n\nAssume that the `default_views` module contains the error handling views for the respective error codes.\n\nFor example, calling `generate_error_url_pattern(404, \"Page not Found\")` should return the string: `url(r'^404/$', default_views.page_not_found, kwargs={'exception': Exception(\"Page not Found\")})`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [400, \"Bad Request\"],\n    \"expected_output\": \"url(r'^400/$', default_views.bad_request, kwargs={'exception': Exception(\\\"Bad Request\\\")})\",\n    \"test_aspect\": \"Basic functionality with valid 400 error code and message.\"\n  },\n  \"test_case2\": {\n    \"input\": [403, \"Permission Denied\"],\n    \"expected_output\": \"url(r'^403/$', default_views.permission_denied, kwargs={'exception': Exception(\\\"Permission Denied\\\")})\",\n    \"test_aspect\": \"Basic functionality with valid 403 error code and message.\"\n  },\n  \"test_case3\": {\n    \"input\": [404, \"Page Not Found\"],\n    \"expected_output\": \"url(r'^404/$', default_views.page_not_found, kwargs={'exception': Exception(\\\"Page Not Found\\\")})\",\n    \"test_aspect\": \"Basic functionality with valid 404 error code and message.\"\n  },\n  \"test_case4\": {\n    \"input\": [500, \"Server Error\"],\n    \"expected_output\": \"url(r'^500/$', default_views.server_error, kwargs={'exception': Exception(\\\"Server Error\\\")})\",\n    \"test_aspect\": \"Basic functionality with valid 500 error code and message.\"\n  },\n  \"test_case5\": {\n    \"input\": [400, \"\"],\n    \"expected_output\": \"url(r'^400/$', default_views.bad_request, kwargs={'exception': Exception(\\\"\\\")})\",\n    \"test_aspect\": \"Handling of empty error message for 400 error code.\"\n  },\n  \"test_case6\": {\n    \"input\": [403, \"    \"],\n    \"expected_output\": \"url(r'^403/$', default_views.permission_denied, kwargs={'exception': Exception(\\\"    \\\")})\",\n    \"test_aspect\": \"Handling of whitespace error message for 403 error code.\"\n  },\n  \"test_case7\": {\n    \"input\": [404, \"Error occurred!\"],\n    \"expected_output\": \"url(r'^404/$', default_views.page_not_found, kwargs={'exception': Exception(\\\"Error occurred!\\\")})\",\n    \"test_aspect\": \"Handling of a standard error message for 404 error code.\"\n  },\n  \"test_case8\": {\n    \"input\": [500, \"Unexpected error\"],\n    \"expected_output\": \"url(r'^500/$', default_views.server_error, kwargs={'exception': Exception(\\\"Unexpected error\\\")})\",\n    \"test_aspect\": \"Handling of a standard error message for 500 error code.\"\n  },\n  \"test_case9\": {\n    \"input\": [404, \"Not Found\"],\n    \"expected_output\": \"url(r'^404/$', default_views.page_not_found, kwargs={'exception': Exception(\\\"Not Found\\\")})\",\n    \"test_aspect\": \"Handling of a simple error message for 404 error code.\"\n  },\n  \"test_case10\": {\n    \"input\": [999, \"Unknown Error\"],\n    \"expected_output\": \"url(r'^999/$', default_views.unknown_error, kwargs={'exception': Exception(\\\"Unknown Error\\\")})\",\n    \"test_aspect\": \"Handling of an invalid HTTP status code (not specified in requirements).\"\n  }\n}\n```"}
{"index": 27014, "preference": "functionality", "prompt": "You are tasked with implementing a data splitting function for a machine learning project. The function should take a dataset and split it into three parts: training set, validation set, and test set. The sizes of the training, validation, and test sets should be specified as percentages of the total dataset size. The function should also ensure that the data is shuffled before splitting to avoid any inherent ordering in the dataset affecting the model's performance.\n\nYou are provided with the following code snippet as a starting point:\n```python\n\"\"\"Data Split keys\"\"\"\n\nTRAIN = \"train\"\nVALIDATION = \"validation\"\nTEST = \"test\"\n```\n\nWrite a Python function `split_data(dataset, train_percent, validation_percent, test_percent)` that takes in the dataset and the percentages for the training, validation, and test sets, and returns three separate datasets for training, validation, and testing. The function should ensure that the sum of `train_percent`, `validation_percent`, and `test_percent` is equal to 100. The datasets should be shuffled before splitting.\n\nFor example, if the input dataset has 100 samples, and the function is called with `split_data(dataset, 60, 20, 20)`, it should return three datasets with 60, 20, and 20 samples for training, validation, and testing, respectively.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"dataset\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"train_percent\": 60,\n      \"validation_percent\": 20,\n      \"test_percent\": 20\n    },\n    \"expected_output\": {\n      \"train\": [1, 2, 3, 4, 5, 6],\n      \"validation\": [7, 8],\n      \"test\": [9, 10]\n    },\n    \"test_aspect\": \"Basic functionality with a small dataset\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"dataset\": [1, 2, 3],\n      \"train_percent\": 100,\n      \"validation_percent\": 0,\n      \"test_percent\": 0\n    },\n    \"expected_output\": {\n      \"train\": [1, 2, 3],\n      \"validation\": [],\n      \"test\": []\n    },\n    \"test_aspect\": \"Handling of a case where only training set is requested\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"dataset\": [1, 2, 3, 4, 5],\n      \"train_percent\": 50,\n      \"validation_percent\": 30,\n      \"test_percent\": 20\n    },\n    \"expected_output\": {\n      \"train\": [1, 2],\n      \"validation\": [3, 4],\n      \"test\": [5]\n    },\n    \"test_aspect\": \"Handling a dataset with percentages that sum to 100\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"dataset\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"train_percent\": 0,\n      \"validation_percent\": 0,\n      \"test_percent\": 100\n    },\n    \"expected_output\": {\n      \"train\": [],\n      \"validation\": [],\n      \"test\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    },\n    \"test_aspect\": \"Handling a case where only the test set is requested\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"dataset\": [1, 2, 3, 4, 5],\n      \"train_percent\": 60,\n      \"validation_percent\": 40,\n      \"test_percent\": 0\n    },\n    \"expected_output\": {\n      \"train\": [1, 2, 3],\n      \"validation\": [4, 5],\n      \"test\": []\n    },\n    \"test_aspect\": \"Handling a case where training and validation are requested but no test set\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"dataset\": [],\n      \"train_percent\": 70,\n      \"validation_percent\": 20,\n      \"test_percent\": 10\n    },\n    \"expected_output\": {\n      \"train\": [],\n      \"validation\": [],\n      \"test\": []\n    },\n    \"test_aspect\": \"Handling an empty dataset\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"dataset\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"train_percent\": 33,\n      \"validation_percent\": 33,\n      \"test_percent\": 34\n    },\n    \"expected_output\": {\n      \"train\": [1, 2, 3],\n      \"validation\": [4, 5, 6],\n      \"test\": [7, 8, 9, 10]\n    },\n    \"test_aspect\": \"Handling non-standard splits where percentages do not split evenly\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"dataset\": [1, 2],\n      \"train_percent\": 50,\n      \"validation_percent\": 50,\n      \"test_percent\": 0\n    },\n    \"expected_output\": {\n      \"train\": [1],\n      \"validation\": [2],\n      \"test\": []\n    },\n    \"test_aspect\": \"Handling minimal non-empty dataset with equal splits\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"dataset\": [1, 2, 3, 4, 5, 6],\n      \"train_percent\": 70,\n      \"validation_percent\": 20,\n      \"test_percent\": 10\n    },\n    \"expected_output\": {\n      \"train\": [1, 2, 3, 4],\n      \"validation\": [5],\n      \"test\": [6]\n    },\n    \"test_aspect\": \"Handling a case with slight misalignment in the output size expectations\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"dataset\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"train_percent\": 25,\n      \"validation_percent\": 25,\n      \"test_percent\": 50\n    },\n    \"expected_output\": {\n      \"train\": [1, 2],\n      \"validation\": [3, 4],\n      \"test\": [5, 6, 7, 8, 9, 10]\n    },\n    \"test_aspect\": \"Handling a case where the test set is larger than the training and validation sets\"\n  }\n}\n```"}
{"index": 1434, "preference": "functionality", "prompt": "You are tasked with implementing a reinforcement learning algorithm for a robotic arm to learn how to grasp objects. The robotic arm's policy is trained using the Proximal Policy Optimization (PPO) algorithm, which involves choosing a loss function to optimize the policy. The loss function can be either the Secure Triplet Loss with Kullback-Leibler Divergence (SecureTripletLossKLD) or the Secure Triplet Loss with Softplus (SecureTripletLossSL). The gamma parameter, denoted as GAMMA, is set to 0.9 to discount future rewards.\n\nYour task is to create a Python function that takes the loss function as input and returns the corresponding loss value for a given set of input data. The loss function is instantiated with a margin of 1.0 and the gamma parameter set to the predefined value GAMMA.\n\nYou are provided with the following code snippet for inspiration:\n```python\nGAMMA = 0.9        # Set the gamma parameter here\n\n# Choose one of the loss functions below:\nloss = SecureTripletLossKLD(margin=1.0, gamma=GAMMA)\n#loss = SecureTripletLossSL(margin=1.0, gamma=GAMMA)\n```\n\nCreate a function named `calculate_loss` that takes the loss function as a parameter and returns the loss value for a given input data. The function signature is as follows:\n```python\ndef calculate_loss(loss_function, input_data):\n    # Your implementation here\n    pass\n```\n\nEnsure that your function can handle both types of loss functions and accurately computes the loss value based on the provided input data.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossKLD(margin=1.0, gamma=0.9)\",\n      \"input_data\": [1.0, 2.0, 3.0]\n    },\n    \"expected_output\": \"float\",  // Assuming it returns a float value\n    \"test_aspect\": \"Testing loss calculation with SecureTripletLossKLD\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossSL(margin=1.0, gamma=0.9)\",\n      \"input_data\": [1.0, 2.0, 3.0]\n    },\n    \"expected_output\": \"float\",  // Assuming it returns a float value\n    \"test_aspect\": \"Testing loss calculation with SecureTripletLossSL\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossKLD(margin=1.0, gamma=0.9)\",\n      \"input_data\": []\n    },\n    \"expected_output\": \"ValueError\",  // Assuming it raises an error for empty input\n    \"test_aspect\": \"Testing loss calculation with empty input data\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossSL(margin=1.0, gamma=0.9)\",\n      \"input_data\": [0.0, 0.0, 0.0]\n    },\n    \"expected_output\": \"float\",  // Assuming it returns a float value\n    \"test_aspect\": \"Testing loss calculation with zero input data\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossKLD(margin=1.0, gamma=0.9)\",\n      \"input_data\": [1.0]\n    },\n    \"expected_output\": \"float\",  // Assuming it returns a float value\n    \"test_aspect\": \"Testing loss calculation with single value input data\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossSL(margin=1.0, gamma=0.9)\",\n      \"input_data\": [-1.0, -2.0, -3.0]\n    },\n    \"expected_output\": \"float\",  // Assuming it returns a float value\n    \"test_aspect\": \"Testing loss calculation with negative input data\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossKLD(margin=1.0, gamma=0.9)\",\n      \"input_data\": [float('inf')]\n    },\n    \"expected_output\": \"ValueError\",  // Assuming it raises an error for infinity input\n    \"test_aspect\": \"Testing loss calculation with infinite input\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossSL(margin=1.0, gamma=0.9)\",\n      \"input_data\": [1.0, 1.0, 1.0]\n    },\n    \"expected_output\": \"float\",  // Assuming it returns a float value\n    \"test_aspect\": \"Testing loss calculation with identical input values\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossKLD(margin=1.0, gamma=0.9)\",\n      \"input_data\": [1.0, 2.0, 3.0, 4.0, 5.0]\n    },\n    \"expected_output\": \"float\",  // Assuming it returns a float value\n    \"test_aspect\": \"Testing loss calculation with larger input data set\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"loss_function\": \"SecureTripletLossSL(margin=1.0, gamma=0.9)\",\n      \"input_data\": [None]\n    },\n    \"expected_output\": \"TypeError\",  // Assuming it raises an error for None input\n    \"test_aspect\": \"Testing loss calculation with None input data\"\n  }\n}\n```"}
{"index": 39141, "preference": "functionality", "prompt": "You are tasked with implementing a Python class that represents a generic task. The class should have a method to start the task and a method to return a string representation of its attributes.\n\nYour task is to complete the implementation of the `Task` class by adding the necessary code for the `start` method and the string representation method. The `start` method should be an abstract method, and the string representation method should return a string containing the attributes of the class in the format \"attribute_name: attribute_value\".\n\nComplete the implementation of the `Task` class by adding the necessary code for the `start` method and the string representation method.\n\n```python\nfrom abc import ABC, abstractmethod\n\nclass Task(ABC):\n    def __str__(self):\n        attrs = vars(self)\n        return str(', '.join(\"%s: %s\" % item for item in attrs.items()))\n\n    @abstractmethod\n    def start(self, session=None):\n        pass\n\n# Example usage\nclass ExampleTask(Task):\n    def __init__(self, name, priority):\n        self.name = name\n        self.priority = priority\n\n    def start(self, session=None):\n        print(f\"Starting task: {self.name}\")\n\n# Create an instance of ExampleTask\ntask = ExampleTask(\"Sample Task\", 1)\nprint(task)  # Output: name: Sample Task, priority: 1\ntask.start()  # Output: Starting task: Sample Task\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"ExampleTask('Task A', 2)\",\n    \"expected_output\": \"name: Task A, priority: 2\",\n    \"test_aspect\": \"Verify string representation of task with standard attributes.\"\n  },\n  \"test_case2\": {\n    \"input\": \"ExampleTask('Task B', 5)\",\n    \"expected_output\": \"name: Task B, priority: 5\",\n    \"test_aspect\": \"Verify string representation of task with different standard attributes.\"\n  },\n  \"test_case3\": {\n    \"input\": \"ExampleTask('Task C', 0)\",\n    \"expected_output\": \"name: Task C, priority: 0\",\n    \"test_aspect\": \"Verify string representation with zero priority.\"\n  },\n  \"test_case4\": {\n    \"input\": \"ExampleTask('Task D', -1)\",\n    \"expected_output\": \"name: Task D, priority: -1\",\n    \"test_aspect\": \"Verify string representation with negative priority.\"\n  },\n  \"test_case5\": {\n    \"input\": \"ExampleTask('Task E', 3); task.start()\",\n    \"expected_output\": \"Starting task: Task E\",\n    \"test_aspect\": \"Verify that the start method executes correctly.\"\n  },\n  \"test_case6\": {\n    \"input\": \"ExampleTask('Task F', 1); task = None; task.start()\",\n    \"expected_output\": \"AttributeError\",\n    \"test_aspect\": \"Verify that calling start on an uninitialized task raises an error.\"\n  },\n  \"test_case7\": {\n    \"input\": \"ExampleTask('Task G', 2); task.start('session_data')\",\n    \"expected_output\": \"Starting task: Task G\",\n    \"test_aspect\": \"Verify that start method works with session parameter.\"\n  },\n  \"test_case8\": {\n    \"input\": \"ExampleTask('Task H', 10); print(task)\",\n    \"expected_output\": \"name: Task H, priority: 10\",\n    \"test_aspect\": \"Verify string representation with high priority value.\"\n  },\n  \"test_case9\": {\n    \"input\": \"ExampleTask('Task I', 1); task.start(); task.start()\",\n    \"expected_output\": [\n      \"Starting task: Task I\",\n      \"Starting task: Task I\"\n    ],\n    \"test_aspect\": \"Verify that start method can be called multiple times.\"\n  },\n  \"test_case10\": {\n    \"input\": \"task = ExampleTask('Task J', 4); print(str(task))\",\n    \"expected_output\": \"name: Task J, priority: 4\",\n    \"test_aspect\": \"Verify that string representation is consistent when called directly.\"\n  }\n}\n```"}
{"index": 2550, "preference": "functionality", "prompt": "You are tasked with implementing a simple class in C++ to handle SQL statements. The class `SingleStatement` is designed to store and manipulate a single SQL statement. The class has a constructor that takes a `wxString` object representing the SQL statement. Your task is to implement the constructor for the `SingleStatement` class.\n\nThe `wxString` class is a string class provided by the wxWidgets library, which is commonly used for GUI applications in C++. The `wxString` class provides various methods for manipulating strings.\n\nYou need to implement the constructor for the `SingleStatement` class, which takes a `wxString` object representing an SQL statement and initializes the `SingleStatement` object with the provided SQL statement.\n\nYour task is to write the C++ code for the constructor of the `SingleStatement` class that takes a `wxString` object as a parameter and initializes the `SingleStatement` object with the provided SQL statement.\n\n```cpp\n#include <wx/string.h>\n\nclass SingleStatement {\npublic:\n    // Constructor to initialize SingleStatement with the provided SQL statement\n    SingleStatement(const wxString& sql) {\n        // Initialize the SingleStatement object with the provided SQL statement\n        sqlStatement = sql;\n    }\n\n    // Member variable to store the SQL statement\n    wxString sqlStatement;\n};\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"SELECT * FROM users;\",\n    \"expected_output\": \"SELECT * FROM users;\",\n    \"test_aspect\": \"Basic functionality with a valid SQL statement.\"\n  },\n  \"test_case2\": {\n    \"input\": \"INSERT INTO users (name, age) VALUES ('Alice', 30);\",\n    \"expected_output\": \"INSERT INTO users (name, age) VALUES ('Alice', 30);\",\n    \"test_aspect\": \"Check handling of an INSERT statement.\"\n  },\n  \"test_case3\": {\n    \"input\": \"UPDATE users SET age = 31 WHERE name = 'Alice';\",\n    \"expected_output\": \"UPDATE users SET age = 31 WHERE name = 'Alice';\",\n    \"test_aspect\": \"Check handling of an UPDATE statement.\"\n  },\n  \"test_case4\": {\n    \"input\": \"DELETE FROM users WHERE name = 'Alice';\",\n    \"expected_output\": \"DELETE FROM users WHERE name = 'Alice';\",\n    \"test_aspect\": \"Check handling of a DELETE statement.\"\n  },\n  \"test_case5\": {\n    \"input\": \"\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Check handling of an empty SQL statement.\"\n  },\n  \"test_case6\": {\n    \"input\": \"SELECT * FROM orders WHERE amount > 1000;\",\n    \"expected_output\": \"SELECT * FROM orders WHERE amount > 1000;\",\n    \"test_aspect\": \"Check handling of a SELECT statement with a condition.\"\n  },\n  \"test_case7\": {\n    \"input\": \"   SELECT * FROM products;   \",\n    \"expected_output\": \"   SELECT * FROM products;   \",\n    \"test_aspect\": \"Check handling of a SQL statement with leading and trailing spaces.\"\n  },\n  \"test_case8\": {\n    \"input\": \"CREATE TABLE test_table (id INT, name VARCHAR(50));\",\n    \"expected_output\": \"CREATE TABLE test_table (id INT, name VARCHAR(50));\",\n    \"test_aspect\": \"Check handling of a CREATE TABLE statement.\"\n  },\n  \"test_case9\": {\n    \"input\": \"SELECT COUNT(*) FROM users;\",\n    \"expected_output\": \"SELECT COUNT(*) FROM users;\",\n    \"test_aspect\": \"Check handling of a SQL statement with aggregate function.\"\n  },\n  \"test_case10\": {\n    \"input\": \"DROP TABLE IF EXISTS test_table;\",\n    \"expected_output\": \"DROP TABLE IF EXISTS test_table;\",\n    \"test_aspect\": \"Check handling of a DROP TABLE statement.\"\n  }\n}\n```"}
{"index": 10248, "preference": "functionality", "prompt": "You are tasked with implementing a function that reorders a list of branding policy IDs based on their priority. The branding policy IDs are arranged in ascending priority order, where IDs later in the array have higher priority. Your goal is to write a function that takes the list of branding policy IDs and reorders them so that IDs with higher priority appear earlier in the list.\n\nWrite a function `reorder_branding_policies` that takes a list of branding policy IDs as input and returns the reordered list based on their priority.\n\nFunction Signature:\n```python\ndef reorder_branding_policies(branding_policy_ids: List[str]) -> List[str]:\n    pass\n```\n\nExample:\n```python\n# Input\nbranding_policy_ids = ['policy1', 'policy2', 'policy3', 'policy4']\n\n# Output\nreorder_branding_policies(branding_policy_ids)  # Output: ['policy4', 'policy3', 'policy2', 'policy1']\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"['policy1', 'policy2', 'policy3', 'policy4']\",\n    \"expected_output\": \"['policy4', 'policy3', 'policy2', 'policy1']\",\n    \"test_aspect\": \"Basic functionality with multiple policies\"\n  },\n  \"test_case2\": {\n    \"input\": \"['policyA', 'policyB', 'policyC']\",\n    \"expected_output\": \"['policyC', 'policyB', 'policyA']\",\n    \"test_aspect\": \"Function handles alphabetically ordered policies\"\n  },\n  \"test_case3\": {\n    \"input\": \"['policy1']\",\n    \"expected_output\": \"['policy1']\",\n    \"test_aspect\": \"Single element list should return the same element\"\n  },\n  \"test_case4\": {\n    \"input\": \"[]\",\n    \"expected_output\": \"[]\",\n    \"test_aspect\": \"Empty list should return an empty list\"\n  },\n  \"test_case5\": {\n    \"input\": \"['policy3', 'policy1', 'policy2']\",\n    \"expected_output\": \"['policy2', 'policy1', 'policy3']\",\n    \"test_aspect\": \"Unordered policies should be reordered correctly\"\n  },\n  \"test_case6\": {\n    \"input\": \"['policy3', 'policy2', 'policy4', 'policy1']\",\n    \"expected_output\": \"['policy4', 'policy3', 'policy2', 'policy1']\",\n    \"test_aspect\": \"Function handles mixed order with multiple policies\"\n  },\n  \"test_case7\": {\n    \"input\": \"['policy1', 'policy1', 'policy1']\",\n    \"expected_output\": \"['policy1', 'policy1', 'policy1']\",\n    \"test_aspect\": \"Function handles lists with duplicate policies correctly\"\n  },\n  \"test_case8\": {\n    \"input\": \"['policy5', 'policy4', 'policy3', 'policy2', 'policy1']\",\n    \"expected_output\": \"['policy5', 'policy4', 'policy3', 'policy2', 'policy1']\",\n    \"test_aspect\": \"Already ordered list should return the same list\"\n  },\n  \"test_case9\": {\n    \"input\": \"['policy100', 'policy99', 'policy98']\",\n    \"expected_output\": \"['policy100', 'policy99', 'policy98']\",\n    \"test_aspect\": \"Function handles numerical-like strings correctly\"\n  },\n  \"test_case10\": {\n    \"input\": \"['a', 'b', 'c', 'd', 'e']\",\n    \"expected_output\": \"['e', 'd', 'c', 'b', 'a']\",\n    \"test_aspect\": \"Alphabetical order with all lowercase letters\"\n  }\n}\n```"}
{"index": 4504, "preference": "functionality", "prompt": "You are tasked with creating a simple test framework for a Java application. Your task is to implement a class that can execute test methods and assert their results. The test framework should support basic assertions and be able to report the test results.\n\nYour task is to implement a `TestFramework` class with the following requirements:\n- The `TestFramework` class should be able to execute test methods annotated with `@Test`.\n- Each test method should be able to perform assertions using the `assertEquals` method provided by the framework.\n- The `TestFramework` should report the total number of tests run, the number of tests passed, and the number of tests failed after executing all the test methods.\n- The `TestFramework` should provide a summary of the test results, including the names of the test methods and their pass/fail status.\n\nYou can assume that the `@Test` annotation and the `assertEquals` method are already provided by the framework.\n\nYour task is to implement the `TestFramework` class to meet the requirements outlined above.\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TestFramework {\n    private List<String> testResults;\n\n    public TestFramework() {\n        testResults = new ArrayList<>();\n    }\n\n    public void runTests(Class<?> testClass) {\n        int totalTests = 0;\n        int passedTests = 0;\n\n        for (java.lang.reflect.Method method : testClass.getDeclaredMethods()) {\n            if (method.isAnnotationPresent(Test.class)) {\n                totalTests++;\n                try {\n                    method.invoke(testClass.newInstance());\n                    testResults.add(method.getName() + \" - Passed\");\n                    passedTests++;\n                } catch (Exception e) {\n                    testResults.add(method.getName() + \" - Failed: \" + e.getCause().getMessage());\n                }\n            }\n        }\n\n        System.out.println(\"Total tests run: \" + totalTests);\n        System.out.println(\"Tests passed: \" + passedTests);\n        System.out.println(\"Tests failed: \" + (totalTests - passedTests));\n\n        System.out.println(\"Test Results:\");\n        for (String result : testResults) {\n            System.out.println(result);\n        }\n    }\n\n    public void assertEquals(Object expected, Object actual) {\n        if (!expected.equals(actual)) {\n            throw new AssertionError(\"Expected: \" + expected + \", Actual: \" + actual);\n        }\n    }\n}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"TestClassWithOnePassTest\",\n    \"expected_output\": \"Total tests run: 1\\nTests passed: 1\\nTests failed: 0\\nTest Results:\\ntestMethod1 - Passed\",\n    \"test_aspect\": \"Verify functionality with a single test method that passes.\"\n  },\n  \"test_case2\": {\n    \"input\": \"TestClassWithOneFailTest\",\n    \"expected_output\": \"Total tests run: 1\\nTests passed: 0\\nTests failed: 1\\nTest Results:\\ntestMethod1 - Failed: AssertionError\",\n    \"test_aspect\": \"Verify functionality with a single test method that fails due to assertion.\"\n  },\n  \"test_case3\": {\n    \"input\": \"TestClassWithMultipleTests\",\n    \"expected_output\": \"Total tests run: 3\\nTests passed: 2\\nTests failed: 1\\nTest Results:\\ntestMethod1 - Passed\\ntestMethod2 - Passed\\ntestMethod3 - Failed: AssertionError\",\n    \"test_aspect\": \"Verify functionality with multiple test methods with mixed results.\"\n  },\n  \"test_case4\": {\n    \"input\": \"TestClassWithNoTests\",\n    \"expected_output\": \"Total tests run: 0\\nTests passed: 0\\nTests failed: 0\\nTest Results:\",\n    \"test_aspect\": \"Verify functionality when there are no test methods annotated with @Test.\"\n  },\n  \"test_case5\": {\n    \"input\": \"TestClassWithNullAssertion\",\n    \"expected_output\": \"Total tests run: 1\\nTests passed: 0\\nTests failed: 1\\nTest Results:\\ntestMethod1 - Failed: Expected: 1, Actual: null\",\n    \"test_aspect\": \"Verify handling of null values in assertions.\"\n  },\n  \"test_case6\": {\n    \"input\": \"TestClassWithBoundaryValues\",\n    \"expected_output\": \"Total tests run: 2\\nTests passed: 2\\nTests failed: 0\\nTest Results:\\ntestMethod1 - Passed\\ntestMethod2 - Passed\",\n    \"test_aspect\": \"Verify functionality when testing boundary values (e.g., Integer.MAX_VALUE).\"\n  },\n  \"test_case7\": {\n    \"input\": \"TestClassWithDifferentDataTypes\",\n    \"expected_output\": \"Total tests run: 2\\nTests passed: 2\\nTests failed: 0\\nTest Results:\\ntestMethod1 - Passed\\ntestMethod2 - Passed\",\n    \"test_aspect\": \"Verify assertions with different data types (String, Integer, etc.).\"\n  },\n  \"test_case8\": {\n    \"input\": \"TestClassWithExceptionInTest\",\n    \"expected_output\": \"Total tests run: 1\\nTests passed: 0\\nTests failed: 1\\nTest Results:\\ntestMethod1 - Failed: Exception in thread \\\"main\\\" java.lang.RuntimeException\",\n    \"test_aspect\": \"Verify handling of exceptions thrown outside of assertions in test methods.\"\n  },\n  \"test_case9\": {\n    \"input\": \"TestClassWithMultipleFailures\",\n    \"expected_output\": \"Total tests run: 3\\nTests passed: 0\\nTests failed: 3\\nTest Results:\\ntestMethod1 - Failed: AssertionError\\ntestMethod2 - Failed: AssertionError\\ntestMethod3 - Failed: AssertionError\",\n    \"test_aspect\": \"Verify reporting when all test methods fail.\"\n  },\n  \"test_case10\": {\n    \"input\": \"TestClassWithNoFailures\",\n    \"expected_output\": \"Total tests run: 5\\nTests passed: 5\\nTests failed: 0\\nTest Results:\\ntestMethod1 - Passed\\ntestMethod2 - Passed\\ntestMethod3 - Passed\\ntestMethod4 - Passed\\ntestMethod5 - Passed\",\n    \"test_aspect\": \"Verify reporting when all test methods pass.\"\n  }\n}\n```"}
{"index": 208, "preference": "functionality", "prompt": "You are tasked with implementing a memory management system for a custom JavaScript engine. The engine uses a custom JavaScript Core (JSC) library, and you need to define a finalizer for the `Navigator` class to handle memory deallocation when instances of `Navigator` are no longer needed.\n\nThe given code snippet shows a part of the implementation for the `Navigator` class in the JSC library. The `Navigator` class has a finalizer defined using the `JSC_FINALIZER` macro, and a method `GetClassRef` to obtain the class reference.\n\nYour task is to complete the implementation by defining the `Navigator` class and its finalizer function, and to ensure proper memory management for instances of the `Navigator` class.\n\nYour implementation should include:\n- Definition of the `Navigator` class with appropriate properties and methods.\n- Implementation of the finalizer function to handle memory deallocation for instances of the `Navigator` class.\n\nYour solution should demonstrate a clear understanding of memory management in the context of a custom JavaScript engine using the JSC library.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"new Navigator()\",\n    \"expected_output\": \"Navigator instance created\",\n    \"test_aspect\": \"Verify that a new instance of Navigator is created successfully.\"\n  },\n  \"test_case2\": {\n    \"input\": \"navigatorInstance.GetClassRef()\",\n    \"expected_output\": \"Navigator\",\n    \"test_aspect\": \"Check if the GetClassRef method returns the correct class reference.\"\n  },\n  \"test_case3\": {\n    \"input\": \"navigatorInstance = null; triggerGarbageCollection()\",\n    \"expected_output\": \"Navigator instance deallocated\",\n    \"test_aspect\": \"Ensure that the finalizer is called when the instance is no longer referenced.\"\n  },\n  \"test_case4\": {\n    \"input\": \"new Navigator()\",\n    \"expected_output\": \"Navigator instance created\",\n    \"test_aspect\": \"Verify consecutive creation of Navigator instances.\"\n  },\n  \"test_case5\": {\n    \"input\": \"let nav1 = new Navigator(); let nav2 = new Navigator(); nav1 = null; triggerGarbageCollection()\",\n    \"expected_output\": \"Navigator instance nav1 deallocated, nav2 still exists\",\n    \"test_aspect\": \"Confirm that only the intended instance is deallocated while others remain.\"\n  },\n  \"test_case6\": {\n    \"input\": \"navigatorInstance = undefined; triggerGarbageCollection()\",\n    \"expected_output\": \"Navigator instance deallocated\",\n    \"test_aspect\": \"Check if finalizer works when instance is set to undefined.\"\n  },\n  \"test_case7\": {\n    \"input\": \"let nav = new Navigator(); nav.someProperty = 'test'; nav = null; triggerGarbageCollection()\",\n    \"expected_output\": \"Navigator instance deallocated with properties\",\n    \"test_aspect\": \"Ensure finalizer handles instances with existing properties correctly.\"\n  },\n  \"test_case8\": {\n    \"input\": \"let nav = new Navigator(); nav = new Navigator(); triggerGarbageCollection()\",\n    \"expected_output\": \"First Navigator instance deallocated, second instance created\",\n    \"test_aspect\": \"Test behavior when a new instance is created while the previous one is still in scope.\"\n  },\n  \"test_case9\": {\n    \"input\": \"let nav = new Navigator(); nav = null; nav = new Navigator(); triggerGarbageCollection()\",\n    \"expected_output\": \"First Navigator instance deallocated, second instance created and exists\",\n    \"test_aspect\": \"Check that the finalizer correctly deallocates before a new instance is created.\"\n  },\n  \"test_case10\": {\n    \"input\": \"navigatorInstances = [new Navigator(), new Navigator()]; navigatorInstances = null; triggerGarbageCollection()\",\n    \"expected_output\": \"All Navigator instances deallocated\",\n    \"test_aspect\": \"Ensure that finalizer handles deallocation for array of instances.\"\n  }\n}\n```"}
{"index": 4627, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that validates whether a given OAuthFlow object is correctly converted to a YAMLable object. An OAuthFlow object represents the OAuth 2.0 authorization flow, and the YAMLable object is a dictionary representation of the OAuthFlow object. The function should compare the YAMLable object generated from the OAuthFlow object with an expected dictionary and return True if they match, and False otherwise.\n\nThe OAuthFlow object is created using the OAuthFlow class with the following parameters:\n- authorization_url: The URL for the authorization endpoint.\n- token_url: The URL for the token endpoint.\n- scopes: A dictionary containing the scopes and their descriptions.\n\nThe function signature is:\n```python\ndef validate_oauth_flow(oauth_flow: OAuthFlow) -> bool:\n    pass\n```\n\nFor example, given the following OAuthFlow object:\n```python\noauth_flow = OAuthFlow(\n    authorization_url=\"https://example.com/auth\",\n    token_url=\"https://example.com/token\",\n    scopes={\"read\": \"Read access\", \"write\": \"Write access\"}\n)\n```\nThe function should return True if the generated YAMLable object matches the expected dictionary:\n```python\n{\n    \"authorizationCode\": {\n        \"authorizationUrl\": \"https://example.com/auth\",\n        \"tokenUrl\": \"https://example.com/token\",\n        \"scopes\": {\"read\": \"Read access\", \"write\": \"Write access\"}\n    }\n}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"OAuthFlow(authorization_url='https://example.com/auth', token_url='https://example.com/token', scopes={'read': 'Read access', 'write': 'Write access'})\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Basic functionality with valid OAuthFlow object\"\n  },\n  \"test_case2\": {\n    \"input\": \"OAuthFlow(authorization_url='https://example.com/auth', token_url='https://example.com/token', scopes={})\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid OAuthFlow with empty scopes\"\n  },\n  \"test_case3\": {\n    \"input\": \"OAuthFlow(authorization_url='', token_url='https://example.com/token', scopes={'read': 'Read access'})\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid OAuthFlow with empty authorization_url\"\n  },\n  \"test_case4\": {\n    \"input\": \"OAuthFlow(authorization_url='https://example.com/auth', token_url='', scopes={'read': 'Read access'})\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid OAuthFlow with empty token_url\"\n  },\n  \"test_case5\": {\n    \"input\": \"OAuthFlow(authorization_url='https://example.com/auth', token_url='https://example.com/token', scopes={'invalid': 'Invalid scope'})\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Valid OAuthFlow with invalid scope description\"\n  },\n  \"test_case6\": {\n    \"input\": \"OAuthFlow(authorization_url='https://example.com/auth', token_url='https://example.com/token', scopes={'read': 'Read access', 'write': 123})\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid OAuthFlow with non-string scope description\"\n  },\n  \"test_case7\": {\n    \"input\": \"OAuthFlow(authorization_url='https://example.com/auth', token_url='https://example.com/token', scopes={'read': 'Read access', 'write': 'Write access', 'delete': 'Delete access'})\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid OAuthFlow with multiple scopes\"\n  },\n  \"test_case8\": {\n    \"input\": \"OAuthFlow(authorization_url='https://example.com/auth', token_url='https://example.com/token', scopes={'read': '', 'write': 'Write access'})\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid OAuthFlow with empty scope description\"\n  },\n  \"test_case9\": {\n    \"input\": \"OAuthFlow(authorization_url='https://example.com/auth', token_url='https://example.com/token', scopes={'scope1': 'Description1', 'scope2': 'Description2'})\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid OAuthFlow with different scope descriptions\"\n  },\n  \"test_case10\": {\n    \"input\": \"OAuthFlow(authorization_url='http://example.com/auth', token_url='http://example.com/token', scopes={'read': 'Read access'})\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid OAuthFlow with non-HTTPS URLs\"\n  }\n}\n```"}
{"index": 37995, "preference": "functionality", "prompt": "You are tasked with implementing a Python class that processes a list of constants and arguments. The class should have a method that appends the constants and arguments to a list in a specific order. Your task is to complete the implementation of the `ArgumentProcessor` class by implementing the `append_arguments` method.\n\nThe `ArgumentProcessor` class has the following attributes and methods:\n- `constants`: a list of constants\n- `append_arguments(*args)`: a method that appends the constants and arguments to a list in the following order: constants, arguments.r, maxCounts, arguments.m, arguments.w\n\nYou need to complete the implementation of the `append_arguments` method to achieve the desired functionality.\n\n```python\nclass ArgumentProcessor:\n    def __init__(self, constants):\n        self.constants = constants\n        self.argumentList = []\n\n    def append_arguments(self, arguments):\n        # Your task is to complete the implementation of this method\n        pass\n\n# Example usage:\nprocessor = ArgumentProcessor([1, 2, 3])\nprocessor.append_arguments(some_arguments)\nprint(processor.argumentList)\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"constants\": [1, 2, 3],\n      \"arguments\": {\n        \"r\": 5,\n        \"m\": 10,\n        \"w\": 15\n      }\n    },\n    \"expected_output\": [1, 2, 3, 5, 10, 15],\n    \"test_aspect\": \"Basic functionality with simple integers as constants and arguments.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"constants\": [],\n      \"arguments\": {\n        \"r\": 7,\n        \"m\": 14,\n        \"w\": 21\n      }\n    },\n    \"expected_output\": [7, 14, 21],\n    \"test_aspect\": \"Handling empty constants list with valid arguments.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"constants\": [9],\n      \"arguments\": {\n        \"r\": 3,\n        \"m\": 6,\n        \"w\": 12\n      }\n    },\n    \"expected_output\": [9, 3, 6, 12],\n    \"test_aspect\": \"Single constant with multiple arguments.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"constants\": [0, -1, -2],\n      \"arguments\": {\n        \"r\": -3,\n        \"m\": -4,\n        \"w\": 5\n      }\n    },\n    \"expected_output\": [0, -1, -2, -3, -4, 5],\n    \"test_aspect\": \"Negative values in constants and arguments.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"constants\": [100, 200],\n      \"arguments\": {\n        \"r\": 300,\n        \"m\": 400,\n        \"w\": 500\n      }\n    },\n    \"expected_output\": [100, 200, 300, 400, 500],\n    \"test_aspect\": \"Large values as constants and arguments.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"constants\": [\"a\", \"b\"],\n      \"arguments\": {\n        \"r\": \"c\",\n        \"m\": \"d\",\n        \"w\": \"e\"\n      }\n    },\n    \"expected_output\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n    \"test_aspect\": \"String values for constants and arguments.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"constants\": [None],\n      \"arguments\": {\n        \"r\": None,\n        \"m\": None,\n        \"w\": None\n      }\n    },\n    \"expected_output\": [None, None, None, None],\n    \"test_aspect\": \"None values in constants and arguments.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"constants\": [],\n      \"arguments\": {\n        \"r\": 0,\n        \"m\": 0,\n        \"w\": 0\n      }\n    },\n    \"expected_output\": [0, 0, 0],\n    \"test_aspect\": \"Zero values as valid arguments with empty constants.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"constants\": [42, 84],\n      \"arguments\": {\n        \"r\": 7.5,\n        \"m\": 15.0,\n        \"w\": 22.5\n      }\n    },\n    \"expected_output\": [42, 84, 7.5, 15.0, 22.5],\n    \"test_aspect\": \"Float values for arguments with integer constants.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"constants\": [1, 2],\n      \"arguments\": {\n        \"r\": \"Hello\",\n        \"m\": \"World\",\n        \"w\": \"!\"\n      }\n    },\n    \"expected_output\": [1, 2, \"Hello\", \"World\", \"!\"],\n    \"test_aspect\": \"Mix of integers in constants and strings in arguments.\"\n  }\n}\n```"}
{"index": 4187, "preference": "functionality", "prompt": "You are tasked with implementing a class that represents a person's name. The class should have the following requirements:\n\n1. The class should be named `PersonName`.\n2. It should have a private instance variable `nameAsString` of type `String` to store the person's name as a string.\n3. The class should have a constructor that takes a `String` parameter and initializes the `nameAsString` variable with the provided value.\n4. It should have a method `getNameAsString` that returns the person's name as a string.\n\nYour task is to implement the `PersonName` class according to the given requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"\",\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Testing with an empty string to ensure the class can handle no input.\"\n  },\n  \"test_case2\": {\n    \"input\": \"John Doe\",\n    \"expected_output\": \"John Doe\",\n    \"test_aspect\": \"Testing with a typical name to verify that the name is stored and retrieved correctly.\"\n  },\n  \"test_case3\": {\n    \"input\": \"Alice\",\n    \"expected_output\": \"Alice\",\n    \"test_aspect\": \"Testing with a single-word name to ensure basic functionality works.\"\n  },\n  \"test_case4\": {\n    \"input\": \"O'Conner\",\n    \"expected_output\": \"O'Conner\",\n    \"test_aspect\": \"Testing with a name that includes special characters (apostrophe) to check for correct handling.\"\n  },\n  \"test_case5\": {\n    \"input\": \"Marie Curie\",\n    \"expected_output\": \"Marie Curie\",\n    \"test_aspect\": \"Testing with a name that has a space to ensure it is handled correctly.\"\n  },\n  \"test_case6\": {\n    \"input\": \"José García\",\n    \"expected_output\": \"José García\",\n    \"test_aspect\": \"Testing with a name that includes accented characters to verify correct handling of Unicode.\"\n  },\n  \"test_case7\": {\n    \"input\": \"   Leading and trailing spaces   \",\n    \"expected_output\": \"   Leading and trailing spaces   \",\n    \"test_aspect\": \"Testing with leading and trailing spaces to ensure they are preserved.\"\n  },\n  \"test_case8\": {\n    \"input\": \"12345\",\n    \"expected_output\": \"12345\",\n    \"test_aspect\": \"Testing with a numeric string to ensure the class can handle non-alphabetic input.\"\n  },\n  \"test_case9\": {\n    \"input\": \"A very very long name that exceeds typical lengths\",\n    \"expected_output\": \"A very very long name that exceeds typical lengths\",\n    \"test_aspect\": \"Testing with a long name string to ensure there is no length restriction.\"\n  },\n  \"test_case10\": {\n    \"input\": null,\n    \"expected_output\": \"Exception/Error\",\n    \"test_aspect\": \"Testing with null input to verify that the class handles it gracefully, expecting an exception or specific behavior.\"\n  }\n}\n```"}
{"index": 6327, "preference": "functionality", "prompt": "You are tasked with implementing a web application that processes votes from users. The provided code snippet is a part of a web application using the webapp2 framework in Python. The `WSGIApplication` class is used to define the URL routes and their corresponding request handlers. In this case, the route `/worker/process_vote` is mapped to the `VoteHandler` class for processing vote requests.\n\nYour task is to implement the `VoteHandler` class to handle incoming vote requests. The handler should extract the vote data from the request, process it, and update the vote count accordingly. Additionally, the handler should ensure that the vote processing is done securely and efficiently.\n\nDesign and implement the `VoteHandler` class to fulfill the requirements mentioned above. Consider handling potential errors and ensuring the security of the vote processing.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"{\\\"vote\\\": \\\"up\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"success\\\", \\\"vote_count\\\": 1}\",\n    \"test_aspect\": \"Basic functionality - processing an 'up' vote successfully.\"\n  },\n  \"test_case2\": {\n    \"input\": \"{\\\"vote\\\": \\\"down\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"success\\\", \\\"vote_count\\\": -1}\",\n    \"test_aspect\": \"Basic functionality - processing a 'down' vote successfully.\"\n  },\n  \"test_case3\": {\n    \"input\": \"{\\\"vote\\\": \\\"invalid_vote\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"error\\\", \\\"message\\\": \\\"Invalid vote type\\\"}\",\n    \"test_aspect\": \"Error handling - processing an invalid vote type.\"\n  },\n  \"test_case4\": {\n    \"input\": \"\",\n    \"expected_output\": \"{\\\"status\\\": \\\"error\\\", \\\"message\\\": \\\"No vote data provided\\\"}\",\n    \"test_aspect\": \"Error handling - processing an empty request.\"\n  },\n  \"test_case5\": {\n    \"input\": \"{\\\"vote\\\": \\\"up\\\", \\\"user_id\\\": \\\"12345\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"success\\\", \\\"vote_count\\\": 1}\",\n    \"test_aspect\": \"Processing a valid vote with user identification.\"\n  },\n  \"test_case6\": {\n    \"input\": \"{\\\"vote\\\": \\\"down\\\", \\\"user_id\\\": \\\"12345\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"success\\\", \\\"vote_count\\\": -1}\",\n    \"test_aspect\": \"Processing a valid down vote with user identification.\"\n  },\n  \"test_case7\": {\n    \"input\": \"{\\\"vote\\\": \\\"up\\\", \\\"user_id\\\": \\\"12345\\\", \\\"session_token\\\": \\\"valid_token\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"success\\\", \\\"vote_count\\\": 1}\",\n    \"test_aspect\": \"Security check - processing a vote with a valid session token.\"\n  },\n  \"test_case8\": {\n    \"input\": \"{\\\"vote\\\": \\\"up\\\", \\\"user_id\\\": \\\"12345\\\", \\\"session_token\\\": \\\"invalid_token\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"error\\\", \\\"message\\\": \\\"Invalid session token\\\"}\",\n    \"test_aspect\": \"Security check - processing a vote with an invalid session token.\"\n  },\n  \"test_case9\": {\n    \"input\": \"{\\\"vote\\\": \\\"down\\\", \\\"user_id\\\": \\\"12345\\\", \\\"session_token\\\": \\\"valid_token\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"success\\\", \\\"vote_count\\\": -1}\",\n    \"test_aspect\": \"Security check - processing a down vote with a valid session token.\"\n  },\n  \"test_case10\": {\n    \"input\": \"{\\\"vote\\\": \\\"up\\\", \\\"user_id\\\": \\\"12345\\\", \\\"session_token\\\": \\\"valid_token\\\"}\",\n    \"expected_output\": \"{\\\"status\\\": \\\"success\\\", \\\"vote_count\\\": 1}\",\n    \"test_aspect\": \"Consistency check - ensuring multiple valid votes from the same user are handled correctly.\"\n  }\n}\n```"}
{"index": 1047, "preference": "functionality", "prompt": "You are tasked with implementing a JSON reporter class for a statistical benchmarking application. The JSON reporter is responsible for formatting and outputting benchmarking results in JSON format. The reporter should be able to handle various types of statistical data and produce a well-structured JSON output.\n\nYour task is to design and implement the `JsonReporter` class, which should have the following features:\n1. Accept benchmarking data in a structured format.\n2. Convert the benchmarking data into a JSON format.\n3. Handle different types of statistical data, such as mean, median, standard deviation, etc.\n4. Ensure that the JSON output is well-formatted and follows a consistent structure.\n\nYou should also consider error handling and edge cases when implementing the `JsonReporter` class.\n\nDesign and implement the `JsonReporter` class in C++ to meet the specified requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"data\": [3.5, 2.1, 4.7, 1.9],\n      \"type\": \"mean\"\n    },\n    \"expected_output\": \"{\\\"mean\\\": 3.05}\",\n    \"test_aspect\": \"Testing basic mean calculation with a simple dataset.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"data\": [5, 2, 3, 8],\n      \"type\": \"median\"\n    },\n    \"expected_output\": \"{\\\"median\\\": 3.5}\",\n    \"test_aspect\": \"Testing median calculation with an even number of elements.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"data\": [1, 2, 3, 4, 5],\n      \"type\": \"standard_deviation\"\n    },\n    \"expected_output\": \"{\\\"standard_deviation\\\": 1.4142135623730951}\",\n    \"test_aspect\": \"Testing standard deviation calculation for a simple sequence.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"data\": [],\n      \"type\": \"mean\"\n    },\n    \"expected_output\": \"{\\\"error\\\": \\\"No data provided\\\"}\",\n    \"test_aspect\": \"Handling edge case of empty input dataset for mean calculation.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"data\": [10, 10, 10],\n      \"type\": \"standard_deviation\"\n    },\n    \"expected_output\": \"{\\\"standard_deviation\\\": 0}\",\n    \"test_aspect\": \"Testing standard deviation with constant values.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"data\": [7, 0, 3, 5],\n      \"type\": \"mean\"\n    },\n    \"expected_output\": \"{\\\"mean\\\": 3.75}\",\n    \"test_aspect\": \"Testing mean calculation with negative and positive values.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"data\": [20, 30, 10],\n      \"type\": \"median\"\n    },\n    \"expected_output\": \"{\\\"median\\\": 20}\",\n    \"test_aspect\": \"Testing median calculation with unsorted values.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"data\": [1.1, 2.2, 3.3, 4.4],\n      \"type\": \"mean\"\n    },\n    \"expected_output\": \"{\\\"mean\\\": 2.75}\",\n    \"test_aspect\": \"Testing mean calculation with floating-point numbers.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"data\": [1, 2, 3],\n      \"type\": \"variance\"\n    },\n    \"expected_output\": \"{\\\"error\\\": \\\"Unsupported statistical type\\\"}\",\n    \"test_aspect\": \"Testing handling of unsupported statistical type.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"data\": [2, 4, 4, 4, 5, 5, 7, 9],\n      \"type\": \"median\"\n    },\n    \"expected_output\": \"{\\\"median\\\": 4.0}\",\n    \"test_aspect\": \"Testing median calculation with a dataset containing repeated values.\"\n  }\n}\n```"}
{"index": 19524, "preference": "functionality", "prompt": "You are tasked with creating a Python function that dynamically calculates the number of columns for displaying camera feeds in a graphical user interface (GUI). The function should take the number of camera feeds as input and return the optimal number of columns for arranging the feeds in the GUI.\n\nThe GUI framework being used provides a `display` object and a `VIDEORESIZE` event type. The code snippet provided is a part of a larger program that handles the resizing of the display window and the arrangement of camera feeds within it. The variable `num_cams` represents the number of camera feeds, and `num_cols` is the number of columns used to display the feeds. The goal is to make the number of columns dynamic, adjusting based on the number of camera feeds.\n\nYour task is to implement the `calculate_columns` function that takes the number of camera feeds as input and returns the optimal number of columns for arranging the feeds in the GUI. The number of columns should be calculated based on the total number of camera feeds to ensure an aesthetically pleasing and space-efficient layout.\n\nFunction signature:\n```python\ndef calculate_columns(num_cams: int) -> int:\n    pass\n```\n\nFor example, if there are 8 camera feeds, the function should return 4, as 8 feeds can be evenly arranged in 4 columns.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"0\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"Test with zero camera feeds; should return 0 columns.\"\n  },\n  \"test_case2\": {\n    \"input\": \"1\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Test with one camera feed; should return 1 column.\"\n  },\n  \"test_case3\": {\n    \"input\": \"2\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Test with two camera feeds; should return 1 column for optimal arrangement.\"\n  },\n  \"test_case4\": {\n    \"input\": \"3\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Test with three camera feeds; should return 1 column.\"\n  },\n  \"test_case5\": {\n    \"input\": \"4\",\n    \"expected_output\": \"2\",\n    \"test_aspect\": \"Test with four camera feeds; should return 2 columns, evenly arranged.\"\n  },\n  \"test_case6\": {\n    \"input\": \"5\",\n    \"expected_output\": \"2\",\n    \"test_aspect\": \"Test with five camera feeds; should return 2 columns.\"\n  },\n  \"test_case7\": {\n    \"input\": \"8\",\n    \"expected_output\": \"4\",\n    \"test_aspect\": \"Test with eight camera feeds; should return 4 columns as they can be evenly arranged.\"\n  },\n  \"test_case8\": {\n    \"input\": \"10\",\n    \"expected_output\": \"5\",\n    \"test_aspect\": \"Test with ten camera feeds; should return 5 columns.\"\n  },\n  \"test_case9\": {\n    \"input\": \"15\",\n    \"expected_output\": \"5\",\n    \"test_aspect\": \"Test with fifteen camera feeds; should return 5 columns.\"\n  },\n  \"test_case10\": {\n    \"input\": \"16\",\n    \"expected_output\": \"4\",\n    \"test_aspect\": \"Test with sixteen camera feeds; should return 4 columns as they can be evenly arranged.\"\n  }\n}\n```"}
{"index": 4102, "preference": "functionality", "prompt": "You are given a list of integers representing the scores of a game. The game has a special rule where if the current score is the same as the previous score, the current score is discounted. Your task is to write a function `calculate_final_score(scores)` that calculates the final score after applying this rule.\n\nFunction signature: `def calculate_final_score(scores: List[int]) -> int`\n\n**Input**\n- The input parameter `scores` is a list of integers (0 <= len(scores) <= 10^5), where each integer represents a score in the game. Each score is an integer in the range [-100, 100].\n\n**Output**\n- The function should return an integer representing the final score after applying the special rule.\n\n**Example**\n```\ncalculate_final_score([10, 5, 5, 3, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) => 36\n```\n\n**Note**\nIn the given example, the final score is calculated as follows:\n- 10 (initial score)\n- 5 (5 discounted)\n- 5 (3)\n- 3 (8)\n- 8 (8 discounted)\n- 8 (5)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- 5 (5 discounted)\n- Final score = 36", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"[10, 5, 5, 3, 8, 8, 8, 5]\",\n    \"expected_output\": \"30\",\n    \"test_aspect\": \"Basic functionality with regular scores, testing discounting of repeated scores.\"\n  },\n  \"test_case2\": {\n    \"input\": \"[0, 0, 0, 0]\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"All scores are the same and should all be discounted.\"\n  },\n  \"test_case3\": {\n    \"input\": \"[100, 100, 100, 90, 90, 80]\",\n    \"expected_output\": \"270\",\n    \"test_aspect\": \"Testing with maximum positive scores, ensuring discounts apply correctly.\"\n  },\n  \"test_case4\": {\n    \"input\": \"[]\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"Empty input list should return a score of 0.\"\n  },\n  \"test_case5\": {\n    \"input\": \"[10, -10, -10, 10, 10]\",\n    \"expected_output\": \"20\",\n    \"test_aspect\": \"Mixed positive and negative scores with discounts on negatives.\"\n  },\n  \"test_case6\": {\n    \"input\": \"[-1, -1, 0, 0, 1, 1]\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Testing with negative scores and zero, checking discount logic.\"\n  },\n  \"test_case7\": {\n    \"input\": \"[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\",\n    \"expected_output\": \"5\",\n    \"test_aspect\": \"All scores are the same, only the first should count.\"\n  },\n  \"test_case8\": {\n    \"input\": \"[100, -100, 100, -100, 100]\",\n    \"expected_output\": \"200\",\n    \"test_aspect\": \"Alternating high and low scores to check discount logic.\"\n  },\n  \"test_case9\": {\n    \"input\": \"[1, 2, 3, 4, 5]\",\n    \"expected_output\": \"15\",\n    \"test_aspect\": \"All unique scores should sum correctly without any discounts.\"\n  },\n  \"test_case10\": {\n    \"input\": \"[10, 10, 5, 5, 5, 5, 3, 3, 3]\",\n    \"expected_output\": \"18\",\n    \"test_aspect\": \"Testing with both repeated scores and unique ones, ensuring correct calculation.\"\n  }\n}\n```"}
{"index": 30092, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that processes a list of integers and returns the count of unique elements in the list. The function should also have the capability to accept optional parameters for filtering the elements based on certain conditions.\n\nYou are given the following code snippet as a starting point:\n\n```python\ndef count_unique_elements(input_list, param_one=True, param_two=0, param_three={}):\n    # Your implementation here\n```\n\nThe function `count_unique_elements` takes in the following parameters:\n- `input_list`: a list of integers to process\n- `param_one` (optional, default=True): a boolean parameter indicating whether to include negative numbers in the count\n- `param_two` (optional, default=0): an integer parameter indicating the threshold value for including elements in the count\n- `param_three` (optional, default={}): a dictionary parameter containing key-value pairs to filter elements based on their presence in the dictionary keys and values\n\nYour task is to complete the implementation of the `count_unique_elements` function according to the following specifications:\n1. If `param_one` is True, negative numbers should be included in the count of unique elements. If False, negative numbers should be excluded from the count.\n2. Only elements greater than or equal to `param_two` should be included in the count of unique elements.\n3. Elements in the `input_list` should be filtered based on the key-value pairs in the `param_three` dictionary. An element should be included in the count if it matches any key or value in the `param_three` dictionary.\n\nYour function should return the count of unique elements in the `input_list` based on the specified filtering criteria.\n\nNote: The count of unique elements should consider each distinct value only once, regardless of its frequency in the input list.\n\nWrite the complete implementation of the `count_unique_elements` function to solve the problem.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"input_list\": [1, 2, 3, 4, 5],\n      \"param_one\": true,\n      \"param_two\": 0,\n      \"param_three\": {}\n    },\n    \"expected_output\": 5,\n    \"test_aspect\": \"Basic case with all positive integers and no filters applied.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"input_list\": [-1, -2, -3, -4],\n      \"param_one\": true,\n      \"param_two\": 0,\n      \"param_three\": {}\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"Case with all negative integers included, testing basic count with param_one = true.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"input_list\": [-1, -2, -3, -4],\n      \"param_one\": false,\n      \"param_two\": 0,\n      \"param_three\": {}\n    },\n    \"expected_output\": 0,\n    \"test_aspect\": \"Case with all negative integers excluded, testing count with param_one = false.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"input_list\": [1, 2, 3, 4, 5, 2, 3],\n      \"param_one\": true,\n      \"param_two\": 2,\n      \"param_three\": {}\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"Counting unique elements with a threshold value that filters out smaller numbers.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"input_list\": [1, 2, 3, 2, 1],\n      \"param_one\": true,\n      \"param_two\": 1,\n      \"param_three\": {1: \"single\"}\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"Test filtering based on presence in param_three dictionary. Include 1 based on key.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"input_list\": [1, 2, 3, 1, 2],\n      \"param_one\": true,\n      \"param_two\": 1,\n      \"param_three\": {4: \"four\"}\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"Test case where no elements match param_three dictionary, should only count unique values.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"input_list\": [5, 5, 5, 5],\n      \"param_one\": true,\n      \"param_two\": 5,\n      \"param_three\": {}\n    },\n    \"expected_output\": 1,\n    \"test_aspect\": \"Test with all identical elements above threshold, should return count of unique elements.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"input_list\": [0, 1, 2, 3, 4],\n      \"param_one\": true,\n      \"param_two\": 0,\n      \"param_three\": {0: \"zero\"}\n    },\n    \"expected_output\": 5,\n    \"test_aspect\": \"Including zero and checking for unique count with a dictionary that includes zero.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"input_list\": [1, 2, 3, -1, -2],\n      \"param_one\": false,\n      \"param_two\": -1,\n      \"param_three\": {}\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"Counting unique elements with negative numbers excluded and a threshold of -1.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"input_list\": [1, 2, 3, 4, -1],\n      \"param_one\": true,\n      \"param_two\": 2,\n      \"param_three\": {-1: \"negative\", 3: \"three\"}\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"Filtering with multiple entries in param_three, ensuring all are counted correctly.\"\n  }\n}\n```"}
{"index": 23325, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that processes a list of strings representing file paths and returns a dictionary containing the count of files with each unique file extension. The file extension is defined as the substring following the last occurrence of the dot (.) in the file name. If a file has no extension, it should be categorized under an empty string key in the dictionary. The function should ignore case sensitivity when determining file extensions.\n\nFunction Signature: \n```python\ndef count_file_extensions(file_paths: List[str]) -> Dict[str, int]:\n    pass\n```\n\nFor example, given the input `[\"file1.txt\", \"file2.TXT\", \"file3.csv\", \"file4\", \"file5.Py\", \"file6.py\"]`, the function should return `{\"txt\": 2, \"csv\": 1, \"\": 1, \"py\": 2}`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\"file1.txt\", \"file2.TXT\", \"file3.csv\", \"file4\", \"file5.Py\", \"file6.py\"],\n    \"expected_output\": {\"txt\": 2, \"csv\": 1, \"\": 1, \"py\": 2},\n    \"test_aspect\": \"Standard case with multiple extensions and one file without an extension.\"\n  },\n  \"test_case2\": {\n    \"input\": [\"document.pdf\", \"report.PDF\", \"summary.docx\", \"notes.doc\"],\n    \"expected_output\": {\"pdf\": 2, \"docx\": 1, \"doc\": 1},\n    \"test_aspect\": \"Case sensitivity check for PDF and doc files.\"\n  },\n  \"test_case3\": {\n    \"input\": [\"image.jpeg\", \"photo.JPG\", \"graphic.png\", \"icon\"],\n    \"expected_output\": {\"jpeg\": 1, \"png\": 1, \"\": 1, \"jpg\": 1},\n    \"test_aspect\": \"Checking for mixed case file extensions and one file without an extension.\"\n  },\n  \"test_case4\": {\n    \"input\": [\"README\", \"LICENSE\", \"CHANGELOG\"],\n    \"expected_output\": {\"\": 3},\n    \"test_aspect\": \"All files without extensions should return empty string key.\"\n  },\n  \"test_case5\": {\n    \"input\": [\"script.js\", \"style.CSS\", \"index.HTML\", \"app.html\"],\n    \"expected_output\": {\"js\": 1, \"css\": 1, \"html\": 2},\n    \"test_aspect\": \"Ensure case insensitivity for HTML and CSS extensions.\"\n  },\n  \"test_case6\": {\n    \"input\": [\"file1..hidden\", \"file2.1.2\", \"file3..\", \".dotfile\"],\n    \"expected_output\": {\"\": 3, \"1\": 1},\n    \"test_aspect\": \"Handle files with multiple dots and hidden files.\"\n  },\n  \"test_case7\": {\n    \"input\": [\"test.tar.gz\", \"archive.TAR.GZ\", \"document.doc\"],\n    \"expected_output\": {\"tar.gz\": 2, \"doc\": 1},\n    \"test_aspect\": \"Test handling of multi-part extensions (tar.gz) and ensure case insensitivity.\"\n  },\n  \"test_case8\": {\n    \"input\": [\"file_with_space .txt\", \"another_file.txt\"],\n    \"expected_output\": {\"txt\": 2},\n    \"test_aspect\": \"Check for spaces in file names and ensure correct extension handling.\"\n  },\n  \"test_case9\": {\n    \"input\": [],\n    \"expected_output\": {},\n    \"test_aspect\": \"Empty list should return an empty dictionary.\"\n  },\n  \"test_case10\": {\n    \"input\": [\"singlefile.\", \"file.with.no.extension.\", \"anotherfile\"],\n    \"expected_output\": {\"\": 3},\n    \"test_aspect\": \"Test files with trailing dots and no actual extensions.\"\n  }\n}\n```"}
{"index": 36664, "preference": "functionality", "prompt": "You are tasked with creating a Python package version comparison function. The function should take two version strings as input and return whether the first version is greater than, equal to, or less than the second version.\n\nThe version strings follow the semantic versioning format, which consists of three non-negative integers separated by periods (e.g., \"1.7.1\"). The integers represent major, minor, and patch versions, respectively.\n\nWrite a function `compare_versions(version1, version2)` that compares two version strings and returns:\n- 1 if version1 is greater than version2\n- 0 if version1 is equal to version2\n- -1 if version1 is less than version2\n\nExample:\n```\ncompare_versions('1.7.1', '1.7.0')  # Output: 1\ncompare_versions('2.0.0', '2.0.0')  # Output: 0\ncompare_versions('0.9.5', '1.0.0')  # Output: -1\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"('1.0.0', '1.0.1')\",\n    \"expected_output\": \"-1\",\n    \"test_aspect\": \"Basic comparison where version1 is less than version2.\"\n  },\n  \"test_case2\": {\n    \"input\": \"('1.2.3', '1.2.3')\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"Equality check where both version strings are the same.\"\n  },\n  \"test_case3\": {\n    \"input\": \"('2.0.0', '1.9.9')\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Comparison where version1 is greater due to the major version.\"\n  },\n  \"test_case4\": {\n    \"input\": \"('1.1.0', '1.0.1')\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Comparison where version1 is greater due to the minor version.\"\n  },\n  \"test_case5\": {\n    \"input\": \"('1.0.2', '1.0.1')\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Comparison where version1 is greater due to the patch version.\"\n  },\n  \"test_case6\": {\n    \"input\": \"('0.0.1', '0.0.0')\",\n    \"expected_output\": \"1\",\n    \"test_aspect\": \"Basic comparison where version1 is greater with all components being non-negative.\"\n  },\n  \"test_case7\": {\n    \"input\": \"('1.0.0', '1.0')\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"Comparison where version2 is missing the patch version.\"\n  },\n  \"test_case8\": {\n    \"input\": \"('1.0.0', '1.0.0.0')\",\n    \"expected_output\": \"0\",\n    \"test_aspect\": \"Comparison where version2 has extra zero components.\"\n  },\n  \"test_case9\": {\n    \"input\": \"('0.0.0', '0.0.1')\",\n    \"expected_output\": \"-1\",\n    \"test_aspect\": \"Comparison where version1 is less than version2, testing lower boundary.\"\n  },\n  \"test_case10\": {\n    \"input\": \"('1.1.1', '1.1.2')\",\n    \"expected_output\": \"-1\",\n    \"test_aspect\": \"Comparison where version1 is less than version2 due to patch version.\"\n  }\n}\n```"}
{"index": 15575, "preference": "functionality", "prompt": "You are tasked with creating a simple user interface (UI) tab system for a web application. The code snippet provided is a part of a Python script using a hypothetical UI library. The `ui.tab` function is used to define individual tabs within a tab bar, specifying their name, label, and icon. The `page` object is used to save the tab configuration.\n\nYour task is to implement a Python function that takes a list of tab details and generates the necessary code to create the UI tab system. The function should produce the code for defining the tabs and saving the page, similar to the code snippet provided.\n\nWrite a function `generate_tab_code` that takes a list of dictionaries, where each dictionary represents a tab with the keys 'name', 'label', and 'icon'. The function should return a string containing the Python code to define the tabs and save the page, based on the input list.\n\nExample:\nInput:\n```python\ntabs = [\n    {'name': 'email', 'label': 'Mail', 'icon': 'Mail'},\n    {'name': 'events', 'label': 'Events', 'icon': 'Calendar'},\n    {'name': 'spam', 'label': 'Spam', 'icon': 'Heart'}\n]\n```\nOutput:\n```python\nui.tab(name='email', label='Mail', icon='Mail'),\nui.tab(name='events', label='Events', icon='Calendar'),\nui.tab(name='spam', label='Spam', icon='Heart'),\npage.save()\n```\n\nAssume that the input list will always contain at least one tab, and the 'name', 'label', and 'icon' keys will always be present in each tab dictionary.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"[{'name': 'home', 'label': 'Home', 'icon': 'Home'}, {'name': 'settings', 'label': 'Settings', 'icon': 'Gear'}]\",\n    \"expected_output\": \"ui.tab(name='home', label='Home', icon='Home'),\\nui.tab(name='settings', label='Settings', icon='Gear'),\\npage.save()\",\n    \"test_aspect\": \"Basic functionality with two tabs\"\n  },\n  \"test_case2\": {\n    \"input\": \"[{'name': 'profile', 'label': 'Profile', 'icon': 'User'}]\",\n    \"expected_output\": \"ui.tab(name='profile', label='Profile', icon='User'),\\npage.save()\",\n    \"test_aspect\": \"Single tab input\"\n  },\n  \"test_case3\": {\n    \"input\": \"[{'name': 'dashboard', 'label': 'Dashboard', 'icon': 'Dashboard'}, {'name': 'reports', 'label': 'Reports', 'icon': 'File'}]\",\n    \"expected_output\": \"ui.tab(name='dashboard', label='Dashboard', icon='Dashboard'),\\nui.tab(name='reports', label='Reports', icon='File'),\\npage.save()\",\n    \"test_aspect\": \"Check multiple tab configuration\"\n  },\n  \"test_case4\": {\n    \"input\": \"[{'name': 'about', 'label': 'About', 'icon': 'Info'}, {'name': 'contact', 'label': 'Contact', 'icon': 'Phone'}, {'name': 'help', 'label': 'Help', 'icon': 'Question'}]\",\n    \"expected_output\": \"ui.tab(name='about', label='About', icon='Info'),\\nui.tab(name='contact', label='Contact', icon='Phone'),\\nui.tab(name='help', label='Help', icon='Question'),\\npage.save()\",\n    \"test_aspect\": \"More than three tabs to check handling of larger input\"\n  },\n  \"test_case5\": {\n    \"input\": \"[{'name': 'logout', 'label': 'Logout', 'icon': 'Exit'}]\",\n    \"expected_output\": \"ui.tab(name='logout', label='Logout', icon='Exit'),\\npage.save()\",\n    \"test_aspect\": \"Test with a tab using an action icon\"\n  },\n  \"test_case6\": {\n    \"input\": \"[{'name': 'email', 'label': 'Mail', 'icon': 'Mail'}, {'name': 'events', 'label': 'Events', 'icon': 'Calendar'}, {'name': 'spam', 'label': 'Spam', 'icon': 'Heart'}]\",\n    \"expected_output\": \"ui.tab(name='email', label='Mail', icon='Mail'),\\nui.tab(name='events', label='Events', icon='Calendar'),\\nui.tab(name='spam', label='Spam', icon='Heart'),\\npage.save()\",\n    \"test_aspect\": \"Validate against provided example from prompt\"\n  },\n  \"test_case7\": {\n    \"input\": \"[{'name': 'services', 'label': 'Services', 'icon': 'Tools'}, {'name': 'feedback', 'label': 'Feedback', 'icon': 'Comment'}]\",\n    \"expected_output\": \"ui.tab(name='services', label='Services', icon='Tools'),\\nui.tab(name='feedback', label='Feedback', icon='Comment'),\\npage.save()\",\n    \"test_aspect\": \"Check with common service-related tabs\"\n  },\n  \"test_case8\": {\n    \"input\": \"[{'name': 'analytics', 'label': 'Analytics', 'icon': 'BarChart'}, {'name': 'administration', 'label': 'Administration', 'icon': 'Settings'}]\",\n    \"expected_output\": \"ui.tab(name='analytics', label='Analytics', icon='BarChart'),\\nui.tab(name='administration', label='Administration', icon='Settings'),\\npage.save()\",\n    \"test_aspect\": \"Test for tabs with specific domain-related labels\"\n  },\n  \"test_case9\": {\n    \"input\": \"[{'name': 'notifications', 'label': 'Notifications', 'icon': 'Bell'}, {'name': 'privacy', 'label': 'Privacy', 'icon': 'Lock'}, {'name': 'terms', 'label': 'Terms', 'icon': 'Document'}]\",\n    \"expected_output\": \"ui.tab(name='notifications', label='Notifications', icon='Bell'),\\nui.tab(name='privacy', label='Privacy', icon='Lock'),\\nui.tab(name='terms', label='Terms', icon='Document'),\\npage.save()\",\n    \"test_aspect\": \"Check with tabs focusing on legal and notification aspects\"\n  },\n  \"test_case10\": {\n    \"input\": \"[{'name': 'custom', 'label': 'Custom', 'icon': 'Star'}]\",\n    \"expected_output\": \"ui.tab(name='custom', label='Custom', icon='Star'),\\npage.save()\",\n    \"test_aspect\": \"Test with a custom icon name\"\n  }\n}\n```"}
{"index": 9418, "preference": "functionality", "prompt": "You are tasked with implementing a function that processes a list of articles and returns a new list containing only the articles that meet certain criteria. Each article is represented as a dictionary with keys \"title\", \"author\", and \"published_date\". The function should filter the articles based on the following conditions:\n1. The article's title must contain the word \"Python\".\n2. The article's author must not be \"Anonymous\".\n3. The article's published date must be in the last year (from the current date).\n\nYou are given a partial code snippet as inspiration:\n\n```python\ndef filter_articles(articles):\n    filtered_articles = []\n    for article in articles:\n        if \"Python\" in article[\"title\"] and article[\"author\"] != \"Anonymous\":\n            # Check if the published date is in the last year\n            # Add the article to the filtered list if it meets all conditions\n            filtered_articles.append(article)\n    return filtered_articles\n```\n\nYour task is to complete the `filter_articles` function to satisfy all the given conditions and return the filtered list of articles.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [{\"title\": \"Learning Python for Beginners\", \"author\": \"John Doe\", \"published_date\": \"2023-01-15\"}],\n    \"expected_output\": [{\"title\": \"Learning Python for Beginners\", \"author\": \"John Doe\", \"published_date\": \"2023-01-15\"}],\n    \"test_aspect\": \"Single article that meets all criteria.\"\n  },\n  \"test_case2\": {\n    \"input\": [{\"title\": \"Advanced Python Programming\", \"author\": \"Jane Smith\", \"published_date\": \"2022-12-30\"}],\n    \"expected_output\": [],\n    \"test_aspect\": \"Article published more than a year ago.\"\n  },\n  \"test_case3\": {\n    \"input\": [{\"title\": \"Python Algorithms\", \"author\": \"Anonymous\", \"published_date\": \"2023-02-05\"}],\n    \"expected_output\": [],\n    \"test_aspect\": \"Article by an anonymous author.\"\n  },\n  \"test_case4\": {\n    \"input\": [{\"title\": \"Understanding Python\", \"author\": \"Alice Johnson\", \"published_date\": \"2023-11-01\"}],\n    \"expected_output\": [{\"title\": \"Understanding Python\", \"author\": \"Alice Johnson\", \"published_date\": \"2023-11-01\"}],\n    \"test_aspect\": \"Recent article after current date should be excluded.\"\n  },\n  \"test_case5\": {\n    \"input\": [{\"title\": \"Python Basics\", \"author\": \"Jake White\", \"published_date\": \"2023-05-10\"},\n              {\"title\": \"Non-Python Article\", \"author\": \"John Doe\", \"published_date\": \"2023-01-01\"}],\n    \"expected_output\": [{\"title\": \"Python Basics\", \"author\": \"Jake White\", \"published_date\": \"2023-05-10\"}],\n    \"test_aspect\": \"Multiple articles with one valid and one invalid.\"\n  },\n  \"test_case6\": {\n    \"input\": [],\n    \"expected_output\": [],\n    \"test_aspect\": \"Empty input list should return an empty output.\"\n  },\n  \"test_case7\": {\n    \"input\": [{\"title\": \"Python Tips\", \"author\": \"David Brown\", \"published_date\": \"2023-03-20\"},\n              {\"title\": \"Python Tricks\", \"author\": \"Anonymous\", \"published_date\": \"2023-04-15\"},\n              {\"title\": \"Python in Data Science\", \"author\": \"Emily Davis\", \"published_date\": \"2021-11-10\"}],\n    \"expected_output\": [{\"title\": \"Python Tips\", \"author\": \"David Brown\", \"published_date\": \"2023-03-20\"}],\n    \"test_aspect\": \"Only valid articles should be included.\"\n  },\n  \"test_case8\": {\n    \"input\": [{\"title\": \"Python and You\", \"author\": \"Chris Green\", \"published_date\": \"2023-07-25\"},\n              {\"title\": \"Understanding Java\", \"author\": \"Natalie Red\", \"published_date\": \"2023-08-12\"}],\n    \"expected_output\": [{\"title\": \"Python and You\", \"author\": \"Chris Green\", \"published_date\": \"2023-07-25\"}],\n    \"test_aspect\": \"Mixed content articles, only Python article should be returned.\"\n  },\n  \"test_case9\": {\n    \"input\": [{\"title\": \"The Future of Python\", \"author\": \"Anonymous\", \"published_date\": \"2022-09-23\"},\n              {\"title\": \"Learning Python\", \"author\": \"Mark Black\", \"published_date\": \"2023-10-11\"}],\n    \"expected_output\": [{\"title\": \"Learning Python\", \"author\": \"Mark Black\", \"published_date\": \"2023-10-11\"}],\n    \"test_aspect\": \"Valid article included after invalid anonymous.\"\n  },\n  \"test_case10\": {\n    \"input\": [{\"title\": \"Python for Everyone\", \"author\": \"Jonathan Grey\", \"published_date\": \"2023-08-01\"},\n              {\"title\": \"Python Fundamentals\", \"author\": \"Anonymous\", \"published_date\": \"2023-05-12\"},\n              {\"title\": \"On the Road with Python\", \"author\": \"Lisa Gold\", \"published_date\": \"2023-02-28\"}],\n    \"expected_output\": [{\"title\": \"Python for Everyone\", \"author\": \"Jonathan Grey\", \"published_date\": \"2023-08-01\"},\n                        {\"title\": \"On the Road with Python\", \"author\": \"Lisa Gold\", \"published_date\": \"2023-02-28\"}],\n    \"test_aspect\": \"Valid articles with one anonymous author.\"\n  }\n}\n```"}
{"index": 32869, "preference": "functionality", "prompt": "You are tasked with implementing a method for the `Features` class that determines whether the stored features are sparse or not. The `Features` class is used to store features produced by any featurizer and has the following attributes:\n- `features`: A NumPy array or a sparse matrix (scipy.sparse.spmatrix) containing the features.\n- `message_attribute`: A string representing the message attribute associated with the features.\n- `origin`: A string representing the origin of the features.\n\nYour task is to implement the `is_sparse` method that returns `True` if the stored features are sparse (i.e., an instance of `scipy.sparse.spmatrix`), and `False` otherwise.\n\nImplement the `is_sparse` method in the `Features` class.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"features\": [[0, 0], [0, 0]],\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Checking a dense NumPy array with all zeros.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"features\": [[1, 0], [0, 2]],\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Checking a dense NumPy array with non-zero values.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"features\": \"scipy.sparse.csr_matrix([[0, 0], [0, 0]])\",\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Checking a sparse matrix with all zeros.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"features\": \"scipy.sparse.csr_matrix([[1, 0], [0, 2]])\",\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Checking a sparse matrix with non-zero values.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"features\": \"scipy.sparse.csr_matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\",\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Checking a sparse matrix that is entirely zero.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"features\": [[0, 0], [1, 0]],\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Checking a dense NumPy array with one non-zero value.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"features\": \"scipy.sparse.csr_matrix([[0, 1], [0, 0]])\",\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Checking a sparse matrix with one non-zero entry.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"features\": [[1, 1], [1, 1]],\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Checking a dense NumPy array with all non-zero values.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"features\": \"scipy.sparse.csr_matrix([[0, 0], [0, 1], [1, 0]])\",\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": true,\n    \"test_aspect\": \"Checking a sparse matrix with multiple non-zero entries.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"features\": [],\n      \"message_attribute\": \"test\",\n      \"origin\": \"test_origin\"\n    },\n    \"expected_output\": false,\n    \"test_aspect\": \"Checking an empty NumPy array.\"\n  }\n}\n```"}
{"index": 27359, "preference": "functionality", "prompt": "You are tasked with creating a Python program that can parse a configuration file and extract specific information from it. The configuration file follows a specific format, where each line contains a key-value pair separated by an equal sign (=). Your program should be able to read this file and extract the values associated with specific keys.\n\nWrite a Python function `extract_config_value(file_path, key)` that takes in the file path of the configuration file and a key, and returns the value associated with that key in the file. If the key is not found in the file, the function should return None.\n\nFor example, given the following content in the configuration file named `config.ini`:\n```\ns2srun=pyreshaper.cli.s2srun:main\ninstall_requires=install_requires\n```\nCalling `extract_config_value('config.ini', 's2srun')` should return `'pyreshaper.cli.s2srun:main'`, and calling `extract_config_value('config.ini', 'install_requires')` should return `'install_requires'`.\n\nAssume that the configuration file will always have valid key-value pairs separated by an equal sign (=), and there will be no spaces around the equal sign.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [\"config.ini\", \"s2srun\"],\n    \"expected_output\": \"pyreshaper.cli.s2srun:main\",\n    \"test_aspect\": \"Basic retrieval of existing key\"\n  },\n  \"test_case2\": {\n    \"input\": [\"config.ini\", \"install_requires\"],\n    \"expected_output\": \"install_requires\",\n    \"test_aspect\": \"Basic retrieval of another existing key\"\n  },\n  \"test_case3\": {\n    \"input\": [\"config.ini\", \"non_existing_key\"],\n    \"expected_output\": null,\n    \"test_aspect\": \"Retrieval of a non-existing key\"\n  },\n  \"test_case4\": {\n    \"input\": [\"empty_config.ini\", \"s2srun\"],\n    \"expected_output\": null,\n    \"test_aspect\": \"Retrieval from an empty configuration file\"\n  },\n  \"test_case5\": {\n    \"input\": [\"single_entry_config.ini\", \"only_key\"],\n    \"expected_output\": \"only_value\",\n    \"test_aspect\": \"Retrieval from a file with a single key-value pair\"\n  },\n  \"test_case6\": {\n    \"input\": [\"config_with_special_chars.ini\", \"sp_key\"],\n    \"expected_output\": \"value_with_@_special#chars$\",\n    \"test_aspect\": \"Retrieval of key with special characters in value\"\n  },\n  \"test_case7\": {\n    \"input\": [\"config_with_numerical_value.ini\", \"numeric_key\"],\n    \"expected_output\": \"12345\",\n    \"test_aspect\": \"Retrieval of key with a numerical value\"\n  },\n  \"test_case8\": {\n    \"input\": [\"config_with_multiple_keys.ini\", \"second_key\"],\n    \"expected_output\": \"second_value\",\n    \"test_aspect\": \"Retrieval from a file with multiple key-value pairs\"\n  },\n  \"test_case9\": {\n    \"input\": [\"config.ini\", \"key_with_no_value\"],\n    \"expected_output\": \"\",\n    \"test_aspect\": \"Retrieval of a key with an empty value\"\n  },\n  \"test_case10\": {\n    \"input\": [\"config.ini\", \"another_invalid_key\"],\n    \"expected_output\": null,\n    \"test_aspect\": \"Retrieval of an invalid key in a valid file\"\n  }\n}\n```"}
{"index": 659, "preference": "functionality", "prompt": "You are tasked with implementing a custom `MapModel` class in Java that extends the `Serializable` interface. The `MapModel` class should have the functionality to store key-value pairs and provide methods to manipulate and retrieve data from the map.\n\nYour task is to complete the implementation of the `MapModel` class by adding the necessary methods to store, retrieve, and manipulate key-value pairs. Additionally, you need to ensure that the `MapModel` class is serializable, meaning it can be converted into a byte stream and reconstructed back into an object.\n\nYour implementation should include the following methods:\n1. `put(key, value)`: Adds the specified key-value pair to the map.\n2. `get(key)`: Returns the value associated with the specified key, or null if the key is not present in the map.\n3. `remove(key)`: Removes the key and its associated value from the map.\n4. `clear()`: Removes all key-value pairs from the map.\n5. `size()`: Returns the number of key-value pairs in the map.\n6. `serialize()`: Serializes the `MapModel` object into a byte array.\n7. `deserialize(byte[] data)`: Reconstructs a `MapModel` object from the given byte array.\n\nYou should also ensure that the `MapModel` class properly implements the `Serializable` interface.\n\nComplete the `MapModel` class with the required methods and ensure that it functions correctly and is serializable.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"method\": \"put\", \"key\": \"key1\", \"value\": \"value1\"},\n    \"expected_output\": null,\n    \"test_aspect\": \"Adding key-value pair to the map.\"\n  },\n  \"test_case2\": {\n    \"input\": {\"method\": \"get\", \"key\": \"key1\"},\n    \"expected_output\": \"value1\",\n    \"test_aspect\": \"Retrieving value for an existing key.\"\n  },\n  \"test_case3\": {\n    \"input\": {\"method\": \"get\", \"key\": \"key2\"},\n    \"expected_output\": null,\n    \"test_aspect\": \"Retrieving value for a non-existent key.\"\n  },\n  \"test_case4\": {\n    \"input\": {\"method\": \"remove\", \"key\": \"key1\"},\n    \"expected_output\": \"value1\",\n    \"test_aspect\": \"Removing an existing key from the map.\"\n  },\n  \"test_case5\": {\n    \"input\": {\"method\": \"size\"},\n    \"expected_output\": 0,\n    \"test_aspect\": \"Checking size of the map after removal.\"\n  },\n  \"test_case6\": {\n    \"input\": {\"method\": \"put\", \"key\": \"key3\", \"value\": \"value3\"},\n    \"expected_output\": null,\n    \"test_aspect\": \"Adding another key-value pair to the map.\"\n  },\n  \"test_case7\": {\n    \"input\": {\"method\": \"clear\"},\n    \"expected_output\": null,\n    \"test_aspect\": \"Clearing all key-value pairs from the map.\"\n  },\n  \"test_case8\": {\n    \"input\": {\"method\": \"size\"},\n    \"expected_output\": 0,\n    \"test_aspect\": \"Checking size of the map after clearing.\"\n  },\n  \"test_case9\": {\n    \"input\": {\"method\": \"serialize\"},\n    \"expected_output\": \"byte[]\",\n    \"test_aspect\": \"Serializing the MapModel object.\"\n  },\n  \"test_case10\": {\n    \"input\": {\"method\": \"deserialize\", \"data\": \"byte[]\"},\n    \"expected_output\": \"MapModel object\",\n    \"test_aspect\": \"Deserializing to reconstruct the MapModel object.\"\n  }\n}\n```"}
{"index": 9916, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes a given specification and returns a list of arguments based on certain conditions. The function should handle the presence of specific flags in the specification and append corresponding arguments to the list. Additionally, it should consider the value of a variant 'jemalloc_prefix' and conditionally append an argument based on its value.\n\nWrite a Python function `process_spec(spec)` that takes a dictionary `spec` as input and returns a list of arguments based on the following conditions:\n1. If the key '+stats' exists in the `spec` dictionary, append the string '--enable-stats' to the list of arguments.\n2. If the key '+prof' exists in the `spec` dictionary, append the string '--enable-prof' to the list of arguments.\n3. Obtain the value of the variant 'jemalloc_prefix' from the `spec` dictionary and store it in the variable `je_prefix`. If the value of `je_prefix` is not 'none', append the string '--with-jemalloc-prefix={value}' to the list of arguments, where {value} is the value of `je_prefix`.\n\nThe function should then return the list of arguments after processing the given `spec`.\n\nExample:\nFor the input `spec = {'+stats': True, '+prof': False, 'jemalloc_prefix': {'value': 'custom'}}`, the function should return `['--enable-stats', '--with-jemalloc-prefix=custom']`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"+stats\": True, \"+prof\": False, \"jemalloc_prefix\": {\"value\": \"custom\"}},\n    \"expected_output\": [\"--enable-stats\", \"--with-jemalloc-prefix=custom\"],\n    \"test_aspect\": \"Tests both '+stats' flag and custom jemalloc_prefix\"\n  },\n  \"test_case2\": {\n    \"input\": {\"+stats\": False, \"+prof\": True, \"jemalloc_prefix\": {\"value\": \"none\"}},\n    \"expected_output\": [\"--enable-prof\"],\n    \"test_aspect\": \"Tests '+prof' flag with jemalloc_prefix set to 'none'\"\n  },\n  \"test_case3\": {\n    \"input\": {\"+stats\": True, \"+prof\": True, \"jemalloc_prefix\": {\"value\": \"default\"}},\n    \"expected_output\": [\"--enable-stats\", \"--enable-prof\", \"--with-jemalloc-prefix=default\"],\n    \"test_aspect\": \"Tests both flags and a valid jemalloc_prefix\"\n  },\n  \"test_case4\": {\n    \"input\": {\"+stats\": False, \"+prof\": False, \"jemalloc_prefix\": {\"value\": \"none\"}},\n    \"expected_output\": [],\n    \"test_aspect\": \"Tests no flags and jemalloc_prefix set to 'none'\"\n  },\n  \"test_case5\": {\n    \"input\": {\"jemalloc_prefix\": {\"value\": \"custom-prefix\"}},\n    \"expected_output\": [\"--with-jemalloc-prefix=custom-prefix\"],\n    \"test_aspect\": \"Tests only jemalloc_prefix without any flags\"\n  },\n  \"test_case6\": {\n    \"input\": {\"+stats\": True, \"jemalloc_prefix\": {\"value\": \"none\"}},\n    \"expected_output\": [\"--enable-stats\"],\n    \"test_aspect\": \"Tests '+stats' with jemalloc_prefix set to 'none'\"\n  },\n  \"test_case7\": {\n    \"input\": {\"+prof\": False, \"jemalloc_prefix\": {\"value\": \"custom-prefix\"}},\n    \"expected_output\": [\"--with-jemalloc-prefix=custom-prefix\"],\n    \"test_aspect\": \"Tests '+prof' set to False and a valid jemalloc_prefix\"\n  },\n  \"test_case8\": {\n    \"input\": {\"+stats\": True, \"+prof\": True, \"jemalloc_prefix\": {\"value\": \"none\"}},\n    \"expected_output\": [\"--enable-stats\", \"--enable-prof\"],\n    \"test_aspect\": \"Tests both flags with jemalloc_prefix set to 'none'\"\n  },\n  \"test_case9\": {\n    \"input\": {},\n    \"expected_output\": [],\n    \"test_aspect\": \"Tests empty input\"\n  },\n  \"test_case10\": {\n    \"input\": {\"+stats\": True, \"jemalloc_prefix\": {\"value\": \"\"}},\n    \"expected_output\": [\"--enable-stats\", \"--with-jemalloc-prefix=\"],\n    \"test_aspect\": \"Tests '+stats' and an empty jemalloc_prefix\"\n  }\n}\n```"}
{"index": 9500, "preference": "functionality", "prompt": "You are tasked with implementing a neural network cost function for a machine learning model. The cost function is defined as the sum of two terms: the cross-entropy cost and a reconstruction cost. The cross-entropy cost is calculated by taking the negative sum of the element-wise product of the target output (Y) and the natural logarithm of the predicted output (noise_py_x). The reconstruction cost is a separate term that is added to the cross-entropy cost. Your task is to implement the calculation of the total cost based on these two terms.\n\nYou are given the following code snippet as a reference:\n```\ncost_y2 = -T.sum(self.Y * T.log(noise_py_x))\ncost = cost_y2 + cost_recon\n```\nWhere:\n- `self.Y` represents the target output matrix\n- `noise_py_x` represents the predicted output matrix\n- `T.sum()` calculates the sum of all elements in a matrix\n- `T.log()` computes the natural logarithm of each element in a matrix\n- `cost_recon` is the reconstruction cost, which is not explicitly defined in the given code snippet\n\nYour task is to complete the implementation of the cost function by calculating the reconstruction cost and then computing the total cost as the sum of the cross-entropy cost and the reconstruction cost.\n\nImplement the function `calculate_total_cost(self, noise_py_x, cost_recon)` in Python, where:\n- `self` is the reference to the neural network object\n- `noise_py_x` is the predicted output matrix\n- `cost_recon` is the reconstruction cost\n\nThe function should return the total cost calculated as the sum of the cross-entropy cost and the reconstruction cost.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"Y\": [[1, 0], [0, 1]],\n      \"noise_py_x\": [[0.9, 0.1], [0.2, 0.8]],\n      \"cost_recon\": 0.1\n    },\n    \"expected_output\": 0.2113,\n    \"test_aspect\": \"Standard case with proper probabilities\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"Y\": [[1, 0], [0, 1]],\n      \"noise_py_x\": [[0.5, 0.5], [0.5, 0.5]],\n      \"cost_recon\": 0.2\n    },\n    \"expected_output\": 0.6931,\n    \"test_aspect\": \"Probabilities equal to 0.5 for all classes\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"Y\": [[1, 0], [0, 1]],\n      \"noise_py_x\": [[0.0, 1.0], [1.0, 0.0]],\n      \"cost_recon\": 0.0\n    },\n    \"expected_output\": \"Inf\",\n    \"test_aspect\": \"Log of 0 leads to infinity\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"Y\": [[1, 0], [0, 1]],\n      \"noise_py_x\": [[1.0, 0.0], [0.0, 1.0]],\n      \"cost_recon\": 0.0\n    },\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"Perfect prediction with no reconstruction cost\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"Y\": [[0, 1], [1, 0]],\n      \"noise_py_x\": [[0.1, 0.9], [0.9, 0.1]],\n      \"cost_recon\": 0.5\n    },\n    \"expected_output\": 0.7461,\n    \"test_aspect\": \"Inverted classes with reconstruction cost\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"Y\": [[0, 1], [1, 0]],\n      \"noise_py_x\": [[0.0, 0.0], [0.0, 0.0]],\n      \"cost_recon\": 0.1\n    },\n    \"expected_output\": \"Inf\",\n    \"test_aspect\": \"All predictions are zero, leads to infinity\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"Y\": [[1, 1], [1, 1]],\n      \"noise_py_x\": [[0.1, 0.1], [0.1, 0.1]],\n      \"cost_recon\": 0.3\n    },\n    \"expected_output\": 2.3026,\n    \"test_aspect\": \"All ones in target with low predictions\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"Y\": [[1, 1], [1, 1]],\n      \"noise_py_x\": [[1.0, 1.0], [1.0, 1.0]],\n      \"cost_recon\": 0.0\n    },\n    \"expected_output\": 0.0,\n    \"test_aspect\": \"Perfect prediction with no reconstruction cost for all ones\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"Y\": [[0, 1], [0, 1]],\n      \"noise_py_x\": [[0.6, 0.4], [0.2, 0.8]],\n      \"cost_recon\": 0.2\n    },\n    \"expected_output\": 0.8110,\n    \"test_aspect\": \"Mixed predictions with a small reconstruction cost\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"Y\": [[1, 0], [1, 0]],\n      \"noise_py_x\": [[0.7, 0.3], [0.5, 0.5]],\n      \"cost_recon\": 0.1\n    },\n    \"expected_output\": 0.6106,\n    \"test_aspect\": \"Correct class with mixed predictions and positive reconstruction cost\"\n  }\n}\n```"}
{"index": 2059, "preference": "functionality", "prompt": "You are tasked with creating a program that sends HTTP requests to multiple endpoints concurrently and processes the JSON responses. You are given a code snippet that initializes an IP address and port for the HTTP request and a vector to store the results of the requests.\n\nYour task is to complete the program by implementing the following steps:\n1. Create a function that sends an HTTP GET request to the given IP address and port, and returns the JSON response as a `Json::Value`.\n2. Use `std::async` to asynchronously send HTTP requests to the given IP address and port for the following endpoints: \"/endpoint1\", \"/endpoint2\", and \"/endpoint3\".\n3. Store the futures of the asynchronous requests in the `results` vector.\n4. After all requests have been sent, iterate through the `results` vector and retrieve the JSON responses.\n5. Print the JSON responses to the console.\n\nYour program should be able to handle concurrent HTTP requests and process the JSON responses accordingly.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"80\",\n      \"endpoints\": [\"/endpoint1\"]\n    },\n    \"expected_output\": {\n      \"response\": \"success\",\n      \"data\": {}\n    },\n    \"test_aspect\": \"Single endpoint request to a valid IP address and port.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"80\",\n      \"endpoints\": [\"/endpoint2\"]\n    },\n    \"expected_output\": {\n      \"response\": \"success\",\n      \"data\": {}\n    },\n    \"test_aspect\": \"Single endpoint request to a valid IP address and port.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"80\",\n      \"endpoints\": [\"/endpoint3\"]\n    },\n    \"expected_output\": {\n      \"response\": \"success\",\n      \"data\": {}\n    },\n    \"test_aspect\": \"Single endpoint request to a valid IP address and port.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"80\",\n      \"endpoints\": [\"/endpoint1\", \"/endpoint2\", \"/endpoint3\"]\n    },\n    \"expected_output\": {\n      \"responses\": [\n        {\n          \"response\": \"success\",\n          \"data\": {}\n        },\n        {\n          \"response\": \"success\",\n          \"data\": {}\n        },\n        {\n          \"response\": \"success\",\n          \"data\": {}\n        }\n      ]\n    },\n    \"test_aspect\": \"Multiple concurrent requests to valid endpoints.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"ip_address\": \"invalid_address\",\n      \"port\": \"80\",\n      \"endpoints\": [\"/endpoint1\", \"/endpoint2\", \"/endpoint3\"]\n    },\n    \"expected_output\": {\n      \"error\": \"Invalid IP address\"\n    },\n    \"test_aspect\": \"Handling of invalid IP address.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"9999\",\n      \"endpoints\": [\"/endpoint1\"]\n    },\n    \"expected_output\": {\n      \"error\": \"Connection refused\"\n    },\n    \"test_aspect\": \"Handling of requests to an invalid port.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"80\",\n      \"endpoints\": []\n    },\n    \"expected_output\": {\n      \"error\": \"No endpoints provided\"\n    },\n    \"test_aspect\": \"Handling of empty endpoint list.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"80\",\n      \"endpoints\": [\"/endpoint1\"]\n    },\n    \"expected_output\": {\n      \"response\": \"success\",\n      \"data\": {\n        \"message\": \"Endpoint 1 reached\"\n      }\n    },\n    \"test_aspect\": \"Processing successful response from endpoint.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"80\",\n      \"endpoints\": [\"/endpoint1\", \"/endpoint2\"]\n    },\n    \"expected_output\": {\n      \"responses\": [\n        {\n          \"response\": \"success\",\n          \"data\": {\n            \"message\": \"Endpoint 1 reached\"\n          }\n        },\n        {\n          \"response\": \"success\",\n          \"data\": {\n            \"message\": \"Endpoint 2 reached\"\n          }\n        }\n      ]\n    },\n    \"test_aspect\": \"Validating multiple successful responses.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"ip_address\": \"192.168.1.1\",\n      \"port\": \"80\",\n      \"endpoints\": [\"/nonexistent\"]\n    },\n    \"expected_output\": {\n      \"error\": \"404 Not Found\"\n    },\n    \"test_aspect\": \"Handling of a request to a non-existent endpoint.\"\n  }\n}\n```"}
{"index": 36371, "preference": "functionality", "prompt": "You are tasked with creating a Python function that sends alerts to a specified user or channel using a webhook. The function should take in the following parameters:\n- `hubot_webhook_url` (string): The URL of the webhook to which the alert will be sent.\n- `send_to` (string): The user or channel to which the alert will be sent.\n- `data` (dict): A dictionary containing the data to be sent as part of the alert.\n\nThe function should use the `requests` library to send a POST request to the specified `hubot_webhook_url`, including the provided `data` as the request payload. If the request is successful (i.e., the response status code is in the 2xx range), the function should log an informational message indicating that the alert was sent to the specified `send_to`. If the request is not successful, no message needs to be logged.\n\nYour task is to implement the `send_alert` function according to the given requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"#general\",\n      \"data\": {\"message\": \"Hello, World!\"}\n    },\n    \"expected_output\": \"Alert sent to #general\",\n    \"test_aspect\": \"Valid input with successful POST request\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"@user123\",\n      \"data\": {\"message\": \"Test Alert\"}\n    },\n    \"expected_output\": \"Alert sent to @user123\",\n    \"test_aspect\": \"Valid input with successful POST request to a user\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"#alerts\",\n      \"data\": {\"alert\": \"Server Down!\"}\n    },\n    \"expected_output\": \"Alert sent to #alerts\",\n    \"test_aspect\": \"Valid input with different alert data\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"#general\",\n      \"data\": {}\n    },\n    \"expected_output\": \"Alert sent to #general\",\n    \"test_aspect\": \"Valid input with empty data dictionary\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"#general\",\n      \"data\": {\"error\": \"Critical failure\"}\n    },\n    \"expected_output\": \"Alert sent to #general\",\n    \"test_aspect\": \"Valid input with specific error message\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"#general\",\n      \"data\": {\"message\": \"This will fail\"}\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Valid input with failed POST request\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"\",\n      \"send_to\": \"#general\",\n      \"data\": {\"message\": \"Invalid URL\"}\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Invalid webhook URL provided\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"\",\n      \"data\": {\"message\": \"No recipient\"}\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Valid input with empty recipient\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"#general\",\n      \"data\": {\"message\": \"Long message \" + \"a\" * 1000}\n    },\n    \"expected_output\": \"Alert sent to #general\",\n    \"test_aspect\": \"Valid input with maximum length message\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"hubot_webhook_url\": \"http://example.com/webhook\",\n      \"send_to\": \"#alerts\",\n      \"data\": {\"message\": \"Alert with special characters! @#&*\"}\n    },\n    \"expected_output\": \"Alert sent to #alerts\",\n    \"test_aspect\": \"Valid input with special characters in message\"\n  }\n}\n```"}
{"index": 2058, "preference": "functionality", "prompt": "You are tasked with implementing a function that processes worker tasks in a multi-threaded environment. The function takes two parameters: `worker_process_id`, an integer representing the ID of the worker process, and `ancestor_render_frame_host_id`, a global frame routing ID. The function should ensure that it is called on a valid sequence before proceeding with the task execution.\n\nYour task is to implement the function `ProcessWorkerTask` that performs the following steps:\n1. Verify that the function is called on a valid sequence using the `sequence_checker_` object.\n2. If the function is called on a valid sequence, print a message indicating the start of task processing for the given `worker_process_id` and `ancestor_render_frame_host_id`.\n3. If the function is not called on a valid sequence, print an error message indicating the invalid sequence and return without processing the task.\n\nYou are provided with the following code snippet as a starting point:\n```cpp\nvoid ProcessWorkerTask(int worker_process_id, content::GlobalFrameRoutingId ancestor_render_frame_host_id) {\n  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);\n  // Your implementation goes here\n}\n```\n\nYour implementation should adhere to the following requirements:\n- Use the provided `sequence_checker_` object to check the validity of the sequence.\n- Print the appropriate messages as described above.\n- Ensure that the function returns without processing the task if it is not called on a valid sequence.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"worker_process_id\": 1,\n      \"ancestor_render_frame_host_id\": \"valid_id_1\"\n    },\n    \"expected_output\": \"Starting task processing for worker_process_id: 1, ancestor_render_frame_host_id: valid_id_1\",\n    \"test_aspect\": \"Valid sequence check with valid IDs\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"worker_process_id\": 2,\n      \"ancestor_render_frame_host_id\": \"valid_id_2\"\n    },\n    \"expected_output\": \"Starting task processing for worker_process_id: 2, ancestor_render_frame_host_id: valid_id_2\",\n    \"test_aspect\": \"Valid sequence check with different valid IDs\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"worker_process_id\": 3,\n      \"ancestor_render_frame_host_id\": \"valid_id_3\"\n    },\n    \"expected_output\": \"Starting task processing for worker_process_id: 3, ancestor_render_frame_host_id: valid_id_3\",\n    \"test_aspect\": \"Valid sequence check for another valid case\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"worker_process_id\": -1,\n      \"ancestor_render_frame_host_id\": \"valid_id_4\"\n    },\n    \"expected_output\": \"Starting task processing for worker_process_id: -1, ancestor_render_frame_host_id: valid_id_4\",\n    \"test_aspect\": \"Negative worker_process_id with valid ID\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"worker_process_id\": 4,\n      \"ancestor_render_frame_host_id\": \"invalid_id\"\n    },\n    \"expected_output\": \"Starting task processing for worker_process_id: 4, ancestor_render_frame_host_id: invalid_id\",\n    \"test_aspect\": \"Valid worker_process_id with invalid ancestor_render_frame_host_id\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"worker_process_id\": 0,\n      \"ancestor_render_frame_host_id\": \"valid_id_6\"\n    },\n    \"expected_output\": \"Starting task processing for worker_process_id: 0, ancestor_render_frame_host_id: valid_id_6\",\n    \"test_aspect\": \"Zero worker_process_id with valid ID\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"worker_process_id\": 5,\n      \"ancestor_render_frame_host_id\": null\n    },\n    \"expected_output\": \"Invalid sequence for worker_process_id: 5, ancestor_render_frame_host_id: null\",\n    \"test_aspect\": \"Valid worker_process_id but null ancestor_render_frame_host_id\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"worker_process_id\": 6,\n      \"ancestor_render_frame_host_id\": \"valid_id_7\"\n    },\n    \"expected_output\": \"Invalid sequence for worker_process_id: 6, ancestor_render_frame_host_id: valid_id_7\",\n    \"test_aspect\": \"Worker process ID with valid ID but invalid sequence check\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"worker_process_id\": 7,\n      \"ancestor_render_frame_host_id\": \"valid_id_8\"\n    },\n    \"expected_output\": \"Starting task processing for worker_process_id: 7, ancestor_render_frame_host_id: valid_id_8\",\n    \"test_aspect\": \"Valid sequence check with additional valid IDs\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"worker_process_id\": 8,\n      \"ancestor_render_frame_host_id\": \"valid_id_9\"\n    },\n    \"expected_output\": \"Invalid sequence for worker_process_id: 8, ancestor_render_frame_host_id: valid_id_9\",\n    \"test_aspect\": \"Worker process ID with valid ID but invalid sequence check\"\n  }\n}\n```"}
{"index": 26359, "preference": "functionality", "prompt": "You are tasked with implementing a simple network client that connects to a server and waits for a specific duration before proceeding. The client is represented by the `Client` class, which has two methods: `connect(ip)` to establish a connection with the server at the specified IP address, and `waitTick(milliseconds)` to pause execution for the given duration in milliseconds.\n\nYour task is to write a function `performTask(ip)` that utilizes the `Client` class to connect to a server at the provided IP address and then waits for 100 milliseconds before returning a success message.\n\n```python\nclass Client:\n    @staticmethod\n    def connect(ip):\n        # Implementation to establish connection with the server at the given IP address\n        pass\n\n    @staticmethod\n    def waitTick(milliseconds):\n        # Implementation to pause execution for the specified duration in milliseconds\n        pass\n\ndef performTask(ip):\n    # Your implementation using the Client class to connect to the server at the provided IP address and wait for 100 milliseconds\n    pass\n\n# Example usage:\nperformTask(\"192.168.1.100\")\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"192.168.1.100\",\n    \"expected_output\": \"Success: Connected to server 192.168.1.100 and waited for 100 milliseconds.\",\n    \"test_aspect\": \"Valid IP address, standard connection and wait duration.\"\n  },\n  \"test_case2\": {\n    \"input\": \"255.255.255.255\",\n    \"expected_output\": \"Success: Connected to server 255.255.255.255 and waited for 100 milliseconds.\",\n    \"test_aspect\": \"Valid broadcast address, standard connection and wait duration.\"\n  },\n  \"test_case3\": {\n    \"input\": \"0.0.0.0\",\n    \"expected_output\": \"Success: Connected to server 0.0.0.0 and waited for 100 milliseconds.\",\n    \"test_aspect\": \"Valid special address, standard connection and wait duration.\"\n  },\n  \"test_case4\": {\n    \"input\": \"999.999.999.999\",\n    \"expected_output\": \"Error: Invalid IP address format.\",\n    \"test_aspect\": \"Invalid IP address that exceeds valid range.\"\n  },\n  \"test_case5\": {\n    \"input\": \"\",\n    \"expected_output\": \"Error: IP address cannot be empty.\",\n    \"test_aspect\": \"Handling of empty input for IP address.\"\n  },\n  \"test_case6\": {\n    \"input\": \"192.168.1.100\",\n    \"expected_output\": \"Success: Connected to server 192.168.1.100 and waited for 100 milliseconds.\",\n    \"test_aspect\": \"Reconnection with valid IP after previous successful connection.\"\n  },\n  \"test_case7\": {\n    \"input\": \"192.168.1.100\",\n    \"expected_output\": \"Success: Connected to server 192.168.1.100 and waited for 100 milliseconds.\",\n    \"test_aspect\": \"Testing connection stability with a previously connected valid IP.\"\n  },\n  \"test_case8\": {\n    \"input\": \"192.168.1.100\",\n    \"expected_output\": \"Success: Connected to server 192.168.1.100 and waited for 100 milliseconds.\",\n    \"test_aspect\": \"Connection and wait time with valid input, verifying time functionality.\"\n  },\n  \"test_case9\": {\n    \"input\": \"localhost\",\n    \"expected_output\": \"Success: Connected to server localhost and waited for 100 milliseconds.\",\n    \"test_aspect\": \"Valid hostname resolution to loopback address.\"\n  },\n  \"test_case10\": {\n    \"input\": \"127.0.0.1\",\n    \"expected_output\": \"Success: Connected to server 127.0.0.1 and waited for 100 milliseconds.\",\n    \"test_aspect\": \"Valid loopback IP address, ensuring localhost functionality.\"\n  }\n}\n```"}
{"index": 29103, "preference": "functionality", "prompt": "You are tasked with creating a Python script to convert GnuCash financial data from its native format to a CSV file. GnuCash is a personal and small-business financial accounting software. The script should read a GnuCash file and export the data into a CSV file for further analysis or integration with other financial tools.\n\nYour task is to implement the `export_csv.py` script, which takes a GnuCash file as input and generates a CSV file containing the financial data. The GnuCash file is in XML format and contains information about accounts, transactions, and other financial details.\n\nThe script should perform the following steps:\n1. Parse the GnuCash XML file to extract relevant financial data.\n2. Convert the extracted data into a tabular format suitable for CSV export.\n3. Write the tabular data into a CSV file with appropriate headers.\n\nThe CSV file should include columns for account names, transaction dates, transaction descriptions, and transaction amounts.\n\nYour script should be able to handle various GnuCash file structures and produce a well-formatted CSV file regardless of the complexity of the input data.\n\nYour solution should be flexible, efficient, and well-documented to ensure that it can be easily maintained and extended in the future.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"sample_gnucash_file.xml\",\n    \"expected_output\": \"exported_data.csv\",\n    \"test_aspect\": \"Basic functionality - Verify that a standard GnuCash file is correctly parsed and exported to CSV with all required columns.\"\n  },\n  \"test_case2\": {\n    \"input\": \"empty_gnucash_file.xml\",\n    \"expected_output\": \"empty_exported_data.csv\",\n    \"test_aspect\": \"Edge case - Ensure that an empty GnuCash file generates a CSV file with only headers and no transaction data.\"\n  },\n  \"test_case3\": {\n    \"input\": \"gnucash_file_with_multiple_accounts.xml\",\n    \"expected_output\": \"exported_multiple_accounts.csv\",\n    \"test_aspect\": \"Complex structure - Verify that the script correctly handles multiple accounts and exports all transactions associated with each account.\"\n  },\n  \"test_case4\": {\n    \"input\": \"gnucash_file_with_special_characters.xml\",\n    \"expected_output\": \"exported_special_characters.csv\",\n    \"test_aspect\": \"Character encoding - Check that transactions containing special characters (e.g., é, ñ, ü) are exported correctly without data loss or corruption.\"\n  },\n  \"test_case5\": {\n    \"input\": \"gnucash_file_with_no_transactions.xml\",\n    \"expected_output\": \"exported_no_transactions.csv\",\n    \"test_aspect\": \"No transactions - Ensure that a GnuCash file with accounts but no transactions still generates a CSV file with the correct headers.\"\n  },\n  \"test_case6\": {\n    \"input\": \"gnucash_file_with_varied_date_formats.xml\",\n    \"expected_output\": \"exported_varied_dates.csv\",\n    \"test_aspect\": \"Date formats - Confirm that the script correctly parses and standardizes varied transaction date formats in the output CSV.\"\n  },\n  \"test_case7\": {\n    \"input\": \"gnucash_file_with_negative_amounts.xml\",\n    \"expected_output\": \"exported_negative_amounts.csv\",\n    \"test_aspect\": \"Negative values - Assess whether the script appropriately handles and exports transactions that have negative amounts.\"\n  },\n  \"test_case8\": {\n    \"input\": \"gnucash_file_with_large_data_set.xml\",\n    \"expected_output\": \"exported_large_data_set.csv\",\n    \"test_aspect\": \"Performance - Test the script's performance when processing a large GnuCash file, ensuring it completes in a reasonable time frame.\"\n  },\n  \"test_case9\": {\n    \"input\": \"gnucash_file_with_non_standard_structure.xml\",\n    \"expected_output\": \"exported_non_standard_structure.csv\",\n    \"test_aspect\": \"Non-standard structures - Verify that the script can handle and correctly export data from a GnuCash file with a non-standard XML structure.\"\n  },\n  \"test_case10\": {\n    \"input\": \"gnucash_file_with_mixed_data_types.xml\",\n    \"expected_output\": \"exported_mixed_data_types.csv\",\n    \"test_aspect\": \"Mixed data types - Ensure that the output CSV file correctly formats different data types (e.g., dates, strings, floats) from the GnuCash input.\"\n  }\n}\n```"}
{"index": 2487, "preference": "functionality", "prompt": "You are given a 2D grid of size N x M, where each cell contains either 0 or 1. The task is to find the number of rows and columns that contain only 0s. To achieve this, you need to implement a function that takes the 2D grid as input and returns the count of such rows and columns.\n\nFunction Signature: \n```python\ndef count_zero_rows_cols(grid: List[List[int]]) -> Tuple[int, int]:\n    pass\n```\n\nExample:\nInput:\n```\ngrid = [\n    [1, 0, 1, 0],\n    [0, 0, 0, 0],\n    [1, 1, 0, 1],\n    [0, 0, 0, 0]\n]\n```\nOutput:\n```\n(2, 3)\n```\nExplanation:\nIn the given grid, the second and fourth rows contain only 0s, and the second, third, and fourth columns also contain only 0s. Hence, the output is (2, 3).", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [[1, 0, 1, 0], [0, 0, 0, 0], [1, 1, 0, 1], [0, 0, 0, 0]],\n    \"expected_output\": [2, 3],\n    \"test_aspect\": \"Standard case with mixed rows and columns.\"\n  },\n  \"test_case2\": {\n    \"input\": [[0, 0, 0], [0, 0, 0], [0, 0, 0]],\n    \"expected_output\": [3, 3],\n    \"test_aspect\": \"All elements are zero; hence all rows and columns are zero.\"\n  },\n  \"test_case3\": {\n    \"input\": [[1, 1, 1], [1, 1, 1], [1, 1, 1]],\n    \"expected_output\": [0, 0],\n    \"test_aspect\": \"All elements are one; hence no rows and columns are zero.\"\n  },\n  \"test_case4\": {\n    \"input\": [[0, 1, 0], [1, 1, 1], [0, 0, 0]],\n    \"expected_output\": [1, 2],\n    \"test_aspect\": \"One row and two columns contain only zeroes.\"\n  },\n  \"test_case5\": {\n    \"input\": [[1, 0, 1], [0, 0, 0], [1, 0, 1]],\n    \"expected_output\": [1, 1],\n    \"test_aspect\": \"One row and one column contain only zeroes.\"\n  },\n  \"test_case6\": {\n    \"input\": [[0]],\n    \"expected_output\": [1, 1],\n    \"test_aspect\": \"Minimum grid size with a single cell containing zero.\"\n  },\n  \"test_case7\": {\n    \"input\": [[1]],\n    \"expected_output\": [0, 0],\n    \"test_aspect\": \"Minimum grid size with a single cell containing one.\"\n  },\n  \"test_case8\": {\n    \"input\": [[1, 0], [0, 1]],\n    \"expected_output\": [0, 0],\n    \"test_aspect\": \"No rows or columns contain only zeroes.\"\n  },\n  \"test_case9\": {\n    \"input\": [[0, 0], [0, 1]],\n    \"expected_output\": [1, 1],\n    \"test_aspect\": \"One row and one column contain only zeroes.\"\n  },\n  \"test_case10\": {\n    \"input\": [[0, 0, 0, 1], [0, 0, 0, 0], [1, 1, 1, 1]],\n    \"expected_output\": [1, 2],\n    \"test_aspect\": \"Multiple rows and columns with a mix of zeroes and ones.\"\n  }\n}\n```"}
{"index": 2281, "preference": "functionality", "prompt": "You are tasked with implementing a network management system for a QEMU virtualization environment. The system involves allocating and managing network interfaces, generating MAC addresses, and opening a QEMU Monitor Protocol (QMP) socket for communication with QEMU instances.\n\nYou are provided with the following functions and their signatures:\n```cpp\nstd::string QEMU_allocate_tun(QemuContext &ctx);\nstd::string QEMU_allocate_macvtap(QemuContext &ctx, const struct Network &);\nstd::string generateRandomMACAddress();\nstd::string QEMU_Generate_Link_Name(std::string prefix, int length);\nvoid QEMU_delete_link(QemuContext &ctx, std::string interface);\nint QEMU_OpenQMPSocket(QemuContext &ctx);\n```\n\nYour task is to write a function `setupNetworkEnvironment` that utilizes the provided functions to set up a network environment for a QEMU virtualization instance. The function should perform the following tasks:\n1. Allocate a TUN/TAP network interface using `QEMU_allocate_tun` and store the interface name.\n2. Generate a random MAC address using `generateRandomMACAddress`.\n3. Create a link name for the interface using `QEMU_Generate_Link_Name` with a prefix \"qemu\" and a length of 8 characters.\n4. Allocate a MACVTAP interface using `QEMU_allocate_macvtap` with the generated MAC address and the created link name.\n5. Open a QMP socket using `QEMU_OpenQMPSocket` and return the socket file descriptor.\n\nYou should assume that the `QemuContext` and `Network` structures are properly defined and accessible within the `setupNetworkEnvironment` function.\n\nWrite the `setupNetworkEnvironment` function and any necessary helper functions. Ensure that error handling and resource cleanup are appropriately handled.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\"\n    },\n    \"expected_output\": {\n      \"socket_fd\": \"valid integer\"\n    },\n    \"test_aspect\": \"Basic functionality to allocate TUN interface and open QMP socket.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance with allocated TUN interface\"\n    },\n    \"expected_output\": {\n      \"socket_fd\": \"valid integer\",\n      \"mac_address\": \"valid MAC address format\",\n      \"link_name\": \"starts with 'qemu' and is 8 characters long\"\n    },\n    \"test_aspect\": \"Validates generation of MAC address and link name alongside socket opening.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\",\n      \"network\": \"valid Network instance\"\n    },\n    \"expected_output\": {\n      \"socket_fd\": \"valid integer\",\n      \"macvtap_interface\": \"valid MACVTAP interface allocated\"\n    },\n    \"test_aspect\": \"Tests allocation of MACVTAP interface with a valid network instance.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\",\n      \"network\": \"valid Network instance with invalid parameters\"\n    },\n    \"expected_output\": {\n      \"error\": \"appropriate error message\"\n    },\n    \"test_aspect\": \"Handles errors during MACVTAP allocation with invalid parameters.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\",\n      \"use_existing_mac\": true\n    },\n    \"expected_output\": {\n      \"socket_fd\": \"valid integer\",\n      \"mac_address\": \"user-provided valid MAC address\"\n    },\n    \"test_aspect\": \"Validates that a user-provided MAC address is used correctly.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\",\n      \"force_error\": true\n    },\n    \"expected_output\": {\n      \"error\": \"appropriate error message\"\n    },\n    \"test_aspect\": \"Tests the system's handling of simulated forced errors during execution.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\",\n      \"state_check\": true\n    },\n    \"expected_output\": {\n      \"socket_fd\": \"valid integer\",\n      \"interface_state\": \"confirmed\"\n    },\n    \"test_aspect\": \"Verifies that the interface is in the expected state after setup.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\",\n      \"cleanup\": true\n    },\n    \"expected_output\": {\n      \"cleanup_success\": true\n    },\n    \"test_aspect\": \"Ensures that resources are cleaned up correctly after usage.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\",\n      \"custom_prefix\": \"test\"\n    },\n    \"expected_output\": {\n      \"socket_fd\": \"valid integer\",\n      \"link_name\": \"starts with 'test' and is 8 characters long\"\n    },\n    \"test_aspect\": \"Tests custom prefix for generated link name.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"ctx\": \"valid QemuContext instance\",\n      \"simultaneous_calls\": 10\n    },\n    \"expected_output\": {\n      \"results\": [\n        \"valid integer socket_fd for each call\",\n        \"unique MAC addresses for each call\"\n      ]\n    },\n    \"test_aspect\": \"Evaluates the handling of simultaneous network setup calls.\"\n  }\n}\n```"}
{"index": 26225, "preference": "functionality", "prompt": "You are tasked with creating a program that utilizes the OpenCV library to detect and highlight faces in a given image. The program should take an input image, apply face detection using the Haar cascade classifier, and then display the original image with rectangles drawn around the detected faces. Additionally, the program should allow the user to exit the display window by pressing the 'Esc' key.\n\nYour task is to implement a Python program that achieves the aforementioned functionality using the OpenCV library. You should also handle the user input to exit the display window when the 'Esc' key is pressed.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"image_with_one_face.jpg\",\n    \"expected_output\": \"image_with_one_face_detected.jpg\",\n    \"test_aspect\": \"Check if the program correctly detects and highlights a single face in the image.\"\n  },\n  \"test_case2\": {\n    \"input\": \"image_with_multiple_faces.jpg\",\n    \"expected_output\": \"image_with_multiple_faces_detected.jpg\",\n    \"test_aspect\": \"Check if the program detects and highlights multiple faces in the image.\"\n  },\n  \"test_case3\": {\n    \"input\": \"image_with_no_faces.jpg\",\n    \"expected_output\": \"image_with_no_faces_detected.jpg\",\n    \"test_aspect\": \"Check if the program correctly handles an image with no faces, ensuring no rectangles are drawn.\"\n  },\n  \"test_case4\": {\n    \"input\": \"image_with_partial_faces.jpg\",\n    \"expected_output\": \"image_with_partial_faces_detected.jpg\",\n    \"test_aspect\": \"Check if the program can detect faces that are partially visible.\"\n  },\n  \"test_case5\": {\n    \"input\": \"empty_image.jpg\",\n    \"expected_output\": \"empty_image_detected.jpg\",\n    \"test_aspect\": \"Check how the program handles an empty image (no data).\"\n  },\n  \"test_case6\": {\n    \"input\": \"image_with_face_occlusions.jpg\",\n    \"expected_output\": \"image_with_face_occlusions_detected.jpg\",\n    \"test_aspect\": \"Check if the program can detect faces that are occluded or obscured.\"\n  },\n  \"test_case7\": {\n    \"input\": \"image_with_varied_lighting.jpg\",\n    \"expected_output\": \"image_with_varied_lighting_detected.jpg\",\n    \"test_aspect\": \"Check if face detection works under varied lighting conditions.\"\n  },\n  \"test_case8\": {\n    \"input\": \"image_with_faces_at_different_angles.jpg\",\n    \"expected_output\": \"image_with_faces_at_different_angles_detected.jpg\",\n    \"test_aspect\": \"Check if the program can detect faces at various angles.\"\n  },\n  \"test_case9\": {\n    \"input\": \"large_image_with_faces.jpg\",\n    \"expected_output\": \"large_image_with_faces_detected.jpg\",\n    \"test_aspect\": \"Check if the program efficiently handles large images with faces.\"\n  },\n  \"test_case10\": {\n    \"input\": \"image_with_background_faces.jpg\",\n    \"expected_output\": \"image_with_background_faces_detected.jpg\",\n    \"test_aspect\": \"Check if the program can correctly identify and highlight faces in a busy background.\"\n  }\n}\n```"}
{"index": 38652, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that processes a list of tuples containing two elements each. The function should extract the second element from each tuple and return a new list containing these extracted elements. If the input list is empty, the function should return an empty list as well.\n\nThe function signature is:\n```python\ndef extract_second_elements(input_list: List[Tuple[Any, Any]]) -> List[Any]:\n    pass\n```\n\nFor example, given the input list:\n```python\ninput_list = [('apple', 5), ('banana', 7), ('cherry', 3)]\n```\nThe function should return:\n```python\n[5, 7, 3]\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"[('apple', 5), ('banana', 7), ('cherry', 3)]\",\n    \"expected_output\": \"[5, 7, 3]\",\n    \"test_aspect\": \"Standard case with valid tuples\"\n  },\n  \"test_case2\": {\n    \"input\": \"[('a', 1), ('b', 2)]\",\n    \"expected_output\": \"[1, 2]\",\n    \"test_aspect\": \"Standard case with single character strings\"\n  },\n  \"test_case3\": {\n    \"input\": \"[('x', 0), ('y', -1), ('z', 100)]\",\n    \"expected_output\": \"[0, -1, 100]\",\n    \"test_aspect\": \"Standard case with integers including zero and negative\"\n  },\n  \"test_case4\": {\n    \"input\": \"[('first', 'first_value'), ('second', 'second_value')]\",\n    \"expected_output\": \"['first_value', 'second_value']\",\n    \"test_aspect\": \"Standard case with string values as second elements\"\n  },\n  \"test_case5\": {\n    \"input\": \"[]\",\n    \"expected_output\": \"[]\",\n    \"test_aspect\": \"Edge case with an empty input list\"\n  },\n  \"test_case6\": {\n    \"input\": \"[('key1',), ('key2', 'value2'), ('key3', 'value3')]\",\n    \"expected_output\": \"['value2', 'value3']\",\n    \"test_aspect\": \"Handling cases with tuples of varying lengths (skipping first element in single-element tuple)\"\n  },\n  \"test_case7\": {\n    \"input\": \"[('a', '1'), ('b', '2'), ('c', '3')]\",\n    \"expected_output\": \"['1', '2', '3']\",\n    \"test_aspect\": \"Standard case with numeric strings as second elements\"\n  },\n  \"test_case8\": {\n    \"input\": \"[('apple', None), ('banana', None), ('cherry', None)]\",\n    \"expected_output\": \"[None, None, None]\",\n    \"test_aspect\": \"Standard case with None as second elements\"\n  },\n  \"test_case9\": {\n    \"input\": \"[('item1', (1, 2)), ('item2', (3, 4))]\",\n    \"expected_output\": \"[(1, 2), (3, 4)]\",\n    \"test_aspect\": \"Standard case with tuples as second elements\"\n  },\n  \"test_case10\": {\n    \"input\": \"[('single', 42)]\",\n    \"expected_output\": \"[42]\",\n    \"test_aspect\": \"Edge case with a single tuple in the list\"\n  }\n}\n```"}
{"index": 1517, "preference": "functionality", "prompt": "You are tasked with implementing a program to simulate the movement of a particle in a 2D space. The particle moves along the edges of a square, with each edge having a specific velocity. The program takes in the length of a side of the square, the number of iterations to simulate, and the velocities for each edge of the square. The particle starts at the bottom-left corner of the square and moves according to the given velocities.\n\nYou need to write a function or method `simulateParticle` that takes in the following parameters:\n- `side`: a float representing the length of a side of the square (1 <= side <= 100)\n- `iterations`: an integer representing the number of iterations to simulate (1 <= iterations <= 1000)\n- `v0`, `v1`, `v2`, `v3`: integers representing the velocities of the four edges of the square. The velocities are in the range of -100 to 100.\n\nThe function should return the coordinates of the particle after the specified number of iterations. The coordinates should be returned as a tuple of two floats representing the x and y coordinates of the particle rounded to two decimal places.\n\nThe movement of the particle is as follows:\n- At each iteration, the particle moves along the edges of the square based on the given velocities. If the particle reaches a corner, it continues to move along the next edge with the corresponding velocity.\n- The velocities represent the distance moved in one iteration. Positive velocities move the particle in the positive direction, and negative velocities move the particle in the negative direction.\n\nFor example, if the particle starts at (0, 0) and the velocities are v0=1, v1=2, v2=-1, v3=-2, after one iteration, the particle will be at (1, 2). If the particle starts at (0, 0) and the velocities are v0=-1, v1=2, v2=3, v3=-2, after one iteration, the particle will be at (2, 1).", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"side\": 10,\n      \"iterations\": 1,\n      \"v0\": 1,\n      \"v1\": 2,\n      \"v2\": -1,\n      \"v3\": -2\n    },\n    \"expected_output\": {\n      \"x\": 1.00,\n      \"y\": 2.00\n    },\n    \"test_aspect\": \"Basic movement with positive velocities\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"side\": 5,\n      \"iterations\": 3,\n      \"v0\": 2,\n      \"v1\": 3,\n      \"v2\": -2,\n      \"v3\": -1\n    },\n    \"expected_output\": {\n      \"x\": 5.00,\n      \"y\": 2.00\n    },\n    \"test_aspect\": \"Multiple iterations with mixed positive and negative velocities\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"side\": 20,\n      \"iterations\": 5,\n      \"v0\": -1,\n      \"v1\": -2,\n      \"v2\": 1,\n      \"v3\": 2\n    },\n    \"expected_output\": {\n      \"x\": 0.00,\n      \"y\": 0.00\n    },\n    \"test_aspect\": \"Testing negative velocities resulting in returning to start\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"side\": 15,\n      \"iterations\": 10,\n      \"v0\": 10,\n      \"v1\": 10,\n      \"v2\": 10,\n      \"v3\": 10\n    },\n    \"expected_output\": {\n      \"x\": 15.00,\n      \"y\": 15.00\n    },\n    \"test_aspect\": \"Testing with high positive velocities to move beyond corner\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"side\": 10,\n      \"iterations\": 2,\n      \"v0\": 5,\n      \"v1\": 5,\n      \"v2\": -5,\n      \"v3\": -5\n    },\n    \"expected_output\": {\n      \"x\": 5.00,\n      \"y\": 5.00\n    },\n    \"test_aspect\": \"Testing equal velocities in all directions leading to center\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"side\": 100,\n      \"iterations\": 20,\n      \"v0\": 0,\n      \"v1\": 100,\n      \"v2\": 0,\n      \"v3\": -100\n    },\n    \"expected_output\": {\n      \"x\": 0.00,\n      \"y\": 0.00\n    },\n    \"test_aspect\": \"Long iterations with one-directional velocity resulting in a loop\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"side\": 30,\n      \"iterations\": 6,\n      \"v0\": -10,\n      \"v1\": 20,\n      \"v2\": 0,\n      \"v3\": -5\n    },\n    \"expected_output\": {\n      \"x\": 10.00,\n      \"y\": 10.00\n    },\n    \"test_aspect\": \"Negative velocity on v0 with positive on v1, testing corner handling\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"side\": 50,\n      \"iterations\": 25,\n      \"v0\": 5,\n      \"v1\": 5,\n      \"v2\": -5,\n      \"v3\": -5\n    },\n    \"expected_output\": {\n      \"x\": 50.00,\n      \"y\": 50.00\n    },\n    \"test_aspect\": \"Corner case with multiple complete revolutions around the square\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"side\": 1,\n      \"iterations\": 1,\n      \"v0\": 1,\n      \"v1\": 1,\n      \"v2\": 1,\n      \"v3\": 1\n    },\n    \"expected_output\": {\n      \"x\": 1.00,\n      \"y\": 1.00\n    },\n    \"test_aspect\": \"Minimum side length with positive velocities\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"side\": 100,\n      \"iterations\": 1000,\n      \"v0\": -100,\n      \"v1\": -100,\n      \"v2\": -100,\n      \"v3\": -100\n    },\n    \"expected_output\": {\n      \"x\": 0.00,\n      \"y\": 0.00\n    },\n    \"test_aspect\": \"Testing maximum iterations with all negative velocities returning to start\"\n  }\n}\n```"}
{"index": 12671, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that processes a list of options and executes a command based on the selected template. The function should handle the execution of the command using the `subprocess` module and return the output of the command.\n\nYou are given the following code snippet as a starting point:\n\n```python\ndef process_templates(self, selected_index):\n    return\n    template = self.options[selected_index][0]\n    self.window.run_command('dart_stagehand', {'template': template})\n\ndef get_templates(self):\n    sdk = SDK()\n    output = check_output([sdk.path_to_pub, 'global', 'run',\n                           'stagehand', '--machine'],\n```\n\nYour task is to complete the `process_templates` function to execute the command based on the selected template and return the output of the command. Additionally, you need to implement the `get_templates` function to retrieve the available templates using the `stagehand` tool and return the output.\n\nWrite the `process_templates` and `get_templates` functions to fulfill the requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"selected_index\": 0},\n    \"expected_output\": \"output_of_command_for_template_0\",\n    \"test_aspect\": \"Valid input with first template selected\"\n  },\n  \"test_case2\": {\n    \"input\": {\"selected_index\": 1},\n    \"expected_output\": \"output_of_command_for_template_1\",\n    \"test_aspect\": \"Valid input with second template selected\"\n  },\n  \"test_case3\": {\n    \"input\": {\"selected_index\": 2},\n    \"expected_output\": \"output_of_command_for_template_2\",\n    \"test_aspect\": \"Valid input with third template selected\"\n  },\n  \"test_case4\": {\n    \"input\": {\"selected_index\": -1},\n    \"expected_output\": \"IndexError\",\n    \"test_aspect\": \"Boundary case with negative index\"\n  },\n  \"test_case5\": {\n    \"input\": {\"selected_index\": 10},\n    \"expected_output\": \"IndexError\",\n    \"test_aspect\": \"Boundary case with index out of range\"\n  },\n  \"test_case6\": {\n    \"input\": {\"selected_index\": 0},\n    \"expected_output\": \"output_of_command_for_template_0\",\n    \"test_aspect\": \"Check consistency of output when the same template is selected multiple times\"\n  },\n  \"test_case7\": {\n    \"input\": {\"selected_index\": 5},\n    \"expected_output\": null,\n    \"test_aspect\": \"Checking for a non-existent template index, expecting graceful handling\"\n  },\n  \"test_case8\": {\n    \"input\": {\"selected_index\": 0},\n    \"expected_output\": \"output_of_command_for_template_0\",\n    \"test_aspect\": \"Check that subprocess execution is stable and does not raise exceptions\"\n  },\n  \"test_case9\": {\n    \"input\": {},\n    \"expected_output\": \"list_of_templates\",\n    \"test_aspect\": \"Valid call to get_templates function to check template retrieval\"\n  },\n  \"test_case10\": {\n    \"input\": {},\n    \"expected_output\": \"list_of_templates\",\n    \"test_aspect\": \"Multiple calls to get_templates function to check consistency of returned templates\"\n  }\n}\n```"}
{"index": 2245, "preference": "functionality", "prompt": "You are tasked with creating a Java method that utilizes the Flyway library to manage database migrations. Flyway is a popular database migration tool that allows developers to apply version-controlled migrations to their database schema. In this problem, you will need to implement a method that uses Flyway to migrate a MySQL database.\n\nYour task is to complete the implementation of the `testFlyway` method. The method should initialize and configure Flyway to migrate a MySQL database using the provided configuration. You should ensure that the Flyway migration is executed successfully and handle any potential exceptions that may occur during the migration process.\n\nYour implementation should include the necessary imports and configurations to use Flyway with MySQL. You can assume that the required Flyway and MySQL dependencies are already available in the project.\n\nComplete the `testFlyway` method to achieve the following:\n1. Create a Flyway instance and configure it to use MySQL.\n2. Set the data source for Flyway to connect to the MySQL database.\n3. Ensure that Flyway applies the database migrations successfully.\n4. Handle any exceptions that may occur during the migration process.\n\n```java\nimport org.flywaydb.core.Flyway;\nimport javax.sql.DataSource;\n\npublic class DatabaseMigration {\n\n    @Contextual(\"mysql\")\n    public void testFlyway(DataSource dataSource) {\n        // Initialize Flyway\n        Flyway flyway = Flyway.configure()\n                .dataSource(dataSource)\n                .load();\n\n        try {\n            // Migrate the database\n            flyway.migrate();\n            System.out.println(\"Database migration successful\");\n        } catch (Exception e) {\n            System.err.println(\"Database migration failed: \" + e.getMessage());\n        }\n    }\n}\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Valid DataSource for a MySQL database\",\n    \"expected_output\": \"Database migration successful\",\n    \"test_aspect\": \"Basic functionality with valid database connection\"\n  },\n  \"test_case2\": {\n    \"input\": \"Invalid DataSource configuration (e.g., wrong URL)\",\n    \"expected_output\": \"Database migration failed: [specific error message]\",\n    \"test_aspect\": \"Error handling for invalid DataSource\"\n  },\n  \"test_case3\": {\n    \"input\": \"DataSource with no migrations available\",\n    \"expected_output\": \"Database migration successful\",\n    \"test_aspect\": \"Handling case where no migrations need to be applied\"\n  },\n  \"test_case4\": {\n    \"input\": \"DataSource with pre-existing migrations applied\",\n    \"expected_output\": \"Database migration successful\",\n    \"test_aspect\": \"Ensure no errors when migrations are already applied\"\n  },\n  \"test_case5\": {\n    \"input\": \"DataSource configured with a migration that contains errors\",\n    \"expected_output\": \"Database migration failed: [specific migration error message]\",\n    \"test_aspect\": \"Error handling for migrations that fail during application\"\n  },\n  \"test_case6\": {\n    \"input\": \"DataSource with a large number of migrations\",\n    \"expected_output\": \"Database migration successful\",\n    \"test_aspect\": \"Performance and stability with many migrations\"\n  },\n  \"test_case7\": {\n    \"input\": \"DataSource pointing to a non-existent MySQL database\",\n    \"expected_output\": \"Database migration failed: [database not found error message]\",\n    \"test_aspect\": \"Error handling for non-existent database\"\n  },\n  \"test_case8\": {\n    \"input\": \"DataSource with a valid connection but insufficient privileges\",\n    \"expected_output\": \"Database migration failed: [insufficient privileges error message]\",\n    \"test_aspect\": \"Error handling for insufficient permissions\"\n  },\n  \"test_case9\": {\n    \"input\": \"DataSource with a network error (e.g., database server down)\",\n    \"expected_output\": \"Database migration failed: [network error message]\",\n    \"test_aspect\": \"Error handling for network issues\"\n  },\n  \"test_case10\": {\n    \"input\": \"Valid DataSource with a migration requiring a specific schema setup\",\n    \"expected_output\": \"Database migration successful\",\n    \"test_aspect\": \"Ensure successful migration with specific schema prerequisites\"\n  }\n}\n```"}
{"index": 4800, "preference": "functionality", "prompt": "You are tasked with implementing a reservation management system for a hotel using Java. The system should allow for the creation, retrieval, updating, and deletion of reservation records. The reservation data will be stored in a database, and you are provided with a `ReservaBll` class that serves as the business logic layer for handling reservation operations. The `ReservaBll` class implements the `ICRUD_GENERIC` interface, which defines the standard CRUD (Create, Read, Update, Delete) operations.\n\nYour task is to complete the implementation of the `ReservaBll` class by adding the necessary methods to perform CRUD operations on reservation records. You should also ensure that the class interacts with the `ReservaDal` class, which is responsible for data access and manipulation.\n\nThe `ReservaBll` class has been initialized with a `ReservaDal` object in its constructor, and the `ReservaDal` class provides the data access functionality for interacting with the database.\n\nYour implementation should include the following methods:\n1. `createReservation`: This method should create a new reservation record in the database.\n2. `getReservation`: This method should retrieve a specific reservation record from the database based on the provided reservation ID.\n3. `updateReservation`: This method should update an existing reservation record in the database.\n4. `deleteReservation`: This method should delete a reservation record from the database based on the provided reservation ID.\n\nYou should ensure that the `ReservaBll` class adheres to the principles of encapsulation, and the methods handle any potential exceptions that may occur during database operations.\n\nComplete the implementation of the `ReservaBll` class to fulfill the requirements of the reservation management system.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"reservation\": {\n        \"id\": 1,\n        \"customerName\": \"John Doe\",\n        \"roomNumber\": 101,\n        \"checkInDate\": \"2023-10-10\",\n        \"checkOutDate\": \"2023-10-15\"\n      }\n    },\n    \"expected_output\": {\n      \"success\": true,\n      \"message\": \"Reservation created successfully.\"\n    },\n    \"test_aspect\": \"Create Reservation - Valid Input\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"reservationId\": 1\n    },\n    \"expected_output\": {\n      \"id\": 1,\n      \"customerName\": \"John Doe\",\n      \"roomNumber\": 101,\n      \"checkInDate\": \"2023-10-10\",\n      \"checkOutDate\": \"2023-10-15\"\n    },\n    \"test_aspect\": \"Get Reservation - Valid ID\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"reservationId\": 999\n    },\n    \"expected_output\": {\n      \"success\": false,\n      \"message\": \"Reservation not found.\"\n    },\n    \"test_aspect\": \"Get Reservation - Invalid ID\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"reservation\": {\n        \"id\": 1,\n        \"customerName\": \"Jane Smith\",\n        \"roomNumber\": 102,\n        \"checkInDate\": \"2023-10-11\",\n        \"checkOutDate\": \"2023-10-16\"\n      }\n    },\n    \"expected_output\": {\n      \"success\": true,\n      \"message\": \"Reservation updated successfully.\"\n    },\n    \"test_aspect\": \"Update Reservation - Valid Input\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"reservationId\": 1\n    },\n    \"expected_output\": {\n      \"id\": 1,\n      \"customerName\": \"Jane Smith\",\n      \"roomNumber\": 102,\n      \"checkInDate\": \"2023-10-11\",\n      \"checkOutDate\": \"2023-10-16\"\n    },\n    \"test_aspect\": \"Get Updated Reservation - Valid ID\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"reservationId\": 999\n    },\n    \"expected_output\": {\n      \"success\": false,\n      \"message\": \"Reservation not found.\"\n    },\n    \"test_aspect\": \"Update Reservation - Invalid ID\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"reservationId\": 1\n    },\n    \"expected_output\": {\n      \"success\": true,\n      \"message\": \"Reservation deleted successfully.\"\n    },\n    \"test_aspect\": \"Delete Reservation - Valid ID\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"reservationId\": 999\n    },\n    \"expected_output\": {\n      \"success\": false,\n      \"message\": \"Reservation not found.\"\n    },\n    \"test_aspect\": \"Delete Reservation - Invalid ID\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"reservation\": {\n        \"id\": 0,\n        \"customerName\": \"\",\n        \"roomNumber\": -1,\n        \"checkInDate\": \"2023-10-10\",\n        \"checkOutDate\": \"2023-10-15\"\n      }\n    },\n    \"expected_output\": {\n      \"success\": false,\n      \"message\": \"Invalid reservation data.\"\n    },\n    \"test_aspect\": \"Create Reservation - Invalid Data\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"reservationId\": null\n    },\n    \"expected_output\": {\n      \"success\": false,\n      \"message\": \"Reservation ID cannot be null.\"\n    },\n    \"test_aspect\": \"Get Reservation - Null ID\"\n  }\n}\n```"}
{"index": 19837, "preference": "functionality", "prompt": "You are working on a data processing pipeline for a child welfare organization. The organization collects data on children and households, and you need to manipulate and process this data for reporting and analysis. The provided code snippet contains lists of properties and fields related to children and households.\n\nYour task is to write a Python function that takes a dictionary representing a child's data and a dictionary representing a household's data, and generates a CSV row with the required fields. The function should handle cases where certain properties may be missing in the input dictionaries.\n\nThe function signature should be:\n```python\ndef generate_csv_row(child_data: dict, household_data: dict) -> str:\n    pass\n```\n\nThe `child_data` dictionary will contain keys corresponding to the properties listed in `CHILD_PROPERTIES`, and the `household_data` dictionary will contain keys corresponding to the properties listed in `CSV_HEADERS` (excluding the `indices` field).\n\nThe function should generate a CSV row with the following fields in the specified order:\n1. `case_id`\n2. `owner_id`\n3. `opened_on`\n4. `modified_on`\n5. `name`\n6. `aadhar_number`\n7. `dob`\n8. `died`\n9. `owner_name`\n10. `hh_id`\n11. `hh_name`\n12. `hh_closed_on`\n\nIf a property is missing in the input dictionaries, the corresponding field in the CSV row should be populated with an empty string.\n\nFor example, if the input `child_data` is:\n```python\n{\n    'case_id': '123',\n    'owner_id': '456',\n    'name': 'John Doe',\n    'aadhar_number': '1234567890',\n    'dob': '2005-01-01',\n    'died': False\n}\n```\nand the input `household_data` is:\n```python\n{\n    'owner_name': 'Jane Smith',\n    'hh_id': '789',\n    'hh_name': 'Smith Household',\n    'hh_closed_on': '2021-12-31'\n}\n```\nthe function should return the CSV row:\n```\n123,456,,,,John Doe,1234567890,2005-01-01,False,Jane Smith,789,Smith Household,2021-12-31\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"123\",\n        \"owner_id\": \"456\",\n        \"name\": \"John Doe\",\n        \"aadhar_number\": \"1234567890\",\n        \"dob\": \"2005-01-01\",\n        \"died\": false\n      },\n      \"household_data\": {\n        \"owner_name\": \"Jane Smith\",\n        \"hh_id\": \"789\",\n        \"hh_name\": \"Smith Household\",\n        \"hh_closed_on\": \"2021-12-31\"\n      }\n    },\n    \"expected_output\": \"123,456,,,,John Doe,1234567890,2005-01-01,False,Jane Smith,789,Smith Household,2021-12-31\",\n    \"test_aspect\": \"Basic functionality with all fields present\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"124\",\n        \"owner_id\": \"457\",\n        \"name\": \"Alice\",\n        \"aadhar_number\": \"1234567891\",\n        \"dob\": \"2010-05-15\",\n        \"died\": true\n      },\n      \"household_data\": {\n        \"owner_name\": \"\",\n        \"hh_id\": \"790\",\n        \"hh_name\": \"Johnson Household\",\n        \"hh_closed_on\": \"2020-11-30\"\n      }\n    },\n    \"expected_output\": \"124,457,,,,Alice,1234567891,2010-05-15,True,,790,Johnson Household,2020-11-30\",\n    \"test_aspect\": \"Handling of empty owner_name in household data\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"\",\n        \"owner_id\": \"459\",\n        \"name\": \"Bob\",\n        \"aadhar_number\": \"\",\n        \"dob\": \"2012-10-10\",\n        \"died\": false\n      },\n      \"household_data\": {\n        \"owner_name\": \"Tom Green\",\n        \"hh_id\": \"791\",\n        \"hh_name\": \"Green Household\",\n        \"hh_closed_on\": \"\"\n      }\n    },\n    \"expected_output\": \",459,,,,Bob,,2012-10-10,False,Tom Green,791,Green Household,\",\n    \"test_aspect\": \"Handling of empty case_id and aadhar_number\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"125\",\n        \"owner_id\": \"\",\n        \"name\": \"Charlie\",\n        \"aadhar_number\": \"1234567892\",\n        \"dob\": \"\",\n        \"died\": false\n      },\n      \"household_data\": {\n        \"owner_name\": \"Mary Johnson\",\n        \"hh_id\": \"\",\n        \"hh_name\": \"Johnson Household\",\n        \"hh_closed_on\": \"2022-09-15\"\n      }\n    },\n    \"expected_output\": \"125,,,,,,Charlie,1234567892,,False,Mary Johnson,,Johnson Household,2022-09-15\",\n    \"test_aspect\": \"Handling of multiple empty fields in both dictionaries\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"126\",\n        \"owner_id\": \"460\",\n        \"name\": \"David\",\n        \"aadhar_number\": \"1234567893\",\n        \"dob\": \"2008-07-20\",\n        \"died\": true\n      },\n      \"household_data\": {\n        \"owner_name\": \"Nancy Adams\",\n        \"hh_id\": \"792\",\n        \"hh_name\": \"\",\n        \"hh_closed_on\": \"2021-08-01\"\n      }\n    },\n    \"expected_output\": \"126,460,,,,David,1234567893,2008-07-20,True,Nancy Adams,792,,2021-08-01\",\n    \"test_aspect\": \"Handling of empty household name field\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"127\",\n        \"owner_id\": \"461\",\n        \"name\": \"Eve\",\n        \"aadhar_number\": \"1234567894\",\n        \"dob\": \"2006-12-12\",\n        \"died\": false\n      },\n      \"household_data\": {\n        \"owner_name\": \"Robert Brown\",\n        \"hh_id\": \"793\",\n        \"hh_name\": \"Brown Household\",\n        \"hh_closed_on\": \"\"\n      }\n    },\n    \"expected_output\": \"127,461,,,,Eve,1234567894,2006-12-12,False,Robert Brown,793,Brown Household,\",\n    \"test_aspect\": \"Handling of empty hh_closed_on field\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"128\",\n        \"owner_id\": \"462\",\n        \"name\": \"\",\n        \"aadhar_number\": \"1234567895\",\n        \"dob\": \"2011-04-04\",\n        \"died\": false\n      },\n      \"household_data\": {\n        \"owner_name\": \"Lisa White\",\n        \"hh_id\": \"794\",\n        \"hh_name\": \"White Household\",\n        \"hh_closed_on\": \"2022-01-15\"\n      }\n    },\n    \"expected_output\": \"128,462,,,,,1234567895,2011-04-04,False,Lisa White,794,White Household,2022-01-15\",\n    \"test_aspect\": \"Handling of empty name field in child data\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"129\",\n        \"owner_id\": \"463\",\n        \"name\": \"Fiona\",\n        \"aadhar_number\": \"\",\n        \"dob\": \"\",\n        \"died\": true\n      },\n      \"household_data\": {\n        \"owner_name\": \"James Black\",\n        \"hh_id\": \"795\",\n        \"hh_name\": \"Black Household\",\n        \"hh_closed_on\": \"2023-03-01\"\n      }\n    },\n    \"expected_output\": \"129,463,,,,Fiona,,False,James Black,795,Black Household,2023-03-01\",\n    \"test_aspect\": \"Handling of empty dob and aadhar_number in child data with a died status\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"130\",\n        \"owner_id\": \"464\",\n        \"name\": \"George\",\n        \"aadhar_number\": \"1234567896\",\n        \"dob\": \"2009-09-09\",\n        \"died\": false\n      },\n      \"household_data\": {\n        \"owner_name\": \"Clara Green\",\n        \"hh_id\": \"\",\n        \"hh_name\": \"Green Household\",\n        \"hh_closed_on\": \"\"\n      }\n    },\n    \"expected_output\": \"130,464,,,,George,1234567896,2009-09-09,False,Clara Green,,Green Household,\",\n    \"test_aspect\": \"Handling of empty hh_id and hh_closed_on fields\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"child_data\": {\n        \"case_id\": \"131\",\n        \"owner_id\": \"465\",\n        \"name\": \"Haley\",\n        \"aadhar_number\": \"1234567897\",\n        \"dob\": \"2007-02-02\",\n        \"died\": false\n      },\n      \"household_data\": {\n        \"owner_name\": \"Tom Wright\",\n        \"hh_id\": \"796\",\n        \"hh_name\": \"Wright Household\",\n        \"hh_closed_on\": \"\"\n      }\n    },\n    \"expected_output\": \"131,465,,,,Haley,1234567897,2007-02-02,False,Tom Wright,796,Wright Household,\",\n    \"test_aspect\": \"Handling of no hh_closed_on field\"\n  }\n}\n```"}
{"index": 10213, "preference": "functionality", "prompt": "You are working on a project that involves importing machine learning models and processing their associated dates. The given code snippet is part of this project and involves file manipulation and date processing. \n\nThe code snippet includes the following operations:\n1. It constructs a file path `fn` by concatenating the string 'MODELS/' with the value of variable `SH` and the string '/DFM2.pkl'.\n2. It imports a model from the file path `fn` using the function `ImportModel` and assigns it to the variable `model`.\n3. It stores the imported model in a dictionary `Models2` with the key `SH`.\n4. It creates a list `AllDates` containing unique date strings extracted from the `alldates` attribute of the model associated with the key 'H&G' in `Models2`.\n\nYour task is to implement a function that processes the dates and returns the count of unique years present in the `AllDates` list.\n\nWrite a function `count_unique_years(Models2, SH)` that takes in a dictionary `Models2` containing imported models and a string `SH` representing a model key. The function should return the count of unique years present in the `AllDates` list associated with the given model key.\n\nFor example, given `Models2` containing models for different keys and `SH` as the key for a specific model, the function should return the count of unique years present in the `AllDates` list associated with the model specified by `SH`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"2021-01-01\", \"2021-05-15\", \"2021-12-31\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 1,\n    \"test_aspect\": \"Single year with multiple dates\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"2019-01-01\", \"2020-06-30\", \"2021-12-31\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"Multiple years with one date each\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"2020-12-31\", \"2020-01-01\", \"2020-06-30\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 1,\n    \"test_aspect\": \"Same year with different dates\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": []\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 0,\n    \"test_aspect\": \"No date entries\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"2018-02-28\", \"2019-02-28\", \"2020-02-28\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"Different years with the same month and day\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"2021-03-01\", \"2022-03-01\", \"2022-03-01\", \"2021-03-01\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 2,\n    \"test_aspect\": \"Duplicate dates within the same year\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"2000-01-01\", \"2010-12-31\", \"2020-01-01\", \"2030-06-30\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 4,\n    \"test_aspect\": \"Unique years spanning multiple decades\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"2022-01-01\", \"2022-02-01\", \"2023-01-01\", \"2023-02-01\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 2,\n    \"test_aspect\": \"Multiple dates across consecutive years\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"2021-01-01\", \"2021-01-02\", \"2022-01-01\", \"2022-01-02\", \"2023-01-01\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 3,\n    \"test_aspect\": \"Mixed dates within a few years\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"Models2\": {\n        \"H&G\": {\n          \"alldates\": [\"1999-12-31\", \"2000-01-01\", \"2001-01-01\", \"2002-01-01\", \"2003-01-01\"]\n        }\n      },\n      \"SH\": \"H&G\"\n    },\n    \"expected_output\": 5,\n    \"test_aspect\": \"Y2K transition checking\"\n  }\n}\n```"}
{"index": 27853, "preference": "functionality", "prompt": "You are working on a bioinformatics project that involves amplifying DNA sequences to obtain accessions. During the amplification process, there are two possible outcomes for each DNA sequence: it can either be successfully amplified, resulting in a true positive (TP), or it can fail to amplify, resulting in a false negative (FN). Your task is to calculate the amplification success rate based on the given TP and FN values.\n\nWrite a function called `amplification_success_rate` that takes in two integers, `TP` and `FN`, representing the number of successfully amplified accessions and the number of possible accessions that were not amplified, respectively. The function should return the amplification success rate as a percentage, rounded to two decimal places.\n\nFor example, if `TP = 75` and `FN = 25`, the amplification success rate would be `(75 / (75 + 25)) * 100 = 75%`.\n\nYour task is to implement the `amplification_success_rate` function and test it with the provided example and additional test cases.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"TP\": 75,\n      \"FN\": 25\n    },\n    \"expected_output\": 75.00,\n    \"test_aspect\": \"Basic functionality with typical values.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"TP\": 0,\n      \"FN\": 0\n    },\n    \"expected_output\": 0.00,\n    \"test_aspect\": \"Handling the case with no attempts.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"TP\": 50,\n      \"FN\": 0\n    },\n    \"expected_output\": 100.00,\n    \"test_aspect\": \"All attempts are successful; no false negatives.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"TP\": 0,\n      \"FN\": 50\n    },\n    \"expected_output\": 0.00,\n    \"test_aspect\": \"All attempts fail; no true positives.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"TP\": 100,\n      \"FN\": 100\n    },\n    \"expected_output\": 50.00,\n    \"test_aspect\": \"Equal TP and FN values to check for 50% success rate.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"TP\": 1000,\n      \"FN\": 2000\n    },\n    \"expected_output\": 33.33,\n    \"test_aspect\": \"Large values for TP and FN to check handling of large numbers.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"TP\": -1,\n      \"FN\": 10\n    },\n    \"expected_output\": \"Error\",\n    \"test_aspect\": \"Negative TP value should handle gracefully.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"TP\": 10,\n      \"FN\": -1\n    },\n    \"expected_output\": \"Error\",\n    \"test_aspect\": \"Negative FN value should handle gracefully.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"TP\": 0,\n      \"FN\": 1\n    },\n    \"expected_output\": 0.00,\n    \"test_aspect\": \"Single false negative with no true positives.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"TP\": 10,\n      \"FN\": 90\n    },\n    \"expected_output\": 10.00,\n    \"test_aspect\": \"Handling a large disparity between TP and FN.\"\n  }\n}\n```"}
{"index": 27092, "preference": "functionality", "prompt": "You are tasked with creating a Python package that includes a module named `foo`. The package should expose only the `Foo` class from the `foo` module to the outside world. To achieve this, you need to modify the `__init__.py` file within the package directory.\n\nYour task is to write the necessary code in the `__init__.py` file to achieve the desired behavior. Specifically, you should ensure that when the package is imported from an external module, only the `Foo` class is accessible using the `from package_name import *` syntax.\n\nWrite the code that should be placed in the `__init__.py` file to accomplish this.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"from package_name import *\\nprint(Foo)\",\n    \"expected_output\": \"<class 'foo.Foo'>\",\n    \"test_aspect\": \"Verify that the Foo class is accessible after importing the package.\"\n  },\n  \"test_case2\": {\n    \"input\": \"from package_name import *\\nfoo_instance = Foo()\\nprint(type(foo_instance))\",\n    \"expected_output\": \"<class 'foo.Foo'>\",\n    \"test_aspect\": \"Check that an instance of Foo can be created and is of the correct type.\"\n  },\n  \"test_case3\": {\n    \"input\": \"from package_name import *\\nprint(Foo.__module__)\",\n    \"expected_output\": \"foo\",\n    \"test_aspect\": \"Ensure that the module of the Foo class is correctly set to 'foo'.\"\n  },\n  \"test_case4\": {\n    \"input\": \"from package_name import *\\ntry:\\n    from package_name import foo\\nexcept ImportError as e:\\n    print(e)\",\n    \"expected_output\": \"ImportError: cannot import name 'foo'\",\n    \"test_aspect\": \"Verify that the foo module cannot be directly imported when using the specified import method.\"\n  },\n  \"test_case5\": {\n    \"input\": \"from package_name import *\\nprint(dir())\",\n    \"expected_output\": \"['Foo']\",\n    \"test_aspect\": \"Check that only the Foo class is present in the current namespace after import.\"\n  },\n  \"test_case6\": {\n    \"input\": \"from package_name import *\\nprint(callable(Foo))\",\n    \"expected_output\": \"True\",\n    \"test_aspect\": \"Verify that the Foo class is callable.\"\n  },\n  \"test_case7\": {\n    \"input\": \"from package_name import *\\nfoo_instance = Foo()\\nprint(foo_instance)\",\n    \"expected_output\": \"<foo.Foo object at some_memory_address>\",\n    \"test_aspect\": \"Check that the instance of Foo prints correctly.\"\n  },\n  \"test_case8\": {\n    \"input\": \"from package_name import *\\nfoo_instance = Foo()\\nfoo_instance.some_method()\",\n    \"expected_output\": \"Expected output of the method\",\n    \"test_aspect\": \"Verify that methods of the Foo class work properly after creating an instance.\"\n  },\n  \"test_case9\": {\n    \"input\": \"from package_name import *\\nprint(Foo.__doc__)\",\n    \"expected_output\": \"Documentation string for Foo class\",\n    \"test_aspect\": \"Ensure that the documentation string of the Foo class is accessible.\"\n  },\n  \"test_case10\": {\n    \"input\": \"from package_name import *\\nprint(isinstance(Foo, type))\",\n    \"expected_output\": \"True\",\n    \"test_aspect\": \"Check that Foo is indeed a class by verifying its type.\"\n  }\n}\n```"}
{"index": 28919, "preference": "functionality", "prompt": "You are tasked with implementing a function to retrieve user data from a database based on the username. The function should allow for specifying the fields to retrieve and whether the username comparison should be case-sensitive or not.\n\nYou are given a code snippet for inspiration, which includes a partial implementation of the `get_data_by_name` function. The function uses a SQL query to retrieve user data from a database table named `users`. The query is constructed based on the input parameters `username`, `fields`, and `case_sensitive`.\n\nYour task is to complete the implementation of the `get_data_by_name` function by handling the case where the `query` and `query_args` are returned from the SQL query execution. You should also ensure that the function correctly handles the case sensitivity based on the `case_sensitive` parameter.\n\nComplete the `get_data_by_name` function to fulfill the following requirements:\n- If `case_sensitive` is `False`, the function should construct a case-insensitive SQL query to retrieve the specified `fields` for the user with the given `username`.\n- If `case_sensitive` is `True`, the function should construct a case-sensitive SQL query to retrieve the specified `fields` for the user with the given `username`.\n\nYou should assume that the database connection and execution functions are already implemented and available for use.\n\nImplement the `get_data_by_name` function according to the given requirements.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"username\": \"john_doe\",\n      \"fields\": [\"name\", \"email\"],\n      \"case_sensitive\": false\n    },\n    \"expected_output\": {\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\"\n    },\n    \"test_aspect\": \"Basic case-insensitive retrieval of user data.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"username\": \"Jane_Smith\",\n      \"fields\": [\"name\", \"age\"],\n      \"case_sensitive\": true\n    },\n    \"expected_output\": {\n      \"name\": \"Jane Smith\",\n      \"age\": 30\n    },\n    \"test_aspect\": \"Basic case-sensitive retrieval of user data.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"username\": \"john_doe\",\n      \"fields\": [\"name\", \"email\"],\n      \"case_sensitive\": true\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Case-sensitive retrieval returns null if username does not match exactly.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"username\": \"John_Doe\",\n      \"fields\": [\"name\"],\n      \"case_sensitive\": false\n    },\n    \"expected_output\": {\n      \"name\": \"John Doe\"\n    },\n    \"test_aspect\": \"Case-insensitive retrieval returns correct data with different case in username.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"username\": \"unknown_user\",\n      \"fields\": [\"name\", \"email\"],\n      \"case_sensitive\": false\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Retrieval returns null if username does not exist in the database.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"username\": \"alice_wonder\",\n      \"fields\": [\"email\"],\n      \"case_sensitive\": true\n    },\n    \"expected_output\": {\n      \"email\": \"alice@example.com\"\n    },\n    \"test_aspect\": \"Single field retrieval test in a case-sensitive manner.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"username\": \"ALICE_WONDER\",\n      \"fields\": [\"name\", \"age\"],\n      \"case_sensitive\": false\n    },\n    \"expected_output\": {\n      \"name\": \"Alice Wonder\",\n      \"age\": 25\n    },\n    \"test_aspect\": \"Case-insensitive retrieval with uppercase username matches.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"username\": \"bob\",\n      \"fields\": [\"last_login\"],\n      \"case_sensitive\": false\n    },\n    \"expected_output\": {\n      \"last_login\": \"2023-01-01T12:00:00\"\n    },\n    \"test_aspect\": \"Test for retrieval of timestamp field in case-insensitive mode.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"username\": \"Charlie\",\n      \"fields\": [\"non_existing_field\"],\n      \"case_sensitive\": true\n    },\n    \"expected_output\": null,\n    \"test_aspect\": \"Case-sensitive search for non-existing field returns null.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"username\": \"dAVE\",\n      \"fields\": [\"name\", \"email\"],\n      \"case_sensitive\": false\n    },\n    \"expected_output\": {\n      \"name\": \"Dave\",\n      \"email\": \"dave@example.com\"\n    },\n    \"test_aspect\": \"Case-insensitive retrieval returns correct data with different case.\"\n  }\n}\n```"}
{"index": 4916, "preference": "functionality", "prompt": "You are tasked with creating a custom event handling system in C++ using Qt. Your goal is to implement a custom event type and handle it within a Qt application.\n\nYour task is to create a class `CustomEvent` that inherits from `QEvent` and represents a custom event type `CMScrolled`. The `CustomEvent` class should have a constructor that takes an integer parameter representing the scroll amount.\n\nNext, you need to create a custom widget `CustomWidget` that inherits from `QWidget`. This widget should override the `event` method to handle the custom event `CMScrolled`. When the `CMScrolled` event is received, the widget should update its internal state based on the scroll amount provided in the event.\n\nFinally, in the main application, you should create an instance of `CustomWidget` and simulate the occurrence of the `CMScrolled` event with a random scroll amount.\n\nYour task is to implement the `CustomEvent` class, the `CustomWidget` class, and the main application code to handle the custom event and update the widget's state accordingly.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"CustomEvent(10)\",\n    \"expected_output\": \"Widget state updated with scroll amount 10\",\n    \"test_aspect\": \"Basic functionality: Verify that the event is handled correctly with positive scroll amount.\"\n  },\n  \"test_case2\": {\n    \"input\": \"CustomEvent(-5)\",\n    \"expected_output\": \"Widget state updated with scroll amount -5\",\n    \"test_aspect\": \"Basic functionality: Verify that the event is handled correctly with negative scroll amount.\"\n  },\n  \"test_case3\": {\n    \"input\": \"CustomEvent(0)\",\n    \"expected_output\": \"Widget state remains unchanged\",\n    \"test_aspect\": \"Edge case: Verify that no update occurs for zero scroll amount.\"\n  },\n  \"test_case4\": {\n    \"input\": \"CustomEvent(INT_MAX)\",\n    \"expected_output\": \"Widget state updated with maximum scroll amount\",\n    \"test_aspect\": \"Boundary case: Verify that the widget can handle the maximum integer value.\"\n  },\n  \"test_case5\": {\n    \"input\": \"CustomEvent(INT_MIN)\",\n    \"expected_output\": \"Widget state updated with minimum scroll amount\",\n    \"test_aspect\": \"Boundary case: Verify that the widget can handle the minimum integer value.\"\n  },\n  \"test_case6\": {\n    \"input\": \"CustomEvent(1000)\",\n    \"expected_output\": \"Widget state updated with scroll amount 1000\",\n    \"test_aspect\": \"Functional correctness: Check if the widget can handle a large positive scroll amount.\"\n  },\n  \"test_case7\": {\n    \"input\": \"CustomEvent(-1000)\",\n    \"expected_output\": \"Widget state updated with scroll amount -1000\",\n    \"test_aspect\": \"Functional correctness: Check if the widget can handle a large negative scroll amount.\"\n  },\n  \"test_case8\": {\n    \"input\": \"emit custom event with random value between -50 and 50\",\n    \"expected_output\": \"Widget state updated with appropriate scroll amount\",\n    \"test_aspect\": \"Random input: Ensure the widget handles a diverse range of scroll amounts correctly.\"\n  },\n  \"test_case9\": {\n    \"input\": \"CustomEvent(1)\",\n    \"expected_output\": \"Widget state updated with scroll amount 1\",\n    \"test_aspect\": \"Basic functionality: Verify the handling of small positive scroll amount.\"\n  },\n  \"test_case10\": {\n    \"input\": \"CustomEvent(-1)\",\n    \"expected_output\": \"Widget state updated with scroll amount -1\",\n    \"test_aspect\": \"Basic functionality: Verify the handling of small negative scroll amount.\"\n  }\n}\n```"}
{"index": 24118, "preference": "functionality", "prompt": "You are given a Python code snippet that includes a function call to `describe` with a file name as an argument. Your task is to implement the `describe` function, which reads the content of the specified CSV file and performs some statistical analysis on the data. The CSV file contains genetic information related to chromosome 20.\n\nThe `describe` function should read the CSV file, calculate the mean, median, and standard deviation of a specific column in the file, and then print out the results. The specific column for which the statistics need to be calculated will be determined based on the content of the CSV file.\n\nYour task is to implement the `describe` function to achieve the described functionality.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"valid_data.csv\",\n    \"expected_output\": \"{\\\"mean\\\": 10.5, \\\"median\\\": 10, \\\"std_dev\\\": 2.5}\",\n    \"test_aspect\": \"Standard case with typical data for statistical calculations.\"\n  },\n  \"test_case2\": {\n    \"input\": \"empty_file.csv\",\n    \"expected_output\": \"Error: No data to analyze.\",\n    \"test_aspect\": \"Testing handling of an empty CSV file.\"\n  },\n  \"test_case3\": {\n    \"input\": \"single_value.csv\",\n    \"expected_output\": \"{\\\"mean\\\": 5, \\\"median\\\": 5, \\\"std_dev\\\": 0}\",\n    \"test_aspect\": \"Testing functionality with a single value in the CSV.\"\n  },\n  \"test_case4\": {\n    \"input\": \"identical_values.csv\",\n    \"expected_output\": \"{\\\"mean\\\": 7, \\\"median\\\": 7, \\\"std_dev\\\": 0}\",\n    \"test_aspect\": \"Testing multiple identical values in the CSV.\"\n  },\n  \"test_case5\": {\n    \"input\": \"large_numbers.csv\",\n    \"expected_output\": \"{\\\"mean\\\": 1000000, \\\"median\\\": 1000000, \\\"std_dev\\\": 0}\",\n    \"test_aspect\": \"Testing function with very large numbers.\"\n  },\n  \"test_case6\": {\n    \"input\": \"invalid_data.csv\",\n    \"expected_output\": \"Error: Data format is invalid.\",\n    \"test_aspect\": \"Testing handling of invalid data types in CSV.\"\n  },\n  \"test_case7\": {\n    \"input\": \"negative_values.csv\",\n    \"expected_output\": \"{\\\"mean\\\": -5, \\\"median\\\": -5, \\\"std_dev\\\": 0}\",\n    \"test_aspect\": \"Testing functionality with negative values in the CSV.\"\n  },\n  \"test_case8\": {\n    \"input\": \"decimal_values.csv\",\n    \"expected_output\": \"{\\\"mean\\\": 2.5, \\\"median\\\": 2.5, \\\"std_dev\\\": 0}\",\n    \"test_aspect\": \"Testing functionality with decimal (floating-point) values.\"\n  },\n  \"test_case9\": {\n    \"input\": \"mixed_types.csv\",\n    \"expected_output\": \"Error: Data types are mixed in the column.\",\n    \"test_aspect\": \"Testing handling of mixed data types in the column.\"\n  },\n  \"test_case10\": {\n    \"input\": \"very_large_file.csv\",\n    \"expected_output\": \"{\\\"mean\\\": 100.0, \\\"median\\\": 100, \\\"std_dev\\\": 10}\",\n    \"test_aspect\": \"Testing performance and correctness with a very large CSV file.\"\n  }\n}\n```"}
{"index": 35739, "preference": "functionality", "prompt": "You are tasked with creating a Python script to automate the generation of file paths for a machine learning project. The script should take command-line arguments and construct file paths based on the provided inputs. The file paths are constructed using a predefined prefix and the input arguments.\n\nThe script should accept the following command-line arguments in the given order:\n1. `datatype` (string): Type of data being used in the project.\n2. `tree_count` (string): Number of trees in the project.\n3. `sz` (string): Size parameter for the project.\n4. `project` (string): Name of the project.\n\nThe script should construct the following file paths based on the provided inputs:\n1. `data_path`: Constructed by concatenating the `prefix`, \"data/raw/\", and the `datatype`.\n2. `model_base`: Constructed by concatenating the `prefix`, \"models/\", the `datatype`, and a period.\n3. `augmented_token_model`: Constructed by concatenating `model_base`, \"augmented.token.\", `project`, \"-best-acc.pt\".\n4. `structure_model`: Constructed by concatenating `model_base`, \"rule-best-acc.pt\".\n5. `src_token`: Constructed by concatenating `data_path`, \"/test/\", `project`, \"/prev.augmented.token\".\n\nWrite a Python script that takes the command-line arguments and constructs the file paths as described above.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"image 100 256 my_project\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/image\",\n      \"model_base\": \"prefix/models/image.\",\n      \"augmented_token_model\": \"prefix/models/image.augmented.token.my_project-best-acc.pt\",\n      \"structure_model\": \"prefix/models/image.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/image/test/my_project/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Standard input values for a typical use case.\"\n  },\n  \"test_case2\": {\n    \"input\": \"text 50 128 another_project\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/text\",\n      \"model_base\": \"prefix/models/text.\",\n      \"augmented_token_model\": \"prefix/models/text.augmented.token.another_project-best-acc.pt\",\n      \"structure_model\": \"prefix/models/text.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/text/test/another_project/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Different datatype and project name to verify varied inputs.\"\n  },\n  \"test_case3\": {\n    \"input\": \"csv 0 512 test_project\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/csv\",\n      \"model_base\": \"prefix/models/csv.\",\n      \"augmented_token_model\": \"prefix/models/csv.augmented.token.test_project-best-acc.pt\",\n      \"structure_model\": \"prefix/models/csv.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/csv/test/test_project/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Testing with zero trees to assess boundary handling.\"\n  },\n  \"test_case4\": {\n    \"input\": \"json 9999 1024 extreme_project\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/json\",\n      \"model_base\": \"prefix/models/json.\",\n      \"augmented_token_model\": \"prefix/models/json.augmented.token.extreme_project-best-acc.pt\",\n      \"structure_model\": \"prefix/models/json.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/json/test/extreme_project/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Testing with a very high tree count to check for robustness.\"\n  },\n  \"test_case5\": {\n    \"input\": \"xml 1 1 simple_project\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/xml\",\n      \"model_base\": \"prefix/models/xml.\",\n      \"augmented_token_model\": \"prefix/models/xml.augmented.token.simple_project-best-acc.pt\",\n      \"structure_model\": \"prefix/models/xml.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/xml/test/simple_project/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Checking basic functionality with minimal inputs.\"\n  },\n  \"test_case6\": {\n    \"input\": \"text 10 -1 invalid_project\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/text\",\n      \"model_base\": \"prefix/models/text.\",\n      \"augmented_token_model\": \"prefix/models/text.augmented.token.invalid_project-best-acc.pt\",\n      \"structure_model\": \"prefix/models/text.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/text/test/invalid_project/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Testing with invalid size parameter to check robustness.\"\n  },\n  \"test_case7\": {\n    \"input\": \"binary 5 0 project_with_zero\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/binary\",\n      \"model_base\": \"prefix/models/binary.\",\n      \"augmented_token_model\": \"prefix/models/binary.augmented.token.project_with_zero-best-acc.pt\",\n      \"structure_model\": \"prefix/models/binary.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/binary/test/project_with_zero/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Testing with zero size to observe behavior.\"\n  },\n  \"test_case8\": {\n    \"input\": \"audio 100 512 project_special_chars_!@#\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/audio\",\n      \"model_base\": \"prefix/models/audio.\",\n      \"augmented_token_model\": \"prefix/models/audio.augmented.token.project_special_chars_!@#-best-acc.pt\",\n      \"structure_model\": \"prefix/models/audio.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/audio/test/project_special_chars_!@#/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Testing with special characters in project name.\"\n  },\n  \"test_case9\": {\n    \"input\": \"image 10 256 project_with_space\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/image\",\n      \"model_base\": \"prefix/models/image.\",\n      \"augmented_token_model\": \"prefix/models/image.augmented.token.project_with_space-best-acc.pt\",\n      \"structure_model\": \"prefix/models/image.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/image/test/project_with_space/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Input with spaces in the project name to check path handling.\"\n  },\n  \"test_case10\": {\n    \"input\": \"text 1 1 project_empty\",\n    \"expected_output\": {\n      \"data_path\": \"prefix/data/raw/text\",\n      \"model_base\": \"prefix/models/text.\",\n      \"augmented_token_model\": \"prefix/models/text.augmented.token.project_empty-best-acc.pt\",\n      \"structure_model\": \"prefix/models/text.rule-best-acc.pt\",\n      \"src_token\": \"prefix/data/raw/text/test/project_empty/prev.augmented.token\"\n    },\n    \"test_aspect\": \"Ensuring functionality with straightforward project name.\"\n  }\n}\n```"}
{"index": 1022, "preference": "functionality", "prompt": "You are tasked with implementing a 3D wavelet transform and its adjoint operator using Python. The wavelet transform is a mathematical tool used for signal processing and data compression. The code snippet provided is a unit test for the adjoint operator of the 3D wavelet transform. Your task is to write a Python function that performs the 3D wavelet transform and its adjoint operation.\n\nWrite a function `wavelet_3d_transform(data, wavelet_name, nb_scale)` that takes in a 3D array `data`, the name of the wavelet to be used, `wavelet_name`, and the number of scales for the wavelet transform, `nb_scale`. The function should perform the 3D wavelet transform on the input data and return the transformed coefficients.\n\nAdditionally, implement a function `adjoint_wavelet_3d_transform(coefficients, wavelet_name, nb_scale)` that takes in the transformed coefficients, `coefficients`, the wavelet name, `wavelet_name`, and the number of scales used for the transform, `nb_scale`. This function should perform the adjoint operation to reconstruct the original data from the coefficients and return the reconstructed 3D array.\n\nAssume that the `WaveletN` class is already implemented and available for use, providing the necessary functionality for the wavelet transform and its adjoint operation.\n\nYour task is to complete the implementation of the `wavelet_3d_transform` and `adjoint_wavelet_3d_transform` functions to perform the 3D wavelet transform and its adjoint operation, respectively.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"data\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n      \"wavelet_name\": \"haar\",\n      \"nb_scale\": 1\n    },\n    \"expected_output\": [[[4.0, 6.0], [10.0, 12.0]]],\n    \"test_aspect\": \"Basic functionality with a small 3D array using Haar wavelet.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"data\": [[[0, 0], [0, 0]], [[0, 0], [0, 0]]],\n      \"wavelet_name\": \"haar\",\n      \"nb_scale\": 1\n    },\n    \"expected_output\": [[[0.0, 0.0], [0.0, 0.0]]],\n    \"test_aspect\": \"Handling of an all-zero input array.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"data\": [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]],\n      \"wavelet_name\": \"db1\",\n      \"nb_scale\": 2\n    },\n    \"expected_output\": [/* expected coefficients after transform */],\n    \"test_aspect\": \"Testing wavelet transform with two scales using Daubechies wavelet.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"data\": [[[1]]],\n      \"wavelet_name\": \"haar\",\n      \"nb_scale\": 1\n    },\n    \"expected_output\": [[[1.0]]],\n    \"test_aspect\": \"Edge case with a single-element 3D array.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"data\": [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]],\n      \"wavelet_name\": \"haar\",\n      \"nb_scale\": 0\n    },\n    \"expected_output\": [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]],\n    \"test_aspect\": \"No transformation applied when scales are set to zero.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"data\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n      \"wavelet_name\": \"haar\",\n      \"nb_scale\": 1\n    },\n    \"expected_output\": [/* expected coefficients after transform */],\n    \"test_aspect\": \"Verifying the coefficients produced by a single scale transform.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"coefficients\": [/* coefficients from a previous transform */],\n      \"wavelet_name\": \"haar\",\n      \"nb_scale\": 1\n    },\n    \"expected_output\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n    \"test_aspect\": \"Testing adjoint operation to reconstruct original data from transformed coefficients.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"data\": [[[10, 20], [30, 40]], [[50, 60], [70, 80]]],\n      \"wavelet_name\": \"db1\",\n      \"nb_scale\": 1\n    },\n    \"expected_output\": [/* expected coefficients after transform */],\n    \"test_aspect\": \"Testing for larger values in input data.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"data\": [[[1, 1], [1, 1]], [[1, 1], [1, 1]]],\n      \"wavelet_name\": \"haar\",\n      \"nb_scale\": 1\n    },\n    \"expected_output\": [[[1.0, 1.0], [1.0, 1.0]]],\n    \"test_aspect\": \"Testing input with uniform values to verify transformation behavior.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"data\": [[[1.5, -2.3], [0.0, 3.1]], [[4.5, 5.1], [-6.0, -7.7]]],\n      \"wavelet_name\": \"haar\",\n      \"nb_scale\": 1\n    },\n    \"expected_output\": [/* expected coefficients after transform */],\n    \"test_aspect\": \"Testing with a mix of positive and negative floating-point values to verify robustness.\"\n  }\n}\n```"}
{"index": 1528, "preference": "functionality", "prompt": "You are working on a data preprocessing task and need to write a Python function to perform specific operations on pandas DataFrames. Your task is to create a function that takes two pandas DataFrames as input and performs the following operations:\n1. Reset the indexes of both DataFrames to start from 0, dropping the original index.\n2. Pickle (serialize) the modified DataFrames to separate pickle files.\n\nWrite a Python function `preprocess_and_pickle` that takes two pandas DataFrames `df_test` and `df_train_val` as input and performs the required operations. The function should then save the modified DataFrames to pickle files named `df_test.pkl` and `df_train_val.pkl`.\n\nYour function should have the following signature:\n```python\ndef preprocess_and_pickle(df_test, df_train_val):\n    # Your code here\n    pass\n```\n\nFor example, given the input DataFrames:\n```\ndf_test:\n   col1  col2\n0     1     4\n1     2     5\n2     3     6\n\ndf_train_val:\n   col1  col2\n0     7    10\n1     8    11\n2     9    12\n```\n\nThe function `preprocess_and_pickle(df_test, df_train_val)` should reset the indexes of both DataFrames and save them to pickle files `df_test.pkl` and `df_train_val.pkl`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [1, 2, 3],\n        \"col2\": [4, 5, 6]\n      },\n      \"df_train_val\": {\n        \"col1\": [7, 8, 9],\n        \"col2\": [10, 11, 12]\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl\",\n    \"test_aspect\": \"Standard input with normal data\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [],\n        \"col2\": []\n      },\n      \"df_train_val\": {\n        \"col1\": [],\n        \"col2\": []\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl with empty DataFrames\",\n    \"test_aspect\": \"Handling empty DataFrames\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [1],\n        \"col2\": [2]\n      },\n      \"df_train_val\": {\n        \"col1\": [3],\n        \"col2\": [4]\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl with single row DataFrames\",\n    \"test_aspect\": \"Handling DataFrames with a single row\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [1, 2, 3],\n        \"col2\": [4, 5, 6]\n      },\n      \"df_train_val\": {\n        \"col1\": [7, 8],\n        \"col2\": [10, 11]\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl with different row counts\",\n    \"test_aspect\": \"Different sizes of DataFrames\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [1, null, 3],\n        \"col2\": [4, 5, null]\n      },\n      \"df_train_val\": {\n        \"col1\": [7, 8, null],\n        \"col2\": [null, 11, 12]\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl with NaN values\",\n    \"test_aspect\": \"Handling DataFrames with NaN values\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [1, 2, 3],\n        \"col2\": [4, 5, 6]\n      },\n      \"df_train_val\": {\n        \"col1\": [7, 8, 9],\n        \"col2\": [\"string\", 11, 12]\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl with mixed data types\",\n    \"test_aspect\": \"Handling DataFrames with mixed data types\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [\"a\", \"b\", \"c\"],\n        \"col2\": [\"d\", \"e\", \"f\"]\n      },\n      \"df_train_val\": {\n        \"col1\": [\"g\", \"h\", \"i\"],\n        \"col2\": [\"j\", \"k\", \"l\"]\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl with string data\",\n    \"test_aspect\": \"Handling DataFrames with string data\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [1, 2, 3],\n        \"col2\": [4, 5, 6]\n      },\n      \"df_train_val\": {\n        \"col1\": [7, 8, 9],\n        \"col2\": [10, 11, 12]\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl with reset indexes\",\n    \"test_aspect\": \"Validating index reset functionality\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [1, 2],\n        \"col2\": [3, 4]\n      },\n      \"df_train_val\": {\n        \"col1\": [],\n        \"col2\": []\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl with 2 rows, df_train_val.pkl with empty DataFrame\",\n    \"test_aspect\": \"One DataFrame empty and one with data\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"df_test\": {\n        \"col1\": [1, 2, 3],\n        \"col2\": [4, 5, 6]\n      },\n      \"df_train_val\": {\n        \"col1\": [1, 2, 3],\n        \"col2\": [4, 5, 6]\n      }\n    },\n    \"expected_output\": \"pickle files created: df_test.pkl, df_train_val.pkl with identical DataFrames\",\n    \"test_aspect\": \"Handling identical DataFrames\"\n  }\n}\n```"}
{"index": 18482, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that extracts information about TV show seasons from a given callback function. The callback function, `SeasonExtractEmbedded`, takes several parameters including `rating_key`, `language`, `base_title`, `display_items`, `item_title`, and `title`. Your goal is to create a function that parses the callback function and returns a dictionary containing the extracted information.\n\nWrite a function `extract_season_info(callback_function)` that takes a callback function as input and returns a dictionary with the following keys:\n- `rating_key`: The value of the `rating_key` parameter in the callback function.\n- `language`: The value of the `language` parameter in the callback function.\n- `base_title`: The value of the `base_title` parameter in the callback function.\n- `display_items`: The value of the `display_items` parameter in the callback function.\n- `item_title`: The value of the `item_title` parameter in the callback function.\n- `title`: The value of the `title` parameter in the callback function.\n\nThe function should handle cases where the parameters may not be present or may have default values.\n\nFor example, if the input callback function is:\n```python\ndef example_callback(rating_key, language='en', base_title='', display_items=None, item_title='', title=''):\n    # function implementation\n    pass\n```\nThen calling `extract_season_info(example_callback)` should return a dictionary with keys and values based on the parameters of the callback function.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"def callback1(rating_key='123', language='en', base_title='Show', display_items=['item1', 'item2'], item_title='Episode 1', title='Show Season 1'):\\n    pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"123\\\", \\\"language\\\": \\\"en\\\", \\\"base_title\\\": \\\"Show\\\", \\\"display_items\\\": [\\\"item1\\\", \\\"item2\\\"], \\\"item_title\\\": \\\"Episode 1\\\", \\\"title\\\": \\\"Show Season 1\\\"}\",\n    \"test_aspect\": \"All parameters are provided with non-default values.\"\n  },\n  \"test_case2\": {\n    \"input\": \"def callback2(rating_key='456', language='fr'):\\n    pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"456\\\", \\\"language\\\": \\\"fr\\\", \\\"base_title\\\": \\\"\\\", \\\"display_items\\\": null, \\\"item_title\\\": \\\"\\\", \\\"title\\\": \\\"\\\"}\",\n    \"test_aspect\": \"Some parameters are missing (default values should be handled).\"\n  },\n  \"test_case3\": {\n    \"input\": \"def callback3(rating_key='789', display_items=['item3'], title='Show Season 2'):\\n    pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"789\\\", \\\"language\\\": \\\"\\\", \\\"base_title\\\": \\\"\\\", \\\"display_items\\\": [\\\"item3\\\"], \\\"item_title\\\": \\\"\\\", \\\"title\\\": \\\"Show Season 2\\\"}\",\n    \"test_aspect\": \"Parameters provided partially (language, base_title, and item_title are missing).\"\n  },\n  \"test_case4\": {\n    \"input\": \"def callback4():\\n    pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"\\\", \\\"language\\\": \\\"\\\", \\\"base_title\\\": \\\"\\\", \\\"display_items\\\": null, \\\"item_title\\\": \\\"\\\", \\\"title\\\": \\\"\\\"}\",\n    \"test_aspect\": \"No parameters provided (should handle defaults).\"\n  },\n  \"test_case5\": {\n    \"input\": \"def callback5(rating_key=None, language='en', display_items=None):\\n    pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": null, \\\"language\\\": \\\"en\\\", \\\"base_title\\\": \\\"\\\", \\\"display_items\\\": null, \\\"item_title\\\": \\\"\\\", \\\"title\\\": \\\"\\\"}\",\n    \"test_aspect\": \"Handles None as a value for rating_key.\"\n  },\n  \"test_case6\": {\n    \"input\": \"def callback6(rating_key='123', language='en', base_title='Show', display_items=['item1'], item_title='Episode 1', title=None):\\n    pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"123\\\", \\\"language\\\": \\\"en\\\", \\\"base_title\\\": \\\"Show\\\", \\\"display_items\\\": [\\\"item1\\\"], \\\"item_title\\\": \\\"Episode 1\\\", \\\"title\\\": null}\",\n    \"test_aspect\": \"title parameter provided as None.\"\n  },\n  \"test_case7\": {\n    \"input\": \"def callback7(rating_key='321', language='es', base_title='Serie', display_items=['itemA', 'itemB'], item_title='Episodio 1', title='Serie Temporada 1'):\\n    pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"321\\\", \\\"language\\\": \\\"es\\\", \\\"base_title\\\": \\\"Serie\\\", \\\"display_items\\\": [\\\"itemA\\\", \\\"itemB\\\"], \\\"item_title\\\": \\\"Episodio 1\\\", \\\"title\\\": \\\"Serie Temporada 1\\\"}\",\n    \"test_aspect\": \"Testing with a different language and all parameters present.\"\n  },\n  \"test_case8\": {\n    \"input\": \"def callback8(rating_key='654', language='de', base_title='', display_items=[], item_title='', title=''): pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"654\\\", \\\"language\\\": \\\"de\\\", \\\"base_title\\\": \\\"\\\", \\\"display_items\\\": [], \\\"item_title\\\": \\\"\\\", \\\"title\\\": \\\"\\\"}\",\n    \"test_aspect\": \"Empty list provided for display_items, checks for handling of empty collections.\"\n  },\n  \"test_case9\": {\n    \"input\": \"def callback9(rating_key='111', language='it', base_title='Serie', display_items=None, item_title='Episodio finale'): pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"111\\\", \\\"language\\\": \\\"it\\\", \\\"base_title\\\": \\\"Serie\\\", \\\"display_items\\\": null, \\\"item_title\\\": \\\"Episodio finale\\\", \\\"title\\\": \\\"\\\"}\",\n    \"test_aspect\": \"Missing title, should handle default values appropriately.\"\n  },\n  \"test_case10\": {\n    \"input\": \"def callback10(rating_key='222', language='en', base_title='Show', display_items=['item1', 'item2', 'item3'], item_title='Episode 2', title='Show Season 2'):\\n    pass\",\n    \"expected_output\": \"{\\\"rating_key\\\": \\\"222\\\", \\\"language\\\": \\\"en\\\", \\\"base_title\\\": \\\"Show\\\", \\\"display_items\\\": [\\\"item1\\\", \\\"item2\\\", \\\"item3\\\"], \\\"item_title\\\": \\\"Episode 2\\\", \\\"title\\\": \\\"Show Season 2\\\"}\",\n    \"test_aspect\": \"All parameters provided with valid values, tests for normal functionality.\"\n  }\n}\n```"}
{"index": 9691, "preference": "functionality", "prompt": "You are tasked with implementing a function that processes a list of experiment workflows and returns the number of unique steps across all workflows. Each workflow is represented as a list of steps, and each step is a string indicating a specific action or stage in the experiment process.\n\nYou need to write a Python function `count_unique_steps(exp_work_flows)` that takes in a list of experiment workflows and returns the count of unique steps present in all the workflows combined.\n\nFor example, given the following `exp_work_flows` list:\n```python\nexp_work_flows = [\n    ['startexperiment/', 'consent', 'preexperiment/AN/'],\n    ['startexperiment/', 'consent', 'preexperiment/AN/', 'experiment/AN/task1', 'postexperiment/AN/'],\n    ['startexperiment/', 'consent', 'preexperiment/AN/', 'experiment/AN/task2', 'postexperiment/AN/']\n]\n```\nThe function should return `6` since there are 6 unique steps across all workflows: 'startexperiment/', 'consent', 'preexperiment/AN/', 'experiment/AN/task1', 'postexperiment/AN/', and 'experiment/AN/task2'.\n\nAssume that the input list `exp_work_flows` will always be a non-empty list of lists, where each inner list represents a workflow and contains at least one step.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [[ \"step1\", \"step2\", \"step3\" ]],\n    \"expected_output\": 3,\n    \"test_aspect\": \"Single workflow with unique steps\"\n  },\n  \"test_case2\": {\n    \"input\": [[ \"step1\", \"step2\" ], [ \"step1\", \"step3\" ]],\n    \"expected_output\": 3,\n    \"test_aspect\": \"Multiple workflows with some overlapping steps\"\n  },\n  \"test_case3\": {\n    \"input\": [[ \"step1\" ], [ \"step1\" ], [ \"step1\" ]],\n    \"expected_output\": 1,\n    \"test_aspect\": \"Multiple workflows with identical steps\"\n  },\n  \"test_case4\": {\n    \"input\": [[ \"step1\", \"step2\" ], [ \"step3\", \"step4\" ]],\n    \"expected_output\": 4,\n    \"test_aspect\": \"Distinct steps across multiple workflows\"\n  },\n  \"test_case5\": {\n    \"input\": [[ \"step1\", \"step2\", \"step3\" ], [ \"step2\", \"step3\", \"step4\" ]],\n    \"expected_output\": 4,\n    \"test_aspect\": \"Workflows with shared and unique steps\"\n  },\n  \"test_case6\": {\n    \"input\": [[ \"step1\", \"step1\", \"step1\" ], [ \"step2\", \"step2\" ]],\n    \"expected_output\": 2,\n    \"test_aspect\": \"Identical steps in different workflows\"\n  },\n  \"test_case7\": {\n    \"input\": [[ \"start\" ], [ \"middle\" ], [ \"end\" ]],\n    \"expected_output\": 3,\n    \"test_aspect\": \"Three workflows with completely unique steps\"\n  },\n  \"test_case8\": {\n    \"input\": [[ \"a\" ], [ \"a\", \"b\", \"c\" ], [ \"b\", \"c\", \"d\" ]],\n    \"expected_output\": 4,\n    \"test_aspect\": \"Partially overlapping workflows with unique steps\"\n  },\n  \"test_case9\": {\n    \"input\": [[ \"step1\", \"step2\", \"step3\", \"step4\" ]],\n    \"expected_output\": 4,\n    \"test_aspect\": \"Single workflow with multiple unique steps\"\n  },\n  \"test_case10\": {\n    \"input\": [[ \"stepA\", \"stepB\", \"stepC\" ], [ \"stepC\", \"stepD\" ], [ \"stepD\", \"stepE\" ]],\n    \"expected_output\": 5,\n    \"test_aspect\": \"Workflows with shared steps and additions\"\n  }\n}\n```"}
{"index": 22753, "preference": "functionality", "prompt": "You are tasked with creating a Python function that enables notifications from a specific characteristic of a Bluetooth device. The function should take the characteristic UUID and the device's address as input and enable notifications for the specified characteristic.\n\nThe code snippet provided initializes the `CHARACTERISTIC_UUID` and `ADDRESS` variables. The `CHARACTERISTIC_UUID` represents the UUID of the characteristic for which notifications need to be enabled, and the `ADDRESS` represents the device's address. The address is set based on the platform, with a different address for Windows/Linux and macOS.\n\nYour task is to create a Python function `enable_notifications` that takes the `CHARACTERISTIC_UUID` and `ADDRESS` as input and enables notifications for the specified characteristic on the Bluetooth device.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"12345678-1234-5678-1234-56789abcdef0\", \n      \"ADDRESS\": \"00:11:22:33:44:55\"\n    },\n    \"expected_output\": \"Notifications enabled for characteristic 12345678-1234-5678-1234-56789abcdef0 on device 00:11:22:33:44:55\",\n    \"test_aspect\": \"Valid UUID and valid device address on supported platform\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"87654321-4321-6789-4321-fedcba987654\", \n      \"ADDRESS\": \"66:77:88:99:AA:BB\"\n    },\n    \"expected_output\": \"Notifications enabled for characteristic 87654321-4321-6789-4321-fedcba987654 on device 66:77:88:99:AA:BB\",\n    \"test_aspect\": \"Valid UUID and valid device address on another supported platform\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"\", \n      \"ADDRESS\": \"00:11:22:33:44:55\"\n    },\n    \"expected_output\": \"Error: Invalid characteristic UUID\",\n    \"test_aspect\": \"Empty UUID should trigger error\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"12345678-1234-5678-1234-56789abcdef0\", \n      \"ADDRESS\": \"\"\n    },\n    \"expected_output\": \"Error: Invalid device address\",\n    \"test_aspect\": \"Empty address should trigger error\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"invalid-uuid\", \n      \"ADDRESS\": \"00:11:22:33:44:55\"\n    },\n    \"expected_output\": \"Error: Invalid characteristic UUID\",\n    \"test_aspect\": \"Invalid UUID format should trigger error\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"12345678-1234-5678-1234-56789abcdef0\", \n      \"ADDRESS\": \"ZZ:YY:XX:WW:VV:UU\"\n    },\n    \"expected_output\": \"Error: Invalid device address\",\n    \"test_aspect\": \"Invalid MAC address format should trigger error\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"12345678-1234-5678-1234-56789abcdef0\", \n      \"ADDRESS\": \"00:11:22:33:44:55\"\n    },\n    \"expected_output\": \"Notifications enabled for characteristic 12345678-1234-5678-1234-56789abcdef0 on device 00:11:22:33:44:55\",\n    \"test_aspect\": \"Re-enabling notifications should not cause errors\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"12345678-1234-5678-1234-56789abcdef0\", \n      \"ADDRESS\": \"12:34:56:78:9A:BC\"\n    },\n    \"expected_output\": \"Notifications enabled for characteristic 12345678-1234-5678-1234-56789abcdef0 on device 12:34:56:78:9A:BC\",\n    \"test_aspect\": \"Testing with different valid address\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"12345678-1234-5678-1234-56789abcdef0\", \n      \"ADDRESS\": \"00:11:22:33:44:55\"\n    },\n    \"expected_output\": \"Notifications enabled for characteristic 12345678-1234-5678-1234-56789abcdef0 on device 00:11:22:33:44:55\",\n    \"test_aspect\": \"Ensuring notifications can be enabled multiple times without issues\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"CHARACTERISTIC_UUID\": \"12345678-1234-5678-1234-56789abcdef0\", \n      \"ADDRESS\": \"00:11:22:33:44:55\"\n    },\n    \"expected_output\": \"Notifications enabled for characteristic 12345678-1234-5678-1234-56789abcdef0 on device 00:11:22:33:44:55\",\n    \"test_aspect\": \"Validation of consistent output format\"\n  }\n}\n```"}
{"index": 11305, "preference": "functionality", "prompt": "You are tasked with implementing a function that performs a matrix operation called subsampling. Subsampling involves selecting a subset of rows from a given matrix based on a set of indices. The function should take a matrix and a list of indices as input and return the subset of rows from the matrix corresponding to the provided indices.\n\nThe function signature is as follows:\n```python\ndef subsample_matrix(matrix, indices):\n    # Your implementation here\n    pass\n```\n\nFor example, given the following matrix:\n```\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n```\nand the indices `[0, 2]`, the expected output would be:\n```\n[\n    [1, 2, 3],\n    [7, 8, 9]\n]\n```\n\nYou should note that matrices are indexed like `mat[rows, cols]`. If only one index is provided, it is interpreted as `mat[rows]`.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"matrix\": [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n      ],\n      \"indices\": [0, 2]\n    },\n    \"expected_output\": [\n      [1, 2, 3],\n      [7, 8, 9]\n    ],\n    \"test_aspect\": \"Basic functionality with multiple indices.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"matrix\": [\n        [1, 2, 3]\n      ],\n      \"indices\": [0]\n    },\n    \"expected_output\": [\n      [1, 2, 3]\n    ],\n    \"test_aspect\": \"Single row in the matrix, testing basic subsampling.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"matrix\": [\n        [1, 2],\n        [3, 4],\n        [5, 6]\n      ],\n      \"indices\": [1]\n    },\n    \"expected_output\": [\n      [3, 4]\n    ],\n    \"test_aspect\": \"Single index provided with multiple rows in the matrix.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"matrix\": [\n        [1, 2],\n        [3, 4],\n        [5, 6]\n      ],\n      \"indices\": []\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Empty indices list, expecting an empty result.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"matrix\": [],\n      \"indices\": [0]\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Empty matrix with non-empty index, expecting an empty result.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"matrix\": [\n        [1, 2],\n        [3, 4],\n        [5, 6]\n      ],\n      \"indices\": [0, 1, 2]\n    },\n    \"expected_output\": [\n      [1, 2],\n      [3, 4],\n      [5, 6]\n    ],\n    \"test_aspect\": \"All indices provided; expecting full matrix returned.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"matrix\": [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8]\n      ],\n      \"indices\": [0, 3]\n    },\n    \"expected_output\": [\n      [1, 2],\n      [7, 8]\n    ],\n    \"test_aspect\": \"Selecting first and last rows in a larger matrix.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"matrix\": [\n        [1, 2],\n        [3, 4],\n        [5, 6]\n      ],\n      \"indices\": [2, 1]\n    },\n    \"expected_output\": [\n      [5, 6],\n      [3, 4]\n    ],\n    \"test_aspect\": \"Indices provided in reverse order; testing order preservation.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"matrix\": [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8]\n      ],\n      \"indices\": [1, 1]\n    },\n    \"expected_output\": [\n      [3, 4],\n      [3, 4]\n    ],\n    \"test_aspect\": \"Repeated index to check the handling of duplicates.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"matrix\": [\n        [1]\n      ],\n      \"indices\": [1]\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Index out of bound scenario; expecting an empty result.\"\n  }\n}\n```"}
{"index": 26768, "preference": "functionality", "prompt": "You are tasked with implementing a report generation system that supports multiple output formats. The system should be able to generate reports in LaTeX, Markdown, JSON, and HTML formats. To achieve this, you need to create classes for each report builder type: LatexReportBuilder, MarkdownReportBuilder, JsonReportBuilder, and JinjaHtmlReportBuilder.\n\nYour task is to design the class structure for the report builders and ensure that they all adhere to a common interface. Each report builder should have a method called `generate_report` that takes in the report data and returns the formatted report in the respective output format.\n\nDesign the class structure and method signatures for the report builders to ensure that they can be easily extended to support additional output formats in the future.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\"format\": \"latex\", \"data\": {\"title\": \"Report Title\", \"content\": \"This is the content of the report.\"}},\n    \"expected_output\": \"\\\\documentclass{article}\\n\\\\begin{document}\\n\\\\title{Report Title}\\n\\\\maketitle\\nThis is the content of the report.\\n\\\\end{document}\",\n    \"test_aspect\": \"Testing LaTeX report generation with standard input.\"\n  },\n  \"test_case2\": {\n    \"input\": {\"format\": \"markdown\", \"data\": {\"title\": \"Report Title\", \"content\": \"This is the content of the report.\"}},\n    \"expected_output\": \"# Report Title\\n\\nThis is the content of the report.\",\n    \"test_aspect\": \"Testing Markdown report generation with standard input.\"\n  },\n  \"test_case3\": {\n    \"input\": {\"format\": \"json\", \"data\": {\"title\": \"Report Title\", \"content\": \"This is the content of the report.\"}},\n    \"expected_output\": \"{\\\"title\\\": \\\"Report Title\\\", \\\"content\\\": \\\"This is the content of the report.\\\"}\",\n    \"test_aspect\": \"Testing JSON report generation with standard input.\"\n  },\n  \"test_case4\": {\n    \"input\": {\"format\": \"html\", \"data\": {\"title\": \"Report Title\", \"content\": \"This is the content of the report.\"}},\n    \"expected_output\": \"<html><head><title>Report Title</title></head><body><h1>Report Title</h1><p>This is the content of the report.</p></body></html>\",\n    \"test_aspect\": \"Testing HTML report generation with standard input.\"\n  },\n  \"test_case5\": {\n    \"input\": {\"format\": \"latex\", \"data\": {\"title\": \"\", \"content\": \"\"}},\n    \"expected_output\": \"\\\\documentclass{article}\\n\\\\begin{document}\\n\\\\title{}\\n\\\\maketitle\\n\\n\\\\end{document}\",\n    \"test_aspect\": \"Testing LaTeX report generation with empty title and content.\"\n  },\n  \"test_case6\": {\n    \"input\": {\"format\": \"markdown\", \"data\": {\"title\": \"Report Title\", \"content\": \"\"}},\n    \"expected_output\": \"# Report Title\\n\\n\",\n    \"test_aspect\": \"Testing Markdown report generation with empty content.\"\n  },\n  \"test_case7\": {\n    \"input\": {\"format\": \"json\", \"data\": {\"title\": \"\", \"content\": \"\"}},\n    \"expected_output\": \"{\\\"title\\\": \\\"\\\", \\\"content\\\": \\\"\\\"}\",\n    \"test_aspect\": \"Testing JSON report generation with empty title and content.\"\n  },\n  \"test_case8\": {\n    \"input\": {\"format\": \"html\", \"data\": {\"title\": \"\", \"content\": \"\"}},\n    \"expected_output\": \"<html><head><title></title></head><body><h1></h1><p></p></body></html>\",\n    \"test_aspect\": \"Testing HTML report generation with empty title and content.\"\n  },\n  \"test_case9\": {\n    \"input\": {\"format\": \"xml\", \"data\": {\"title\": \"Report Title\", \"content\": \"This is the content of the report.\"}},\n    \"expected_output\": \"Error: Unsupported format\",\n    \"test_aspect\": \"Testing handling of unsupported output format.\"\n  },\n  \"test_case10\": {\n    \"input\": {\"format\": \"markdown\", \"data\": {\"title\": \"Special Characters\", \"content\": \"# This is a title with special characters: !@#$%^&*()\"}},\n    \"expected_output\": \"# Special Characters\\n\\n# This is a title with special characters: !@#$%^&*()\",\n    \"test_aspect\": \"Testing Markdown report generation with special characters in content.\"\n  }\n}\n```"}
{"index": 18891, "preference": "functionality", "prompt": "You are tasked with implementing a custom Gaussian Distribution Network (GDN) using PyTorch. The GDN will be used to model a Gaussian distribution with a given mean and standard deviation. You are provided with a skeleton code that imports the necessary modules and initializes the parameters using a utility function. Your task is to complete the implementation of the GDN class by defining the forward method to compute the probability density function (PDF) of the Gaussian distribution.\n\nYou are given the following code snippet as a starting point:\n```python\nimport torch\nimport torch.nn as nn\nfrom distributions_tor import GaussianDistributionNetwork\nfrom utils_tor import init_param_openaibaselines\n\nclass GaussianDistributionNetwork(nn.Module):\n    def __init__(self, input_dim, output_dim):\n        super(GaussianDistributionNetwork, self).__init__()\n        self.mean = nn.Linear(input_dim, output_dim)\n        self.log_std = nn.Linear(input_dim, output_dim)\n        init_param_openaibaselines(self)\n\n    def forward(self, x):\n        # Your implementation here\n        pass\n```\n\nYour task is to complete the `forward` method to compute the PDF of the Gaussian distribution using the mean and log standard deviation parameters. The PDF of a Gaussian distribution with mean μ and standard deviation σ is given by:\n\\[ f(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right) \\]\n\nYou should implement the PDF computation using the provided mean and log standard deviation parameters.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[0.0]]\n    },\n    \"expected_output\": [[0.3989422804014337]], \n    \"test_aspect\": \"Basic functionality: Test with zero mean and unit variance.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[1.0]]\n    },\n    \"expected_output\": [[0.24197072451914337]], \n    \"test_aspect\": \"Basic functionality: Test with zero mean and unit variance.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[0.0]],\n      \"mean\": [[0.0]],\n      \"log_std\": [[0.0]] \n    },\n    \"expected_output\": [[0.3989422804014337]], \n    \"test_aspect\": \"Check PDF at the mean for zero mean and unit variance.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[2.0]],\n      \"mean\": [[0.0]],\n      \"log_std\": [[0.6931471805599453]] \n    },\n    \"expected_output\": [[0.1767766952966369]], \n    \"test_aspect\": \"Test with mean 0 and std deviation of 2.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[-1.0]],\n      \"mean\": [[0.0]],\n      \"log_std\": [[1.0]] \n    },\n    \"expected_output\": [[0.24197072451914337]], \n    \"test_aspect\": \"Test with negative input, mean 0 and std deviation of e^1.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[0.0]],\n      \"mean\": [[1.0]],\n      \"log_std\": [[0.0]] \n    },\n    \"expected_output\": [[0.24197072451914337]], \n    \"test_aspect\": \"Test with mean 1 and unit variance.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[10.0]],\n      \"mean\": [[0.0]],\n      \"log_std\": [[3.0]] \n    },\n    \"expected_output\": [[0.00013383022576488537]], \n    \"test_aspect\": \"Test with high input far from mean.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 2,\n      \"x\": [[0.0]],\n      \"mean\": [[0.0], [1.0]],\n      \"log_std\": [[0.0], [0.0]] \n    },\n    \"expected_output\": [[0.3989422804014337], [0.24197072451914337]], \n    \"test_aspect\": \"Test with multiple outputs.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[0.0]],\n      \"mean\": [[0.0]],\n      \"log_std\": [[-2.0]] \n    },\n    \"expected_output\": [[0.039894228040143336]], \n    \"test_aspect\": \"Test with low standard deviation.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"input_dim\": 1,\n      \"output_dim\": 1,\n      \"x\": [[3.0]],\n      \"mean\": [[2.0]],\n      \"log_std\": [[2.0]] \n    },\n    \"expected_output\": [[0.1767766952966369]], \n    \"test_aspect\": \"Test with positive mean and higher standard deviation.\"\n  }\n}\n```"}
{"index": 4534, "preference": "functionality", "prompt": "You are tasked with implementing a custom widget in a Qt application. The widget should be a tool window with specific properties set using the Qt framework. The properties include not forcing focus changes upon showing the window and having no decorations.\n\nYour task is to write a C++ class that inherits from QWidget and sets the required properties for the widget using the Qt framework.\n\nYour class should be named CustomToolWidget and should inherit from the QWidget class. It should have a constructor that takes a parent QWidget pointer as a parameter.\n\nThe constructor should create the widget with the specified properties: it should be a tool window that does not force focus changes upon showing and has no decorations.\n\nYour implementation should use the Qt framework's flags and functions to achieve the desired properties.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Create CustomToolWidget with a valid parent QWidget\",\n    \"expected_output\": \"Widget created successfully with no decorations and tool window properties\",\n    \"test_aspect\": \"Verify that the widget can be instantiated correctly\"\n  },\n  \"test_case2\": {\n    \"input\": \"Show the CustomToolWidget after creation\",\n    \"expected_output\": \"The widget is displayed without forcing focus changes\",\n    \"test_aspect\": \"Validate that showing the widget does not disrupt focus on other windows\"\n  },\n  \"test_case3\": {\n    \"input\": \"Check the window flags of CustomToolWidget\",\n    \"expected_output\": \"Window flags should include Qt::Tool and Qt::FramelessWindowHint\",\n    \"test_aspect\": \"Ensure that the widget has the correct properties set using Qt flags\"\n  },\n  \"test_case4\": {\n    \"input\": \"Create CustomToolWidget with nullptr as parent\",\n    \"expected_output\": \"Widget created successfully without a parent\",\n    \"test_aspect\": \"Verify that the widget can be created even with no parent\"\n  },\n  \"test_case5\": {\n    \"input\": \"Instantiate CustomToolWidget multiple times\",\n    \"expected_output\": \"All instances created successfully with defined properties\",\n    \"test_aspect\": \"Check that multiple instances do not interfere with each other\"\n  },\n  \"test_case6\": {\n    \"input\": \"Hide the CustomToolWidget after showing it\",\n    \"expected_output\": \"The widget should be hidden without errors\",\n    \"test_aspect\": \"Ensure that hiding the widget does not cause any stability issues\"\n  },\n  \"test_case7\": {\n    \"input\": \"Set a title for the CustomToolWidget\",\n    \"expected_output\": \"Title should be set but should not affect the no decoration property\",\n    \"test_aspect\": \"Check if setting a title works without adding window decorations\"\n  },\n  \"test_case8\": {\n    \"input\": \"Resize the CustomToolWidget\",\n    \"expected_output\": \"Widget resizing should occur without errors\",\n    \"test_aspect\": \"Test stability during resizing operations\"\n  },\n  \"test_case9\": {\n    \"input\": \"Minimize the CustomToolWidget\",\n    \"expected_output\": \"The widget minimizes correctly without focus issues\",\n    \"test_aspect\": \"Validate that minimizing the tool window works properly\"\n  },\n  \"test_case10\": {\n    \"input\": \"Close the CustomToolWidget\",\n    \"expected_output\": \"Widget closes without any exceptions or errors\",\n    \"test_aspect\": \"Ensure proper cleanup and stability upon closing the widget\"\n  }\n}\n```"}
{"index": 34259, "preference": "functionality", "prompt": "You are tasked with creating a Python function that validates a given phone number based on certain criteria. The phone number is represented as a string and must adhere to the following rules:\n1. The phone number must consist of only digits (0-9) and may contain optional hyphens (-) and parentheses ().\n2. If the phone number contains optional hyphens or parentheses, they must be placed correctly according to the standard phone number format.\n3. The phone number must have a minimum length of 10 characters and a maximum length of 14 characters, including optional hyphens and parentheses.\n\nYou need to implement a function `validate_phone_number(phone_number: str) -> bool` that takes a string `phone_number` as input and returns `True` if the phone number is valid based on the given criteria, and `False` otherwise.\n\nExample:\n```python\nvalidate_phone_number(\"1234567890\")  # Output: True\nvalidate_phone_number(\"123-456-7890\")  # Output: True\nvalidate_phone_number(\"(123) 456-7890\")  # Output: True\nvalidate_phone_number(\"123-456-78901234\")  # Output: False\nvalidate_phone_number(\"(123 456-7890\")  # Output: False\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"1234567890\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid phone number with exactly 10 digits.\"\n  },\n  \"test_case2\": {\n    \"input\": \"123-456-7890\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid phone number with hyphens.\"\n  },\n  \"test_case3\": {\n    \"input\": \"(123) 456-7890\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid phone number with parentheses and space.\"\n  },\n  \"test_case4\": {\n    \"input\": \"12345678901234\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid phone number: exceeds maximum length of 14 characters.\"\n  },\n  \"test_case5\": {\n    \"input\": \"(123 456-7890\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid phone number: unbalanced parentheses.\"\n  },\n  \"test_case6\": {\n    \"input\": \"123456789\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid phone number: fewer than 10 digits.\"\n  },\n  \"test_case7\": {\n    \"input\": \"123-456-78901\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid phone number: 11 characters including hyphen.\"\n  },\n  \"test_case8\": {\n    \"input\": \"123-456-78a0\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid phone number: contains non-digit character.\"\n  },\n  \"test_case9\": {\n    \"input\": \"123-45-67890\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid phone number: incorrect placement of hyphens.\"\n  },\n  \"test_case10\": {\n    \"input\": \"(123)-456-7890\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid phone number: correct placement of parentheses and hyphen.\"\n  }\n}\n```"}
{"index": 21765, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes Jewish dates and performs error handling for invalid dates. The function should take a string representing a Jewish date in the format \"DD/MM/YYYY\" and return the corresponding JewishDate object. If the input date is invalid, the function should raise a custom InvalidDateError or JewishDateError with an appropriate error message.\n\nCreate a function `process_jewish_date(date_str)` that accomplishes the following:\n- Takes a string `date_str` representing a Jewish date in the format \"DD/MM/YYYY\".\n- Uses the `JewishDate` class from the `jewish.date` module to create a JewishDate object for the input date.\n- If the input date is invalid (e.g., non-existent date, out of range), raises a custom `InvalidDateError` with the message \"Invalid Jewish date\".\n- If there is any other error during the processing, raises a `JewishDateError` with the message \"Error processing Jewish date\".\n\nNote: You do not need to import any modules or define the custom error classes. Assume that the `JewishDate` class and the custom error classes are already defined and available for use.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"29/02/5780\",\n    \"expected_output\": \"JewishDate object for 29th of Adar 5780\",\n    \"test_aspect\": \"Valid Jewish date (leap year)\"\n  },\n  \"test_case2\": {\n    \"input\": \"01/01/5781\",\n    \"expected_output\": \"JewishDate object for 1st of Tishrei 5781\",\n    \"test_aspect\": \"Valid Jewish date (Rosh Hashanah)\"\n  },\n  \"test_case3\": {\n    \"input\": \"31/12/5781\",\n    \"expected_output\": \"InvalidDateError: Invalid Jewish date\",\n    \"test_aspect\": \"Invalid day for the month\"\n  },\n  \"test_case4\": {\n    \"input\": \"15/07/5782\",\n    \"expected_output\": \"JewishDate object for 15th of Av 5782\",\n    \"test_aspect\": \"Valid Jewish date (mid-month)\"\n  },\n  \"test_case5\": {\n    \"input\": \"15/13/5782\",\n    \"expected_output\": \"InvalidDateError: Invalid Jewish date\",\n    \"test_aspect\": \"Invalid month (out of range)\"\n  },\n  \"test_case6\": {\n    \"input\": \"00/01/5782\",\n    \"expected_output\": \"InvalidDateError: Invalid Jewish date\",\n    \"test_aspect\": \"Invalid day (zero)\"\n  },\n  \"test_case7\": {\n    \"input\": \"01/01/0000\",\n    \"expected_output\": \"InvalidDateError: Invalid Jewish date\",\n    \"test_aspect\": \"Invalid year (out of valid range)\"\n  },\n  \"test_case8\": {\n    \"input\": \"15/05/5781\",\n    \"expected_output\": \"JewishDate object for 15th of Iyar 5781\",\n    \"test_aspect\": \"Valid Jewish date (mid-month)\"\n  },\n  \"test_case9\": {\n    \"input\": \"invalid_date_string\",\n    \"expected_output\": \"JewishDateError: Error processing Jewish date\",\n    \"test_aspect\": \"Invalid format (non-date string)\"\n  },\n  \"test_case10\": {\n    \"input\": \"25/12/5781\",\n    \"expected_output\": \"InvalidDateError: Invalid Jewish date\",\n    \"test_aspect\": \"Invalid date (non-existent in Jewish calendar)\"\n  }\n}\n```"}
{"index": 4528, "preference": "functionality", "prompt": "You are tasked with implementing a neural network layer that performs a forward pass. The layer has a weight matrix `W` and a bias vector `b`. The forward pass involves computing the output of the layer given an input `x` using the formula: `output = W * x + b`, where `*` denotes matrix multiplication.\n\nYou need to complete the `forward` method in the given Python class `NeuralNetworkLayer` to perform the forward pass. The method takes an input vector `x` and should return the output vector computed using the formula mentioned above.\n\n```python\nclass NeuralNetworkLayer:\n    def __init__(self, W, b):\n        self.W = W  # Weight matrix\n        self.b = b  # Bias vector\n\n    def forward(self, x):\n        # Your implementation here\n```\n\nYour task is to complete the `forward` method to perform the forward pass and return the output vector.\n\nFor example, given `W = [[1, 2], [3, 4]]`, `b = [1, 1]`, and `x = [2, 3]`, the expected output would be `[12, 17]` calculated as follows:\n```\noutput[0] = W[0][0]*x[0] + W[0][1]*x[1] + b[0] = 1*2 + 2*3 + 1 = 12\noutput[1] = W[1][0]*x[0] + W[1][1]*x[1] + b[1] = 3*2 + 4*3 + 1 = 17\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"W\": [[1, 2], [3, 4]],\n      \"b\": [1, 1],\n      \"x\": [2, 3]\n    },\n    \"expected_output\": [12, 17],\n    \"test_aspect\": \"Basic functionality with typical inputs\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"W\": [[0, 0], [0, 0]],\n      \"b\": [0, 0],\n      \"x\": [1, 1]\n    },\n    \"expected_output\": [0, 0],\n    \"test_aspect\": \"Test with zero weights and biases\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"W\": [[1, 1], [1, 1]],\n      \"b\": [1, 1],\n      \"x\": [1, 1]\n    },\n    \"expected_output\": [3, 3],\n    \"test_aspect\": \"Same weights and biases, simple input\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"W\": [[1, -1], [2, -2]],\n      \"b\": [1, -1],\n      \"x\": [1, 1]\n    },\n    \"expected_output\": [1, 1],\n    \"test_aspect\": \"Test with positive and negative weights\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"W\": [[1, 2, 3], [4, 5, 6]],\n      \"b\": [1, 1],\n      \"x\": [1, 1, 1]\n    },\n    \"expected_output\": [7, 22],\n    \"test_aspect\": \"Test with 3D input and corresponding weights\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"W\": [[3, 2], [1, 4]],\n      \"b\": [0, 0],\n      \"x\": [0, 0]\n    },\n    \"expected_output\": [0, 0],\n    \"test_aspect\": \"Test with zero inputs\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"W\": [[1, 2], [3, 4]],\n      \"b\": [1, 1],\n      \"x\": [-1, -1]\n    },\n    \"expected_output\": [-5, -9],\n    \"test_aspect\": \"Test with negative input values\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"W\": [[10, 20], [30, 40]],\n      \"b\": [5, 5],\n      \"x\": [1, 1]\n    },\n    \"expected_output\": [35, 75],\n    \"test_aspect\": \"Test with large weights\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"W\": [[1]],\n      \"b\": [0],\n      \"x\": [1]\n    },\n    \"expected_output\": [1],\n    \"test_aspect\": \"Test with single element input\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"W\": [[2, 0], [0, 2]],\n      \"b\": [1, 1],\n      \"x\": [2, 3]\n    },\n    \"expected_output\": [5, 7],\n    \"test_aspect\": \"Test with diagonal weights\"\n  }\n}\n```"}
{"index": 14021, "preference": "functionality", "prompt": "You are tasked with implementing a file validation function that checks whether a given file name corresponds to a valid image file format. The valid image file formats are limited to 'png' and 'jpg'. Your function should return True if the file format is valid, and False otherwise.\n\nFunction signature:\n```python\ndef is_valid_image_file(file_name: str) -> bool:\n    pass\n```\n\nFor example, given the file name \"image.png\", the function should return True, while for the file name \"photo.gif\", the function should return False.\n\nNote: The file name can be assumed to be in lowercase.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"image.png\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid image file with png format\"\n  },\n  \"test_case2\": {\n    \"input\": \"photo.jpg\",\n    \"expected_output\": true,\n    \"test_aspect\": \"Valid image file with jpg format\"\n  },\n  \"test_case3\": {\n    \"input\": \"document.pdf\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid file type that is not a valid image format\"\n  },\n  \"test_case4\": {\n    \"input\": \"picture.gif\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid file type that is not a valid image format\"\n  },\n  \"test_case5\": {\n    \"input\": \"image.JPG\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid input case: file name is not in lowercase\"\n  },\n  \"test_case6\": {\n    \"input\": \"photo.PNG\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid input case: file name is not in lowercase\"\n  },\n  \"test_case7\": {\n    \"input\": \"file_without_extension\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid case: no file extension provided\"\n  },\n  \"test_case8\": {\n    \"input\": \".hiddenfile\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid case: file name starts with a dot and has no valid extension\"\n  },\n  \"test_case9\": {\n    \"input\": \"\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Edge case: empty file name input\"\n  },\n  \"test_case10\": {\n    \"input\": \"image.jpeg\",\n    \"expected_output\": false,\n    \"test_aspect\": \"Invalid file type that is not a valid image format\"\n  }\n}\n```"}
{"index": 37006, "preference": "functionality", "prompt": "You are tasked with creating a Python test case for an API testing framework using the pytest library. The framework utilizes the Screenplay Pattern, a design pattern for writing high-level acceptance tests in a human-readable format. The provided code snippet is a part of the test setup using the pytest framework and the Screenplay Pattern.\n\nYour task is to implement a test case for an API tester using the provided fixture and mock objects. The test case should validate the functionality of the API tester by simulating a scenario and asserting the expected behavior.\n\nYou are required to write a test case that verifies the API tester's ability to authenticate with two-factor authentication (2FA) and browse the web. The test case should utilize the provided fixture `APITester` and the mock objects `AuthenticateWith2FA_Mocked` and `BrowseTheWeb_Mocked` to simulate the behavior of the API tester.\n\nYour test case should include the following steps:\n1. Simulate the authentication process with 2FA using the mocked object `AuthenticateWith2FA_Mocked`.\n2. Simulate browsing the web using the mocked object `BrowseTheWeb_Mocked`.\n3. Assert that the API tester's actions and interactions with the mocked objects are as expected.\n\nWrite a test case function named `test_api_tester_functionality` that utilizes the `APITester` fixture and the provided mock objects to validate the API tester's functionality.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"Valid credentials for 2FA authentication\",\n    \"expected_output\": \"Authentication successful\",\n    \"test_aspect\": \"Verify successful 2FA authentication\"\n  },\n  \"test_case2\": {\n    \"input\": \"Invalid credentials for 2FA authentication\",\n    \"expected_output\": \"Authentication failed\",\n    \"test_aspect\": \"Verify handling of invalid 2FA authentication\"\n  },\n  \"test_case3\": {\n    \"input\": \"Valid credentials for 2FA and valid browsing request\",\n    \"expected_output\": \"Browsing successful\",\n    \"test_aspect\": \"Check successful web browsing after 2FA\"\n  },\n  \"test_case4\": {\n    \"input\": \"Successful 2FA followed by invalid browsing request\",\n    \"expected_output\": \"Browsing failed due to invalid request\",\n    \"test_aspect\": \"Verify handling of invalid browsing requests after successful authentication\"\n  },\n  \"test_case5\": {\n    \"input\": \"No credentials provided for 2FA\",\n    \"expected_output\": \"Authentication failed\",\n    \"test_aspect\": \"Check response for missing 2FA credentials\"\n  },\n  \"test_case6\": {\n    \"input\": \"Simulate timeout during 2FA authentication\",\n    \"expected_output\": \"Authentication timeout\",\n    \"test_aspect\": \"Verify handling of timeout during authentication\"\n  },\n  \"test_case7\": {\n    \"input\": \"Simulate timeout during browsing request\",\n    \"expected_output\": \"Browsing timeout\",\n    \"test_aspect\": \"Verify handling of timeout during browsing\"\n  },\n  \"test_case8\": {\n    \"input\": \"Valid 2FA followed by an empty browsing request\",\n    \"expected_output\": \"Invalid browsing request\",\n    \"test_aspect\": \"Check handling of empty requests after authentication\"\n  },\n  \"test_case9\": {\n    \"input\": \"Valid 2FA and valid browsing request that returns no results\",\n    \"expected_output\": \"No results found\",\n    \"test_aspect\": \"Ensure correct handling of browsing with no results\"\n  },\n  \"test_case10\": {\n    \"input\": \"Simulate successful 2FA and verify interaction with mock objects\",\n    \"expected_output\": \"API tester interacted correctly with AuthenticateWith2FA_Mocked and BrowseTheWeb_Mocked\",\n    \"test_aspect\": \"Check interaction between API tester and mocked objects\"\n  }\n}\n```"}
{"index": 20003, "preference": "functionality", "prompt": "You are tasked with creating a Python function that processes data from a file and extracts specific parameters for further analysis. The file contains information about a forecast, and the function needs to extract certain parameters related to power cuts and Levy distributions. The parameters are stored in a specific format within the file, and the function should extract these parameters and organize them into separate lists for further processing.\n\nWrite a Python function called `extract_levy_parameters` that takes three input parameters:\n1. `root_dir` (string) - The root directory where the file is located.\n2. `res` (string) - The resolution or specific subdirectory where the file is stored.\n3. `forecast_type` (string) - The type of forecast for which the parameters need to be extracted.\n\nThe function should load the object from the file located at `%s/%s/10wt/forecast_%s_2state_powercut_levy.pl` (where `%s` is a placeholder for `root_dir`, `res`, and `forecast_type` respectively). It should then extract specific parameters related to Levy distributions and power cuts from the loaded object and organize them into separate lists. The extracted parameters should be as follows:\n- `levy_sigma1` (list) - A list containing the values of `j[2]` for each `j` in `params.hop_parameters[0]`.\n- `levy_alpha1` (list) - A list containing the values of `j[0]` for each `j` in `params.hop_parameters[0]`.\n- `levy_sigma2` (list) - A list containing the values of `j[2]` for each `j` in `params.hop_parameters[1]`.\n- `levy_alpha2` (list) - A list containing the values of `j[0]` for each `j` in `params.hop_parameters[1]`.\n\nThe function should then return these four lists as a tuple in the following order: `(levy_sigma1, levy_alpha1, levy_sigma2, levy_alpha2)`.\n\nAssume that the necessary file reading and object loading functions are available and that the file exists in the specified location.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution1\",\n      \"forecast_type\": \"typeA\"\n    },\n    \"expected_output\": ([\"0.5\", \"0.6\"], [\"1.2\", \"1.3\"], [\"0.7\", \"0.8\"], [\"1.4\", \"1.5\"]),\n    \"test_aspect\": \"Standard extraction of parameters for a valid file\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution2\",\n      \"forecast_type\": \"typeB\"\n    },\n    \"expected_output\": ([\"0.3\"], [\"1.1\"], [\"0.4\"], [\"1.2\"]),\n    \"test_aspect\": \"Extraction with a single parameter in each category\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution1\",\n      \"forecast_type\": \"typeC\"\n    },\n    \"expected_output\": ([], [], [], []),\n    \"test_aspect\": \"Handling an empty dataset where parameters are not present\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"root_dir\": \"invalid/path\",\n      \"res\": \"resolution1\",\n      \"forecast_type\": \"typeA\"\n    },\n    \"expected_output\": \"FileNotFoundError\",\n    \"test_aspect\": \"File not found scenario\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution1\",\n      \"forecast_type\": \"\"\n    },\n    \"expected_output\": ([\"0.5\"], [\"1.2\"], [\"0.7\"], [\"1.4\"]),\n    \"test_aspect\": \"Valid extraction with an empty forecast type\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution1\",\n      \"forecast_type\": \"typeA\"\n    },\n    \"expected_output\": ([\"1.0\"], [\"2.0\"], [\"1.5\"], [\"2.5\"]),\n    \"test_aspect\": \"Standard extraction with known parameters\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution_invalid\",\n      \"forecast_type\": \"typeA\"\n    },\n    \"expected_output\": \"FileNotFoundError\",\n    \"test_aspect\": \"Invalid resolution directory\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution1\",\n      \"forecast_type\": \"typeA\"\n    },\n    \"expected_output\": ([\"0.9\", \"1.0\"], [\"1.8\", \"1.9\"], [\"0.6\", \"0.7\"], [\"1.5\", \"1.6\"]),\n    \"test_aspect\": \"Extraction with multiple parameters\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution1\",\n      \"forecast_type\": \"typeD\"\n    },\n    \"expected_output\": ([], [], [], []),\n    \"test_aspect\": \"No parameters available for a different forecast type\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"root_dir\": \"path/to/data\",\n      \"res\": \"resolution1\",\n      \"forecast_type\": \"typeA\"\n    },\n    \"expected_output\": ([\"0.2\"], [\"1.4\"], [\"0.5\"], [\"1.6\"]),\n    \"test_aspect\": \"Test with minimal data extraction\"\n  }\n}\n```"}
{"index": 26192, "preference": "functionality", "prompt": "You are tasked with creating a Discord bot command that processes user messages and interacts with a JSON configuration file. The bot should delete messages that start with a specific character and repost them in a designated channel, based on the server's configuration.\n\nYou are given a Python code snippet that partially implements this functionality. The snippet reads a message, checks if the author is a bot, loads configuration data from a JSON file, and processes messages in a specific channel. Your task is to complete the bot command logic and ensure that messages meeting the specified criteria are handled correctly.\n\nYour task is to implement the following function:\n```python\nasync def process_message(message, channel):\n    # Your code here\n```\n\nThe function should perform the following steps:\n1. Extract the content of the message, excluding the first character.\n2. Check if the message author is a bot. If so, return without further processing.\n3. Load the configuration data from the file \"./configi.json\" using the `json` module.\n4. Check if the message's channel ID matches the \"kanalpropozycje\" value in the configuration data.\n5. If the message starts with \"%\", delete the original message and send a new message to the specified channel in the format: \"**Komentarz {message.author}:** {content}\".\n\nAssume that the `message` parameter is a Discord message object and the `channel` parameter is the Discord channel object where the new message should be sent.\n\nImplement the `process_message` function to achieve the described behavior.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%Hello there!\",\n        \"author\": {\"bot\": false},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"delete_message\",\n      \"content\": \"**Komentarz User: Hello there!**\"\n    },\n    \"test_aspect\": \"Basic functionality: valid message processed correctly.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%Another test.\",\n        \"author\": {\"bot\": false},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"delete_message\",\n      \"content\": \"**Komentarz User: Another test.**\"\n    },\n    \"test_aspect\": \"Ensure message is deleted and reposted correctly.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%Bot testing.\",\n        \"author\": {\"bot\": true},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"ignore\",\n      \"content\": \"\"\n    },\n    \"test_aspect\": \"Verify bot messages are ignored properly.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%Another bot message.\",\n        \"author\": {\"bot\": true},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"ignore\",\n      \"content\": \"\"\n    },\n    \"test_aspect\": \"Ensure bot messages are not processed or deleted.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"No special character\",\n        \"author\": {\"bot\": false},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"ignore\",\n      \"content\": \"\"\n    },\n    \"test_aspect\": \"Messages without the specific character are ignored.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%\",\n        \"author\": {\"bot\": false},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"delete_message\",\n      \"content\": \"**Komentarz User: **\"\n    },\n    \"test_aspect\": \"Handling of edge case where message has only the special character.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%Valid message\",\n        \"author\": {\"bot\": false},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789013}\n    },\n    \"expected_output\": {\n      \"action\": \"ignore\",\n      \"content\": \"\"\n    },\n    \"test_aspect\": \"Channel ID mismatch, message should not be processed.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%Test for config\",\n        \"author\": {\"bot\": false},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"delete_message\",\n      \"content\": \"**Komentarz User: Test for config**\"\n    },\n    \"test_aspect\": \"Ensure message is processed correctly with valid channel ID.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%Test with multiple spaces    \",\n        \"author\": {\"bot\": false},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"delete_message\",\n      \"content\": \"**Komentarz User: Test with multiple spaces    **\"\n    },\n    \"test_aspect\": \"Check if message formatting maintains spacing.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"message\": {\n        \"content\": \"%Test new line\\nNext line\",\n        \"author\": {\"bot\": false},\n        \"channel_id\": 123456\n      },\n      \"channel\": {\"id\": 789012}\n    },\n    \"expected_output\": {\n      \"action\": \"delete_message\",\n      \"content\": \"**Komentarz User: Test new line\\nNext line**\"\n    },\n    \"test_aspect\": \"Verify handling of new line characters in message content.\"\n  }\n}\n```"}
{"index": 27594, "preference": "functionality", "prompt": "You are tasked with implementing a Python function that performs a binary search on a sorted list of integers and measures the time taken to execute the search. Your function should take in the sorted list and the number to be searched for as input, and return the time taken to perform the binary search.\n\nYour task is to implement the `busca_binaria_it` function, which performs an iterative binary search on the given list to find the specified number. Additionally, you need to measure the time taken to execute the binary search and return this time as the output of the function.\n\nThe provided code snippet includes a timing mechanism to measure the execution time of the `busca_binaria_it` function and prints the result. You need to complete the implementation of the `busca_binaria_it` function and ensure that it returns the time taken for the binary search.\n\nThe `criaLista` function is not provided, but it is assumed to create and return a sorted list of integers for testing the binary search function.\n\nYour task is to complete the implementation of the `busca_binaria_it` function and ensure that it returns the time taken to perform the binary search.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"sorted_list\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"target\": 5\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": true\n    },\n    \"test_aspect\": \"Standard case where the target is in the middle of the list.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"sorted_list\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"target\": 1\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": true\n    },\n    \"test_aspect\": \"Edge case where the target is the first element of the list.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"sorted_list\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"target\": 10\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": true\n    },\n    \"test_aspect\": \"Edge case where the target is the last element of the list.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"sorted_list\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"target\": 0\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": false\n    },\n    \"test_aspect\": \"Case where the target is less than the smallest element in the list.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"sorted_list\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"target\": 11\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": false\n    },\n    \"test_aspect\": \"Case where the target is greater than the largest element in the list.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"sorted_list\": [],\n      \"target\": 5\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": false\n    },\n    \"test_aspect\": \"Case where the list is empty.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"sorted_list\": [1],\n      \"target\": 1\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": true\n    },\n    \"test_aspect\": \"Case where the list contains only one element which is the target.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"sorted_list\": [1],\n      \"target\": 2\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": false\n    },\n    \"test_aspect\": \"Case where the list contains only one element which is not the target.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"sorted_list\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      \"target\": 7\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": true\n    },\n    \"test_aspect\": \"Standard case where the target is in the second half of the list.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"sorted_list\": [10, 20, 30, 40, 50],\n      \"target\": 25\n    },\n    \"expected_output\": {\n      \"time_taken\": \"float\",\n      \"found\": false\n    },\n    \"test_aspect\": \"Case where the target is not present in the list and is between two elements.\"\n  }\n}\n```"}

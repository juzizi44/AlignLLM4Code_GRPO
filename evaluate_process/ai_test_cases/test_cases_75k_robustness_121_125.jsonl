{"index": 35038, "preference": "robustness", "code_instruction": "You are given a function `find_max` that takes a list of integers as input and is intended to return the maximum value in the list. However, the function seems to be incomplete, as the code snippet provided is only a part of the function. Your task is to complete the `find_max` function so that it correctly returns the maximum value in the input list. You should assume that the input list will always contain at least one integer.\n\nThe provided code snippet is as follows:\n```python\ndef find_max(nums):\n    if answer:\n        return answer\n    \n    return 0\n```\n\nYour task is to complete the `find_max` function using the provided code snippet as a starting point.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": [1],\n    \"expected_output\": 1,\n    \"test_aspect\": \"Single element in the list\"\n  },\n  \"test_case2\": {\n    \"input\": [-1],\n    \"expected_output\": -1,\n    \"test_aspect\": \"Single negative element in the list\"\n  },\n  \"test_case3\": {\n    \"input\": [0],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Single zero in the list\"\n  },\n  \"test_case4\": {\n    \"input\": [1, 2, 3, 4, 5],\n    \"expected_output\": 5,\n    \"test_aspect\": \"Multiple elements, positive integers\"\n  },\n  \"test_case5\": {\n    \"input\": [-5, -4, -3, -2, -1],\n    \"expected_output\": -1,\n    \"test_aspect\": \"Multiple elements, negative integers\"\n  },\n  \"test_case6\": {\n    \"input\": [5, 4, 3, 2, 1],\n    \"expected_output\": 5,\n    \"test_aspect\": \"Multiple elements, descending order\"\n  },\n  \"test_case7\": {\n    \"input\": [1, 3, 2, 5, 4],\n    \"expected_output\": 5,\n    \"test_aspect\": \"Multiple elements, random order\"\n  },\n  \"test_case8\": {\n    \"input\": [2, 2, 2, 2],\n    \"expected_output\": 2,\n    \"test_aspect\": \"All elements are the same\"\n  },\n  \"test_case9\": {\n    \"input\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"expected_output\": 10,\n    \"test_aspect\": \"Maximum boundary condition, large list of positive integers\"\n  },\n  \"test_case10\": {\n    \"input\": [-10, -20, 0, -5],\n    \"expected_output\": 0,\n    \"test_aspect\": \"Mixed positive and negative integers with zero\"\n  }\n}\n```"}
{"index": 11570, "preference": "robustness", "code_instruction": "You are tasked with implementing a function that checks whether a given stack is empty or not. The stack is represented as a list in Python. Your task is to write a function `is_stack_empty` that takes a stack (list) as input and returns `True` if the stack is empty, and `False` otherwise. You should not use any built-in stack methods or functions to solve this problem.\n\nFunction Signature: \n```python\ndef is_stack_empty(stk: List[int]) -> bool:\n    pass\n```\n\nExample:\n```\nInput:\nstk = [1, 2, 3]\nOutput:\nFalse\n\nInput:\nstk = []\nOutput:\nTrue\n```", "test_cases": "{\n  \"test_case1\": {\n    \"input\": \"[]\",\n    \"expected_output\": \"True\",\n    \"test_aspect\": \"Testing with an empty stack\"\n  },\n  \"test_case2\": {\n    \"input\": \"[1]\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Testing with a stack having one element\"\n  },\n  \"test_case3\": {\n    \"input\": \"[0]\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Testing with a stack having zero as the only element\"\n  },\n  \"test_case4\": {\n    \"input\": \"[1, 2, 3]\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Testing with a stack having multiple elements\"\n  },\n  \"test_case5\": {\n    \"input\": \"[None]\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Testing with a stack having None as the only element\"\n  },\n  \"test_case6\": {\n    \"input\": \"[-1, -2, -3]\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Testing with a stack having negative numbers\"\n  },\n  \"test_case7\": {\n    \"input\": \"[1, 1, 1]\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Testing with a stack having duplicate elements\"\n  },\n  \"test_case8\": {\n    \"input\": \"[1, 2, 3, 4, 5]\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Testing with a stack having five elements\"\n  },\n  \"test_case9\": {\n    \"input\": \"[]\",\n    \"expected_output\": \"True\",\n    \"test_aspect\": \"Testing with a stack that is re-initialized to empty\"\n  },\n  \"test_case10\": {\n    \"input\": \"[\\\"a\\\", \\\"b\\\", \\\"c\\\"]\",\n    \"expected_output\": \"False\",\n    \"test_aspect\": \"Testing with a stack containing string elements\"\n  }\n}"}
{"index": 280, "preference": "robustness", "code_instruction": "You are tasked with implementing a Python class that represents a graph and provides a method to flip pairs of nodes. The class should have the following methods:\n\n1. `__init__(self, nodes: List[int], edges: List[Tuple[int, int]])`: A constructor that initializes the graph with a list of nodes and a list of edges represented as tuples of nodes.\n\n2. `flip_pairs(self, pairs: List[Tuple[int, int]]) -> List[Tuple[int, int]]`: A method that takes a list of pairs of nodes and flips their connections in the graph. It returns a list of the flipped pairs.\n\nYour task is to complete the implementation of the `flip_pairs` method in the graph class.\n\nExample:\n```python\ngraph = Graph([1, 2, 3, 4], [(1, 2), (2, 3), (3, 4)])\nflipped_pairs = graph.flip_pairs([(1, 2), (3, 4)])\nprint(flipped_pairs)  # Output: [(2, 1), (4, 3)]\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"nodes\": [],\n      \"edges\": [],\n      \"pairs\": []\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Handles empty graph and empty pairs\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"nodes\": [1],\n      \"edges\": [],\n      \"pairs\": [(1, 1)]\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Handles single node with self-flip\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"nodes\": [1, 2],\n      \"edges\": [(1, 2)],\n      \"pairs\": [(1, 2)]\n    },\n    \"expected_output\": [(2, 1)],\n    \"test_aspect\": \"Handles flip in a simple two-node graph\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"nodes\": [1, 2],\n      \"edges\": [],\n      \"pairs\": [(1, 2)]\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Handles flip of non-connected nodes\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"nodes\": [1, 2, 3],\n      \"edges\": [(1, 2), (2, 3)],\n      \"pairs\": [(1, 3)]\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Handles flip of nodes that are not directly connected\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"nodes\": [1, 2, 3, 4],\n      \"edges\": [(1, 2), (2, 3), (3, 4)],\n      \"pairs\": [(1, 4)]\n    },\n    \"expected_output\": [],\n    \"test_aspect\": \"Handles flip of nodes not present in pairs\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"nodes\": [1, 2, 3],\n      \"edges\": [(1, 2)],\n      \"pairs\": [(1, 2), (2, 3)]\n    },\n    \"expected_output\": [(2, 1)],\n    \"test_aspect\": \"Handles flip with one valid and one invalid pair\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"nodes\": [1, 2, 3, 4, 5],\n      \"edges\": [(1, 2), (2, 3), (3, 4)],\n      \"pairs\": [(1, 5), (2, 3)]\n    },\n    \"expected_output\": [(3, 2)],\n    \"test_aspect\": \"Handles multiple pairs with some valid and some invalid\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"nodes\": [1, 2, 3, 4],\n      \"edges\": [(1, 2), (3, 4)],\n      \"pairs\": [(1, 2), (3, 4)]\n    },\n    \"expected_output\": [(2, 1), (4, 3)],\n    \"test_aspect\": \"Handles flipping pairs in a graph with multiple edges\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"nodes\": [1, 2],\n      \"edges\": [(1, 2)],\n      \"pairs\": [(2, 1), (1, 2)]\n    },\n    \"expected_output\": [(1, 2), (2, 1)],\n    \"test_aspect\": \"Handles flipping pairs where both orders are present\"\n  }\n}\n```"}
{"index": 18951, "preference": "robustness", "code_instruction": "You are tasked with creating a program that simulates a simple asset bundler for a web development project. An asset bundler is a tool that combines multiple files (such as JavaScript or CSS) into a single file for optimized delivery to the client's browser. Your program should take a list of input files, apply specified filters to each file, and then output the bundled content to a specified file.\n\nYour program should support the following features:\n- Accept a list of input files for bundling, along with the type of asset (e.g., JavaScript or CSS).\n- Apply specified filters to each input file. Filters are functions that transform the content of the input file in some way (e.g., minification, compression).\n- Output the bundled content to a specified file.\n\nYour program should be able to handle both JavaScript and CSS assets, and apply the appropriate filters for each type.\n\nWrite a function or class that takes input files, filters, and output file as parameters, and produces the bundled content according to the specified filters.\n\nExample:\n```python\ninput_files = {\n  \"js\": [\"libs/jQuery/dist/jquery.js\", \"app/main.js\"],\n  \"css\": [\"styles/reset.css\", \"styles/main.css\"]\n}\nfilters = {\n  \"js\": [\"uglify\"],\n  \"css\": [\"autoprefixer\", \"cssmin\"]\n}\noutput_files = {\n  \"js\": \"public/js/bundle.js\",\n  \"css\": \"public/css/bundle.css\"\n}\n\nbundle_assets(input_files, filters, output_files)\n```", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [],\n        \"css\": []\n      },\n      \"filters\": {\n        \"js\": [],\n        \"css\": []\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"\",\n      \"css\": \"\"\n    },\n    \"test_aspect\": \"Handles empty input files for both JS and CSS.\"\n  },\n  \"test_case2\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [\"libs/jQuery/dist/jquery.js\"],\n        \"css\": []\n      },\n      \"filters\": {\n        \"js\": [\"uglify\"],\n        \"css\": []\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"uglified_content_of_jquery.js\",\n      \"css\": \"\"\n    },\n    \"test_aspect\": \"Handles a single JS file with a filter and no CSS files.\"\n  },\n  \"test_case3\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [],\n        \"css\": [\"styles/reset.css\"]\n      },\n      \"filters\": {\n        \"js\": [],\n        \"css\": [\"autoprefixer\"]\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"\",\n      \"css\": \"autoprefixed_content_of_reset.css\"\n    },\n    \"test_aspect\": \"Handles a single CSS file with a filter and no JS files.\"\n  },\n  \"test_case4\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [\"libs/jQuery/dist/jquery.js\"],\n        \"css\": [\"styles/reset.css\"]\n      },\n      \"filters\": {\n        \"js\": [\"uglify\"],\n        \"css\": [\"autoprefixer\"]\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"uglified_content_of_jquery.js\",\n      \"css\": \"autoprefixed_content_of_reset.css\"\n    },\n    \"test_aspect\": \"Handles one JS file and one CSS file with respective filters applied.\"\n  },\n  \"test_case5\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [\"libs/jQuery/dist/jquery.js\"],\n        \"css\": [\"styles/reset.css\", \"styles/main.css\"]\n      },\n      \"filters\": {\n        \"js\": [\"uglify\"],\n        \"css\": [\"autoprefixer\", \"cssmin\"]\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"uglified_content_of_jquery.js\",\n      \"css\": \"minified_content_of_main.css\"\n    },\n    \"test_aspect\": \"Handles multiple CSS files with multiple filters and a single JS file.\"\n  },\n  \"test_case6\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [\"libs/jQuery/dist/jquery.js\", \"app/main.js\"],\n        \"css\": []\n      },\n      \"filters\": {\n        \"js\": [\"uglify\"],\n        \"css\": []\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"uglified_content_of_jquery.js, uglified_content_of_main.js\",\n      \"css\": \"\"\n    },\n    \"test_aspect\": \"Handles multiple JS files with a filter and no CSS files.\"\n  },\n  \"test_case7\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [],\n        \"css\": [\"styles/reset.css\", \"styles/main.css\"]\n      },\n      \"filters\": {\n        \"js\": [],\n        \"css\": [\"cssmin\"]\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"\",\n      \"css\": \"minified_content_of_reset.css, minified_content_of_main.css\"\n    },\n    \"test_aspect\": \"Handles multiple CSS files with a filter and no JS files.\"\n  },\n  \"test_case8\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [\"libs/jQuery/dist/jquery.js\"],\n        \"css\": [\"styles/reset.css\"]\n      },\n      \"filters\": {\n        \"js\": [\"non_existing_filter\"],\n        \"css\": [\"autoprefixer\"]\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"uncaptured_error\",\n      \"css\": \"autoprefixed_content_of_reset.css\"\n    },\n    \"test_aspect\": \"Handles graceful failure due to non-existing filter on JS.\"\n  },\n  \"test_case9\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [\"libs/jQuery/dist/jquery.js\"],\n        \"css\": [\"styles/reset.css\", \"styles/main.css\"]\n      },\n      \"filters\": {\n        \"js\": [\"uglify\"],\n        \"css\": [\"cssmin\"]\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"uglified_content_of_jquery.js\",\n      \"css\": \"minified_content_of_reset.css, minified_content_of_main.css\"\n    },\n    \"test_aspect\": \"Handles valid processing for multiple JS and CSS files with filters.\"\n  },\n  \"test_case10\": {\n    \"input\": {\n      \"input_files\": {\n        \"js\": [\"libs/jQuery/dist/jquery.js\", \"app/main.js\"],\n        \"css\": [\"styles/reset.css\", \"styles/main.css\"]\n      },\n      \"filters\": {\n        \"js\": [],\n        \"css\": []\n      },\n      \"output_files\": {\n        \"js\": \"public/js/bundle.js\",\n        \"css\": \"public/css/bundle.css\"\n      }\n    },\n    \"expected_output\": {\n      \"js\": \"content_of_jquery.js, content_of_main.js\",\n      \"css\": \"content_of_reset.css, content_of_main.css\"\n    },\n    \"test_aspect\": \"Handles no filters applied and checks the bundling of all files.\"\n  }\n}\n```"}
{"index": 36993, "preference": "robustness", "code_instruction": "You are tasked with implementing a command-line tool for image processing. The tool should accept various arguments to apply different image processing techniques. Your task is to implement the argument parser for this tool using the `argparse` module in Python.\n\nThe argument parser should support the following command-line arguments:\n1. `--hue`: Accepts a floating-point number representing the hue adjustment for the image. The default value should be 100.\n2. `--blur`: A flag argument that, when present, indicates that a blur effect should be applied to the image.\n3. `--blur_radius`: Accepts a floating-point number representing the radius of the blur effect. The default value should be 10.\n4. `--blur_sigma`: Accepts a floating-point number representing the sigma value for the blur effect. The default value should be 1.\n5. `--gaussianBlur`: A flag argument that, when present, indicates that a Gaussian blur effect should be applied to the image.\n6. `--gaussianBlur_width`: Accepts a floating-point number representing the width of the Gaussian blur effect. The default value should be 5.\n\nYour task is to implement the argument parser using the `argparse` module in Python, ensuring that it supports the specified command-line arguments with their respective data types and default values.", "test_cases": "```json\n{\n  \"test_case1\": {\n    \"input\": \"--hue 0\",\n    \"expected_output\": \"Hue adjusted to 0\",\n    \"test_aspect\": \"Testing minimum boundary value for hue adjustment\"\n  },\n  \"test_case2\": {\n    \"input\": \"--hue 360\",\n    \"expected_output\": \"Hue adjusted to 360\",\n    \"test_aspect\": \"Testing maximum boundary value for hue adjustment\"\n  },\n  \"test_case3\": {\n    \"input\": \"--hue -10\",\n    \"expected_output\": \"Error: hue must be between 0 and 360\",\n    \"test_aspect\": \"Testing negative value for hue adjustment\"\n  },\n  \"test_case4\": {\n    \"input\": \"--hue 370\",\n    \"expected_output\": \"Error: hue must be between 0 and 360\",\n    \"test_aspect\": \"Testing value above maximum for hue adjustment\"\n  },\n  \"test_case5\": {\n    \"input\": \"--blur_radius 0\",\n    \"expected_output\": \"Blur radius set to 0\",\n    \"test_aspect\": \"Testing minimum boundary value for blur radius\"\n  },\n  \"test_case6\": {\n    \"input\": \"--blur_radius 1000\",\n    \"expected_output\": \"Blur radius set to 1000\",\n    \"test_aspect\": \"Testing maximum boundary value for blur radius\"\n  },\n  \"test_case7\": {\n    \"input\": \"--blur_radius -1\",\n    \"expected_output\": \"Error: blur radius must be non-negative\",\n    \"test_aspect\": \"Testing negative value for blur radius\"\n  },\n  \"test_case8\": {\n    \"input\": \"--blur_sigma 0\",\n    \"expected_output\": \"Blur sigma set to 0\",\n    \"test_aspect\": \"Testing minimum boundary value for blur sigma\"\n  },\n  \"test_case9\": {\n    \"input\": \"--blur_sigma 10\",\n    \"expected_output\": \"Blur sigma set to 10\",\n    \"test_aspect\": \"Testing maximum boundary value for blur sigma\"\n  },\n  \"test_case10\": {\n    \"input\": \"--gaussianBlur_width 0\",\n    \"expected_output\": \"Gaussian blur width set to 0\",\n    \"test_aspect\": \"Testing minimum boundary value for Gaussian blur width\"\n  }\n}\n```"}

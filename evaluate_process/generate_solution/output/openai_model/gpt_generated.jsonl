{"index": 36139, "prompt": "You are tasked with creating a Python class that represents a dog breed and its sub-breeds. Your class should allow for the registration of sub-breeds and provide an admin interface for managing these sub-breeds.\n\nCreate a Python class `DogBreed` with the following requirements:\n- The class should have a constructor that takes the name of the breed as a parameter and initializes a list to store its sub-breeds.\n- It should have a method `register_sub_breed` that takes the name of a sub-breed as a parameter and adds it to the list of sub-breeds.\n- The class should also have a method `display_sub_breeds` that prints the list of sub-breeds.\n\nAdditionally, create a class `SubBreedAdmin` that registers the `DogBreed` class and provides an admin interface for managing sub-breeds.\n\nYour task is to implement the `DogBreed` class as described and then register it with the `SubBreedAdmin` class to enable the management of sub-breeds.", "response": "Here's a Python implementation of the `DogBreed` class alongside the `SubBreedAdmin` class that manages sub-breeds. The `DogBreed` class allows the registration of sub-breeds and provides functionality to display them. The `SubBreedAdmin` class handles the administrative interface for managing these sub-breeds.\n\n```python\nclass DogBreed:\n    def __init__(self, breed_name):\n        self.breed_name = breed_name\n        self.sub_breeds = []\n\n    def register_sub_breed(self, sub_breed_name):\n        if sub_breed_name not in self.sub_breeds:\n            self.sub_breeds.append(sub_breed_name)\n            print(f\"Sub-breed '{sub_breed_name}' registered under '{self.breed_name}'.\")\n        else:\n            print(f\"Sub-breed '{sub_breed_name}' is already registered under '{self.breed_name}'.\")\n\n    def display_sub_breeds(self):\n        if self.sub_breeds:\n            print(f\"Sub-breeds of '{self.breed_name}': {', '.join(self.sub_breeds)}\")\n        else:\n            print(f\"There are no sub-breeds registered under '{self.breed_name}'.\")\n\n\nclass SubBreedAdmin:\n    def __init__(self):\n        self.breeds = {}\n\n    def add_dog_breed(self, breed_name):\n        if breed_name not in self.breeds:\n            self.breeds[breed_name] = DogBreed(breed_name)\n            print(f\"Dog breed '{breed_name}' added.\")\n        else:\n            print(f\"Dog breed '{breed_name}' is already registered.\")\n\n    def register_sub_breed(self, breed_name, sub_breed_name):\n        if breed_name in self.breeds:\n            self.breeds[breed_name].register_sub_breed(sub_breed_name)\n        else:\n            print(f\"Dog breed '{breed_name}' does not exist. Please add it first.\")\n\n    def display_all_sub_breeds(self, breed_name):\n        if breed_name in self.breeds:\n            self.breeds[breed_name].display_sub_breeds()\n        else:\n            print(f\"Dog breed '{breed_name}' does not exist.\")\n\n\n# Example usage\nif __name__ == \"__main__\":\n    admin = SubBreedAdmin()\n    \n    # Adding dog breeds\n    admin.add_dog_breed(\"Labrador\")\n    admin.add_dog_breed(\"Beagle\")\n\n    # Registering sub-breeds\n    admin.register_sub_breed(\"Labrador\", \"American\")\n    admin.register_sub_breed(\"Labrador\", \"English\")\n    admin.register_sub_breed(\"Beagle\", \"Pocket\")\n    \n    # Displaying sub-breeds\n    admin.display_all_sub_breeds(\"Labrador\")\n    admin.display_all_sub_breeds(\"Beagle\")\n    admin.display_all_sub_breeds(\"Poodle\")  # Example of a non-existent breed\n```\n\n### Explanation:\n1. **DogBreed Class**:\n   - The constructor initializes the breed name and an empty list for sub-breeds.\n   - `register_sub_breed`: This method adds a sub-breed to the list if it isn't already present, preventing duplicates.\n   - `display_sub_breeds`: This method prints the registered sub-breeds for the breed.\n\n2. **SubBreedAdmin Class**:\n   - This class maintains a dictionary of `DogBreed` instances, allowing for the management of multiple breeds.\n   - `add_dog_breed`: This method adds a new dog breed to the management system.\n   - `register_sub_breed`: This method allows registering a sub-breed under a specific breed.\n   - `display_all_sub_breeds`: This method displays all sub-breeds for a given breed name.\n\n### Example Usage:\nThe example usage in the `__main__` block demonstrates how to add breeds, register sub-breeds, and display them. It also shows handling for cases where a breed does not exist."}
{"index": 1024, "prompt": "You are tasked with implementing a Python function that processes a dictionary and prints specific key-value pairs using a custom color printing utility. The function should extract specific keys from the dictionary and print their corresponding values in a light gray color.\n\nYou are given the following code snippet as a reference:\n\n```python\n        'checkpoint_tag': checkpoint_tag,\n        'arch_tag': arch_tag,\n        'datatype': datatype,\n    }\n    ut.colorprint('[netrun] * ds_tag=%r' % (ds_tag,), 'lightgray')\n    ut.colorprint('[netrun] * arch_tag=%r' % (arch_tag,), 'lightgray')\n    ut.colorprint('[netrun] * extern_ds_tag=%r' % (extern_ds_tag,), 'lightgray')\n    ut.colorprint('[netrun] * checkpoint_tag=%r' % (checkpoint_tag,), 'lightgray')\n    return requests, hyperparams, tags\n```\n\nYour task is to implement the `process_and_print` function that takes a dictionary `data` and a list of keys `keys_to_print`. For each key in `keys_to_print`, the function should print the corresponding key-value pair using the `ut.colorprint` utility with the value printed in light gray. If a key is not present in the dictionary, the function should print \"Key not found\" for that key.\n\nFunction Signature: `def process_and_print(data: dict, keys_to_print: list) -> None:`\n\nExample:\n```python\ndata = {\n    'ds_tag': 'dataset',\n    'arch_tag': 'architecture',\n    'datatype': 'type'\n}\n\nkeys_to_print = ['ds_tag', 'arch_tag', 'extern_ds_tag', 'checkpoint_tag']\n\nprocess_and_print(data, keys_to_print)\n```\n\nExpected Output:\n```\n[netrun] * ds_tag='dataset' (printed in light gray)\n[netrun] * arch_tag='architecture' (printed in light gray)\n[netrun] * extern_ds_tag='Key not found'\n[netrun] * checkpoint_tag='Key not found'\n```", "response": "To implement the `process_and_print` function as specified, we'll create a function that takes a dictionary and a list of keys. For each key, the function will check if it exists in the dictionary and print its value using the `ut.colorprint` utility in light gray. If a key does not exist, it will print \"Key not found\" for that key.\n\nHere's how you can implement this:\n\n```python\n# Assuming `ut` is a module that has been imported and has the colorprint function defined\nimport ut  # Example of how ut might be imported\n\ndef process_and_print(data: dict, keys_to_print: list) -> None:\n    for key in keys_to_print:\n        if key in data:\n            value = data[key]\n            ut.colorprint(f'[netrun] * {key}={value!r}', 'lightgray')\n        else:\n            ut.colorprint(f'[netrun] * {key}=' + 'Key not found', 'lightgray')\n\n# Example usage\nif __name__ == \"__main__\":\n    data = {\n        'ds_tag': 'dataset',\n        'arch_tag': 'architecture',\n        'datatype': 'type'\n    }\n\n    keys_to_print = ['ds_tag', 'arch_tag', 'extern_ds_tag', 'checkpoint_tag']\n\n    process_and_print(data, keys_to_print)\n```\n\n### Explanation:\n- **Function Signature**: The function `process_and_print` accepts a dictionary `data` and a list of keys `keys_to_print`.\n- **Loop through Keys**: It iterates over each key in the `keys_to_print` list.\n- **Check Existence**: For each key, it checks if the key exists in the `data` dictionary.\n  - If the key exists, it retrieves the corresponding value and prints it using `ut.colorprint`, formatting the output as required.\n  - If the key does not exist, it prints \"Key not found\" for that key.\n- **String Formatting**: The `!r` in the f-string ensures the value is printed in a representation suitable for debugging, which adds quotes around strings.\n\nMake sure that the `ut` module is correctly defined and has the `colorprint` function implemented to utilize this function fully."}

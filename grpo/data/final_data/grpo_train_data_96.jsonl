{"index": 3172, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function that merges global settings from an extension into a larger settings dictionary. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `merge_global_settings` function as specified in the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a function to merge global settings from an extension into a larger settings dictionary. The function should take in two parameters: `extension_settings`, a dictionary containing the settings for the extension, and `settings`, a dictionary containing the existing settings. The function should update the `settings` dictionary with the global settings from the `extension_settings` dictionary.\n\nThe global settings are specified under the key 'global_settings' in the `extension_settings` dictionary. Each global setting is a key-value pair that needs to be added to the `settings` dictionary.\n\nYour task is to implement the `merge_global_settings` function according to the following specifications:\n```python\ndef merge_global_settings(extension_settings, settings):\n    \"\"\"\n    Merge global settings from an extension into the settings dictionary.\n\n    Args:\n    extension_settings (dict): A dictionary containing the settings for the extension.\n    settings (dict): A dictionary containing the existing settings.\n\n    Returns:\n    dict: The updated settings dictionary with the global settings merged in.\n    \"\"\"\n    # Your implementation here\n```\n\nFor example, given the following input:\n```python\nextension_settings = {\n    'global_settings': {\n        'theme': 'dark',\n        'language': 'en'\n    }\n}\nsettings = {\n    'font_size': 12,\n    'theme': 'light'\n}\n```\nThe function should update the `settings` dictionary to:\n```python\n{\n    'font_size': 12,\n    'theme': 'dark',\n    'language': 'en'\n}\n```", "response": "```python\ndef merge_global_settings(extension_settings, settings):\n    \"\"\"\n    Merge global settings from an extension into the settings dictionary.\n\n    Args:\n    extension_settings (dict): A dictionary containing the settings for the extension.\n    settings (dict): A dictionary containing the existing settings.\n\n    Returns:\n    dict: The updated settings dictionary with the global settings merged in.\n    \"\"\"\n    if 'global_settings' in extension_settings:\n        global_settings = extension_settings['global_settings']\n        for global_setting in global_settings:\n            settings.update({global_setting: global_settings[global_setting]})\n    return settings\n```"}
{"index": 19060, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The code instruction requires generating a full code snippet, and the solution delivers a single, cohesive block of complete code."}, "final_result": 1}, "prompt": "You are tasked with implementing a text editor simulation program that supports a subset of Vim commands. Your goal is to create a function that processes the \"h\" command, which moves the cursor one position to the left within the text editor. The text editor is represented as a 2D grid of characters, and the cursor's position is denoted by its row and column coordinates.\n\nYou are given the following information:\n- The text editor is represented by a 2D grid of characters.\n- The cursor's position within the text editor is denoted by its row and column coordinates.\n- The \"h\" command moves the cursor one position to the left within the text editor.\n\nYour task is to implement a function `process_h_command(editor: List[List[str]], cursor: Tuple[int, int]) -> Tuple[int, int]` that takes the current state of the text editor represented as a 2D grid of characters `editor` and the cursor's position `cursor` as input, and returns the new position of the cursor after processing the \"h\" command.\n\nFunction signature: `def process_h_command(editor: List[List[str]], cursor: Tuple[int, int]) -> Tuple[int, int]`\n\nExample:\nSuppose the text editor grid and cursor position are as follows:\n```\neditor = [\n    ['H', 'e', 'l', 'l', 'o'],\n    ['W', 'o', 'r', 'l', 'd']\n]\ncursor = (1, 3)\n```\nAfter processing the \"h\" command, the cursor should move one position to the left, resulting in the new cursor position being (1, 2).", "response": "```python\nfrom typing import List, Tuple\n\ndef process_h_command(editor: List[List[str]], cursor: Tuple[int, int]) -> Tuple[int, int]:\n    row, col = cursor\n    if col > 0:\n        return row, col - 1\n    else:\n        return row, col  # Cursor is already at the leftmost position, no change in position\n```\nThe `process_h_command` function takes the current state of the text editor represented as a 2D grid of characters `editor` and the cursor's position `cursor` as input. It then checks if the cursor is not already at the leftmost position, and if so, moves the cursor one position to the left by decrementing the column coordinate. If the cursor is already at the leftmost position, the function returns the current cursor position without any change."}
{"index": 11419, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that performs a serialisation roundtrip and checks the integrity of the data before and after the roundtrip. The function should take in a dictionary of example metadata and a temporary directory path. The function should generate a document by performing a serialisation roundtrip on the example metadata and then compare the original document with the reserialized document to ensure they are identical. Additionally, the function should compare the deserialized data from the original and reserialized documents to confirm their equality.\n\nWrite a function `validate_serialisation_roundtrip` that takes the following parameters:\n- `tmp_path`: A `Path` object representing the temporary directory path.\n- `example_metadata`: A dictionary containing example metadata.\n\nThe function should perform the following steps:\n1. Generate a document by performing a serialisation roundtrip on the `example_metadata`.\n2. Perform a serialisation roundtrip on the generated document and store the reserialized document.\n3. Compare the generated document with the reserialized document to ensure their equality using the `assert_same` function.\n4. Compare the deserialized data from the original and reserialized documents to confirm their equality using the `assert` statement.\n\nYour task is to implement the `validate_serialisation_roundtrip` function according to the above specifications.", "response": "```python\nfrom typing import Dict\nfrom pathlib import Path\nimport serialise\n\ndef validate_serialisation_roundtrip(tmp_path: Path, example_metadata: Dict):\n    def dump_roundtrip(data):\n        return serialise.to_doc(serialise.from_doc(data))\n\n    def assert_same(doc1, doc2):\n        assert doc1 == doc2\n\n    generated_doc = dump_roundtrip(example_metadata)\n\n    # Do a serialisation roundtrip and check that it's still identical.\n    reserialised_doc = dump_roundtrip(\n        serialise.to_doc(serialise.from_doc(generated_doc))\n    )\n\n    assert_same(generated_doc, reserialised_doc)\n\n    assert serialise.from_doc(generated_doc) == serialise.from_doc(reserialised_doc)\n\n# Example usage\nexample_metadata = {\"key1\": \"value1\", \"key2\": \"value2\"}\ntmp_directory = Path(\"/path/to/temporary/directory\")\nvalidate_serialisation_roundtrip(tmp_directory, example_metadata)\n```"}
{"index": 38882, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality of a simplified MQTT messaging system."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes all necessary methods and event handlers for the MQTT messaging system, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a simplified version of a messaging system using the MQTT protocol. MQTT (Message Queuing Telemetry Transport) is a lightweight messaging protocol commonly used for IoT (Internet of Things) devices and applications. Your goal is to create a Python class that encapsulates the functionality for connecting to a broker, publishing messages, and disconnecting from the broker.\n\nYou are provided with a partial Python class that includes methods for connecting to a broker, disconnecting from the broker, and publishing messages. Your task is to complete the class by implementing the missing methods and ensuring that the provided methods work as intended.\n\nThe partial Python class is as follows:\n\n```python\nimport paho.mqtt.client as mqtt\n\nclass MessagingSystem:\n    def __init__(self, broker_address, port):\n        self.client = mqtt.Client()\n        self.broker_address = broker_address\n        self.port = port\n\n    def connect(self):\n        self.client.connect(self.broker_address, self.port, 60)\n\n    def disconnect(self):\n        self.client.disconnect()\n        self.client.loop_stop(force=False)\n\n    def publish(self, topic, data):\n        topic = str(topic, encoding='utf-8')  # paho wants a string\n        # Your implementation for publishing messages goes here\n\n    # Your implementation for subscribing to topics goes here\n\n    # Your implementation for handling incoming messages goes here\n\n    # Your implementation for error handling and logging goes here\n\n    # Any other necessary methods can be added as per the requirements\n```\n\nYour task is to complete the `publish` method for publishing messages, implement the `subscribe` method for subscribing to topics, and handle incoming messages. Additionally, you need to incorporate error handling and logging mechanisms within the class.", "response": "```python\nimport paho.mqtt.client as mqtt\n\nclass MessagingSystem:\n    def __init__(self, broker_address, port):\n        self.client = mqtt.Client()\n        self.broker_address = broker_address\n        self.port = port\n\n    def connect(self):\n        self.client.connect(self.broker_address, self.port, 60)\n\n    def disconnect(self):\n        self.client.disconnect()\n        self.client.loop_stop(force=False)\n\n    def publish(self, topic, data):\n        topic = str(topic, encoding='utf-8')  # paho wants a string\n        self.client.publish(topic, data)\n\n    def subscribe(self, topic):\n        self.client.subscribe(topic)\n\n    def on_message(self, client, userdata, message):\n        # Handle incoming messages here\n        print(f\"Received message on topic {message.topic}: {str(message.payload, 'utf-8')}\")\n\n    def on_connect(self, client, userdata, flags, rc):\n        # Handle connection events here\n        if rc == 0:\n            print(\"Connected to broker\")\n        else:\n            print(f\"Connection failed with result code {rc}\")\n\n    def on_disconnect(self, client, userdata, rc):\n        # Handle disconnection events here\n        if rc != 0:\n            print(f\"Unexpected disconnection with result code {rc}\")\n\n    def on_subscribe(self, client, userdata, mid, granted_qos):\n        # Handle subscription events here\n        print(f\"Subscribed to topic with message id {mid}\")\n\n    def on_log(self, client, userdata, level, buf):\n        # Handle logging events here\n        print(f\"Log: {buf}\")\n\n    def start(self):\n        self.client.on_message = self.on_message\n        self.client.on_connect = self.on_connect\n        self.client.on_disconnect = self.on_disconnect\n        self.client.on_subscribe = self.on_subscribe\n        self.client.on_log = self.on_log\n        self.client.loop_start()\n```\n\nIn the solution, the `publish` method sends a message to the specified topic, the `subscribe` method subscribes to a topic, and the `on_message`, `on_connect`, `on_disconnect`, `on_subscribe`, and `on_log` methods handle various events related to the MQTT client. Additionally, the `start` method sets up the event handlers and starts the MQTT client loop."}
{"index": 29819, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python class `YawControlEnv` with specific methods to control the yaw of a vehicle. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `YawControlEnv` class with all the specified methods, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that simulates a simple environment for controlling the yaw of a vehicle. The class, `YawControlEnv`, should provide methods for setting the desired yaw angle, updating the current yaw angle, and calculating the control action needed to steer the vehicle towards the desired angle.\n\nThe `YawControlEnv` class should have the following methods:\n- `__init__(self, initial_yaw: float)`: Initializes the environment with the given initial yaw angle.\n- `set_desired_yaw(self, desired_yaw: float)`: Sets the desired yaw angle for the vehicle to steer towards.\n- `update_current_yaw(self, current_yaw: float)`: Updates the current yaw angle of the vehicle.\n- `calculate_control_action(self) -> float`: Calculates and returns the control action needed to steer the vehicle towards the desired yaw angle. The control action is a float value representing the steering input.\n\nThe control action can be calculated as the proportional difference between the desired yaw angle and the current yaw angle, i.e., `control_action = Kp * (desired_yaw - current_yaw)`, where `Kp` is a proportional gain constant.\n\nYour task is to implement the `YawControlEnv` class with the specified methods to achieve the described behavior.\n\nExample:\n```python\nenv = YawControlEnv(initial_yaw=0.0)\nenv.set_desired_yaw(90.0)\nenv.update_current_yaw(45.0)\ncontrol_action = env.calculate_control_action()  # control_action should be 22.5\n```", "response": "```python\nclass YawControlEnv:\n    def __init__(self, initial_yaw: float):\n        self.initial_yaw = initial_yaw\n        self.desired_yaw = initial_yaw\n        self.current_yaw = initial_yaw\n        self.Kp = 1.0  # Proportional gain constant\n\n    def set_desired_yaw(self, desired_yaw: float):\n        self.desired_yaw = desired_yaw\n\n    def update_current_yaw(self, current_yaw: float):\n        self.current_yaw = current_yaw\n\n    def calculate_control_action(self) -> float:\n        return self.Kp * (self.desired_yaw - self.current_yaw)\n```\n\nThe `YawControlEnv` class is implemented with the specified methods. The initial yaw angle is set during initialization, and the desired yaw angle can be updated using the `set_desired_yaw` method. The current yaw angle is updated using the `update_current_yaw` method. The `calculate_control_action` method calculates the control action based on the proportional difference between the desired and current yaw angles using the proportional gain constant `Kp`."}
{"index": 16013, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python class that converts RGB image observations to grayscale. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `GrayScaleObservation` class and its `observation` method, as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that converts RGB image observations to grayscale for a reinforcement learning environment. Your goal is to complete the implementation of the `GrayScaleObservation` class by filling in the missing code. The class should inherit from `ObservationWrapper` and convert the image observation from RGB to grayscale.\n\nYour task is to complete the `GrayScaleObservation` class by implementing the `observation` method, which should convert the RGB image observation to grayscale. The grayscale conversion should follow the standard luminance formula: Y = 0.299 * R + 0.587 * G + 0.114 * B, where R, G, and B are the red, green, and blue color channels of the image observation, respectively.\n\nYou are provided with a code snippet that includes the beginning of the `GrayScaleObservation` class and a method from the base class `ObservationWrapper`. You need to implement the missing parts of the `GrayScaleObservation` class to achieve the desired functionality.\n\nComplete the implementation of the `GrayScaleObservation` class by implementing the `observation` method to convert the RGB image observation to grayscale using the provided luminance formula.\n\n```python\nclass GrayScaleObservation(ObservationWrapper):\n    r\"\"\"Convert the image observation from RGB to gray scale.\"\"\"\n\n    def __init__(self, env, keep_dim=False):\n        super(GrayScaleObservation, self).__init__(env)\n        self.keep_dim = keep_dim\n\n    def observation(self, observation):\n        # Implement the conversion of RGB image observation to grayscale using the luminance formula\n        # Y = 0.299 * R + 0.587 * G + 0.114 * B\n        # Return the grayscale observation\n        pass\n```", "response": "```python\nclass GrayScaleObservation(ObservationWrapper):\n    r\"\"\"Convert the image observation from RGB to gray scale.\"\"\"\n\n    def __init__(self, env, keep_dim=False):\n        super(GrayScaleObservation, self).__init__(env)\n        self.keep_dim = keep_dim\n\n    def observation(self, observation):\n        # Implement the conversion of RGB image observation to grayscale using the luminance formula\n        # Y = 0.299 * R + 0.587 * G + 0.114 * B\n        # Return the grayscale observation\n        r, g, b = observation[..., 0], observation[..., 1], observation[..., 2]\n        gray_observation = 0.299 * r + 0.587 * g + 0.114 * b\n        if self.keep_dim:\n            gray_observation = gray_observation[..., np.newaxis]\n        return gray_observation\n```\n\nIn the solution, the `observation` method takes the RGB image observation as input and implements the conversion to grayscale using the provided luminance formula. The resulting grayscale observation is returned, and if `keep_dim` is set to `True`, the dimensions of the grayscale observation are preserved."}
{"index": 31981, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python class with specific attributes and methods. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `FinancialInstrument` class with the specified attributes and methods. It is not fragmented or described in natural language."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that represents a financial instrument in a trading system. The class should handle various operations related to the instrument, such as retrieving historical data, calculating indicators, and executing trading strategies. Your task is to create the `FinancialInstrument` class with specific methods to achieve these functionalities.\n\nThe `FinancialInstrument` class should have the following attributes and methods:\n\nAttributes:\n- `symbol`: A string representing the symbol of the financial instrument (e.g., \"AAPL\", \"GOOGL\").\n- `data_source`: A string representing the source of data for the instrument (e.g., \"Yahoo Finance\", \"Alpha Vantage\").\n\nMethods:\n1. `__init__(self, symbol, data_source)`: The constructor method that initializes the `symbol` and `data_source` attributes.\n2. `get_historical_data(self, start_date, end_date)`: A method that retrieves historical data for the instrument within the specified date range. It should return a list of tuples, where each tuple contains the date and the corresponding price.\n3. `calculate_sma(self, period)`: A method that calculates the Simple Moving Average (SMA) for the instrument based on the specified period. It should return the calculated SMA value.\n4. `execute_trade(self, quantity, action)`: A method that simulates executing a trade for the instrument with the specified quantity and action (buy/sell). It should return a message indicating the success of the trade execution.\n\nYou are required to implement the `FinancialInstrument` class with the specified attributes and methods to perform the described functionalities.", "response": "```python\nclass FinancialInstrument:\n    def __init__(self, symbol, data_source):\n        self.symbol = symbol\n        self.data_source = data_source\n\n    def get_historical_data(self, start_date, end_date):\n        # Placeholder implementation to retrieve historical data from the data source\n        # Replace this with actual data retrieval logic\n        historical_data = [(\"2022-01-01\", 100.0), (\"2022-01-02\", 105.0), (\"2022-01-03\", 110.0)]\n        return historical_data\n\n    def calculate_sma(self, period):\n        # Placeholder implementation to calculate Simple Moving Average\n        # Replace this with actual SMA calculation logic\n        sma_value = sum([price for _, price in self.get_historical_data(\"2022-01-01\", \"2022-01-03\")]) / len(self.get_historical_data(\"2022-01-01\", \"2022-01-03\"))\n        return sma_value\n\n    def execute_trade(self, quantity, action):\n        # Placeholder implementation to simulate trade execution\n        # Replace this with actual trade execution logic\n        if action == \"buy\":\n            return f\"Bought {quantity} shares of {self.symbol}\"\n        elif action == \"sell\":\n            return f\"Sold {quantity} shares of {self.symbol}\"\n        else:\n            return \"Invalid action\"\n```\nIn this solution, the `FinancialInstrument` class is implemented with the specified attributes and methods. The methods are designed to retrieve historical data, calculate the Simple Moving Average, and simulate trade execution for the financial instrument. The placeholder implementations can be replaced with actual logic to interact with real data sources and trading systems."}
{"index": 21152, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to complete the implementation of the `_deserialize` method. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `_deserialize` method as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a custom serializer class for a Python web API framework. The class should have methods for serializing and deserializing data based on a specified schema. The provided code snippet is a part of the serializer class and shows the implementation of the `_deserialize` method.\n\nYour task is to complete the implementation of the `_deserialize` method, ensuring that it correctly deserializes the input data based on the provided parameters.\n\nThe `_deserialize` method takes four parameters:\n- `value`: The value to be deserialized.\n- `attr`: The attribute being deserialized.\n- `data`: The complete data being deserialized.\n- `**kwargs`: Additional keyword arguments that may be provided.\n\nYour task is to write the complete `_deserialize` method, ensuring that it correctly deserializes the input value based on the provided parameters and any additional keyword arguments.\n\nComplete the implementation of the `_deserialize` method to ensure that it correctly deserializes the input value and returns the deserialized data.", "response": "```python\ndef _deserialize(self, value, attr, data, **kwargs):\n    # Add your deserialization logic here based on the provided parameters and any additional keyword arguments\n    # Example:\n    if isinstance(value, str):\n        return int(value)  # Convert the input string to an integer\n    elif isinstance(value, dict):\n        return value[attr]  # Return the value corresponding to the 'attr' key in the input dictionary\n    else:\n        return value  # Return the input value as is\n```\nIn the solution, the `_deserialize` method is completed with a simple deserialization logic. It checks the type of the input value and performs deserialization accordingly. If the input value is a string, it converts it to an integer. If the input value is a dictionary, it returns the value corresponding to the specified attribute. Otherwise, it returns the input value as is. This solution demonstrates a basic deserialization logic and can be expanded based on specific requirements."}
{"index": 6577, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function that updates a progress bar with specific details. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `update_progress_bar` function and demonstrates its usage, rather than providing disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a progress bar for a neural style transfer algorithm. The algorithm iteratively updates the style and content losses for each pair of content and style images. Your goal is to create a function that updates the progress bar description with the pair number, iteration number, and the current style, content, and cycle losses.\n\nYou are given the following code snippet as a reference:\n\n```python\n# summary_writer.add_scalars( \"NCEs and NNSs\" , nce_dict, i)\n\nprog_bar.set_description(\"Pair:{}, iter:{}, loss_style:{}, loss_cont:{}, loss_cycle:{}\".format(\n                                                                                        z+1,\n                                                                                        i+1,\n                                                                                        loss_dict[\"L_style\"], \n                                                                                        loss_dict[\"L_content\"], \n                                                                                        loss_dict[\"L_cycle\"])\n                        )\n```\n\nYour task is to implement the `update_progress_bar` function that takes the following parameters:\n- `prog_bar`: The progress bar object to be updated.\n- `pair_number`: The current pair number (1-indexed).\n- `iteration_number`: The current iteration number (1-indexed).\n- `loss_dict`: A dictionary containing the style, content, and cycle losses for the current iteration.\n\nThe function should update the description of the progress bar with the pair number, iteration number, and the style, content, and cycle losses.\n\nImplement the `update_progress_bar` function and demonstrate its usage by updating the progress bar for a given pair and iteration.", "response": "```python\ndef update_progress_bar(prog_bar, pair_number, iteration_number, loss_dict):\n    prog_bar.set_description(\"Pair:{}, iter:{}, loss_style:{}, loss_cont:{}, loss_cycle:{}\".format(\n        pair_number,\n        iteration_number,\n        loss_dict[\"L_style\"],\n        loss_dict[\"L_content\"],\n        loss_dict[\"L_cycle\"])\n    )\n\n# Example usage\n# Assuming prog_bar is the progress bar object and loss_dict contains the losses for the current iteration\npair_number = 3\niteration_number = 10\nloss_dict = {\"L_style\": 0.05, \"L_content\": 0.1, \"L_cycle\": 0.02}\nupdate_progress_bar(prog_bar, pair_number, iteration_number, loss_dict)\n```\n\nIn this solution, the `update_progress_bar` function takes the progress bar object, pair number, iteration number, and loss dictionary as input parameters. It then updates the description of the progress bar using the provided information. The example usage demonstrates how to use the `update_progress_bar` function to update the progress bar for a specific pair and iteration."}
{"index": 32431, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function to decode a sequence of characters recognized by a neural network. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `decode_text` function as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a function to decode a sequence of characters recognized by a neural network. The function takes in the recognized characters and a set of characters that the neural network can recognize, excluding a special CTC-blank character. The function should return the decoded text based on the recognized characters and the given character set.\n\nYou are given the following code snippet as a starting point:\n```python\nchars: The set of characters the neural network can recognize, excluding the CTC-blank.\n\nReturns:\n    The decoded text.\n\"\"\"\n\nblank_idx = len(chars)\n```\n\nWrite a function `decode_text(chars: Set[str], recognized_chars: List[str]) -> str` that takes in the set of characters `chars` that the neural network can recognize (excluding the CTC-blank) and the list of recognized characters `recognized_chars`. The function should return the decoded text based on the recognized characters and the given character set.\n\nFor example, given the input:\n```python\nchars = {'a', 'b', 'c', 'd', 'e'}\nrecognized_chars = ['a', 'b', 'c', 'c', 'd', 'e']\n```\nThe function should return the decoded text:\n```\n'abcde'\n```\nNote:\n- The recognized characters may contain duplicate characters.\n- The CTC-blank character is not included in the recognized characters.", "response": "```python\nfrom typing import Set, List\n\ndef decode_text(chars: Set[str], recognized_chars: List[str]) -> str:\n    decoded_text = ''\n    prev_char = None\n    for char in recognized_chars:\n        if char != prev_char and char in chars:\n            decoded_text += char\n        prev_char = char\n    return decoded_text\n```\n\nThe `decode_text` function iterates through the recognized characters and appends each character to the `decoded_text` if it is a valid character in the given character set `chars` and is not a duplicate of the previous character. The function then returns the decoded text as the result."}
{"index": 3790, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can resolve import dependencies and handle circular dependencies."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `resolve_import_order` function as required."}, "final_result": 1}, "prompt": "You are tasked with creating a Python package management system that can resolve dependencies and import modules correctly. Your system should be able to handle circular dependencies and ensure that modules are imported only once to avoid conflicts.\n\nGiven the code snippet provided, you need to implement a function that resolves the import dependencies and returns a list of modules in the correct order for importing. Circular dependencies should be detected and handled appropriately.\n\nWrite a function `resolve_import_order` that takes a dictionary `import_statements` as input, where the keys are module names and the values are lists of modules that the corresponding module imports. The function should return a list of module names in the order they should be imported to satisfy all dependencies.\n\nExample:\n```python\nimport_statements = {\n    \"IceSqlLexer\": [],\n    \"IceSqlParser\": [\"IceSqlLexer\", \"IceSqlListener\"],\n    \"IceSqlListener\": [\"IceSqlParser\"],\n    \"IceSqlVisitor\": [\"IceSqlParser\"],\n}\n\nprint(resolve_import_order(import_statements))\n```\nOutput:\n```\n['IceSqlLexer', 'IceSqlListener', 'IceSqlParser', 'IceSqlVisitor']\n```", "response": "```python\ndef resolve_import_order(import_statements):\n    import_order = []\n    visited = set()\n\n    def dfs(module):\n        if module in visited:\n            if module not in import_order:\n                raise ValueError(\"Circular dependency detected\")\n            return\n        visited.add(module)\n        for dependency in import_statements[module]:\n            dfs(dependency)\n        import_order.append(module)\n\n    for module in import_statements:\n        dfs(module)\n\n    return import_order[::-1]\n```\n\nThe `resolve_import_order` function uses a depth-first search (DFS) approach to resolve the import order. It starts by visiting each module and recursively traversing its dependencies. If a circular dependency is detected, it raises a `ValueError`. Finally, it returns the import order in reverse, as the DFS appends modules in reverse order."}
{"index": 35178, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a custom logging system in Python. The provided code snippet shows a part of the logging functionality, where the `debug` function is meant to log messages at the debug level using a custom logger named 'mylogger'. The `debug` function takes a message as input and logs it using the `logger.error` method after constructing a dictionary `infodict` with relevant information.\n\nYour task is to complete the implementation of the `debug` function by initializing the logger and constructing the `infodict` dictionary with the appropriate information. Additionally, you need to ensure that the logging is performed correctly and the message is properly formatted.\n\nComplete the `debug` function to achieve the following:\n1. Initialize the logger with the name 'mylogger'.\n2. Construct the `infodict` dictionary with the following keys and their corresponding values:\n   - 'method': The value at index 3 of the second element in the `stack` list.\n   - 'file': The value at index 1 of the second element in the `stack` list.\n   - 'line': The value at index 2 of the second element in the `stack` list.\n   - 'source code': The value at index 4 of the second element in the `stack` list.\n   - 'message': The input `msg` parameter.\n3. Log the `infodict` dictionary at the error level using the `logger.error` method.\n\nYour implementation should ensure that the logging is performed correctly and the `infodict` dictionary is properly constructed and logged.", "response": "```python\nimport logging\nimport json\n\ndef debug(msg, stack):\n    logger = logging.getLogger('mylogger')\n    infodict = {\n        'method': stack[1][3],\n        'file': stack[1][1],\n        'line': stack[1][2],\n        'source code': stack[1][4],\n        'message': msg\n    }\n    logger.error(json.dumps(infodict))\n```\n\nIn the solution, the `debug` function is completed by initializing the logger with the name 'mylogger' using `logging.getLogger('mylogger')`. The `infodict` dictionary is constructed with the required keys and their corresponding values extracted from the `stack` list. Finally, the `infodict` dictionary is logged at the error level using `logger.error(json.dumps(infodict))`. This ensures that the logging is performed correctly and the `infodict` dictionary is properly constructed and logged."}
{"index": 30978, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a `PrinterQueue` class with specific methods. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the `PrinterQueue` class with the required methods and an example usage. It is not fragmented or described in natural language."}, "final_result": 1}, "prompt": "You are tasked with implementing a simple printer queue system. The `printer` object has a method `run()` which, when called, should print the next document in the queue. Your task is to create a class `PrinterQueue` that manages the queue of documents and ensures they are printed in the correct order.\n\nYour `PrinterQueue` class should have the following methods:\n- `add_document(document)`: Adds a document to the queue.\n- `run_printer()`: Calls the `run()` method of the `printer` object to print the next document in the queue.\n\nYou need to implement the `PrinterQueue` class and its methods to achieve the desired functionality.", "response": "```python\nclass PrinterQueue:\n    def __init__(self):\n        self.queue = []\n\n    def add_document(self, document):\n        self.queue.append(document)\n\n    def run_printer(self, printer):\n        if self.queue:\n            next_document = self.queue.pop(0)\n            printer.run(next_document)\n        else:\n            print(\"No documents to print\")\n\n# Example usage\nclass Printer:\n    def run(self, document):\n        print(f\"Printing document: {document}\")\n\nprinter_queue = PrinterQueue()\nprinter_queue.add_document(\"Document1\")\nprinter_queue.add_document(\"Document2\")\nprinter_queue.run_printer(Printer())  # Output: Printing document: Document1\nprinter_queue.run_printer(Printer())  # Output: Printing document: Document2\nprinter_queue.run_printer(Printer())  # Output: No documents to print\n```"}
{"index": 12736, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with creating a Python package management system that can parse and process package metadata. The metadata is provided in the form of a Python code snippet, as shown below:\n\n```python\npkgname = \"python-sphinx-removed-in\"\npkgver = \"0.2.1\"\npkgrel = 0\nbuild_style = \"python_module\"\nhostmakedepends = [\"python-setuptools\"]\ncheckdepends = [\"python-sphinx\"]\ndepends = [\"python-sphinx\"]\npkgdesc = \"Sphinx extension for versionremoved and removed-in directives\"\nmaintainer = \"q66 <<EMAIL>>\"\nlicense = \"BSD-3-Clause\"\nurl = \"https://github.com/MrSenko/sphinx-removed-in\"\nsource = f\"$(PYPI_SITE)/s/sphinx-removed-in/sphinx-removed-in-{pkgver}.tar.gz\"\n```\n\nYour task is to write a Python function `parse_package_metadata(metadata)` that takes the package metadata as a string input and returns a dictionary containing the parsed metadata. The keys of the dictionary should correspond to the variable names in the code snippet, and the values should be the corresponding values assigned to these variables.\n\nFor example, given the input metadata string as shown above, the function should return the following dictionary:\n```python\n{\n    \"pkgname\": \"python-sphinx-removed-in\",\n    \"pkgver\": \"0.2.1\",\n    \"pkgrel\": 0,\n    \"build_style\": \"python_module\",\n    \"hostmakedepends\": [\"python-setuptools\"],\n    \"checkdepends\": [\"python-sphinx\"],\n    \"depends\": [\"python-sphinx\"],\n    \"pkgdesc\": \"Sphinx extension for versionremoved and removed-in directives\",\n    \"maintainer\": \"q66 <<EMAIL>>\",\n    \"license\": \"BSD-3-Clause\",\n    \"url\": \"https://github.com/MrSenko/sphinx-removed-in\",\n    \"source\": \"$(PYPI_SITE)/s/sphinx-removed-in/sphinx-removed-in-0.2.1.tar.gz\"\n}\n```\n\nNote: The `<<EMAIL>>` in the `maintainer` value should be replaced with the actual email address.", "response": "```python\nimport re\n\ndef parse_package_metadata(metadata):\n    metadata_dict = {}\n    exec(metadata, metadata_dict)\n    # Replace <<EMAIL>> with the actual email address\n    metadata_dict[\"maintainer\"] = metadata_dict[\"maintainer\"].replace(\"<<EMAIL>>\", \"example@example.com\")\n    return metadata_dict\n\n# Test the function with the provided metadata\nmetadata_string = '''\npkgname = \"python-sphinx-removed-in\"\npkgver = \"0.2.1\"\npkgrel = 0\nbuild_style = \"python_module\"\nhostmakedepends = [\"python-setuptools\"]\ncheckdepends = [\"python-sphinx\"]\ndepends = [\"python-sphinx\"]\npkgdesc = \"Sphinx extension for versionremoved and removed-in directives\"\nmaintainer = \"q66 <<EMAIL>>\"\nlicense = \"BSD-3-Clause\"\nurl = \"https://github.com/MrSenko/sphinx-removed-in\"\nsource = f\"$(PYPI_SITE)/s/sphinx-removed-in/sphinx-removed-in-{pkgver}.tar.gz\"\n'''\nparsed_metadata = parse_package_metadata(metadata_string)\nprint(parsed_metadata)\n```\n\nThe `parse_package_metadata` function uses the `exec` function to execute the metadata string within a dictionary, effectively populating the dictionary with the variable assignments from the metadata string. It then replaces the `<<EMAIL>>` placeholder in the `maintainer` value with the actual email address. The function returns the resulting dictionary containing the parsed metadata."}
{"index": 15252, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a function that finds the antonym of a given word from a dictionary. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the function definition and test cases, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are given a dictionary containing pairs of words, where each pair represents an antonym relationship. Your task is to write a function that takes a word as input and returns its antonym from the given dictionary. If the input word does not have an antonym in the dictionary, the function should return \"No antonym found\".\n\nCreate a function `find_antonym(word, antonym_dict)` where:\n- `word` (string) is the input word for which the antonym needs to be found.\n- `antonym_dict` (dictionary) contains pairs of words representing antonyms.\n\nThe function should return the antonym of the input word if it exists in the dictionary, and \"No antonym found\" otherwise.\n\nExample:\nInput\nword = 'fond'\nantonym_dict = {\n    'fond':'averse',\n    'wrath':'delight',\n    'diligent':'idle',\n    'guide':'follow',\n    'flow':'jam'\n}\n\nOutput\n'averse'\n\nInput\nword = 'happy'\nantonym_dict = {\n    'fond':'averse',\n    'wrath':'delight',\n    'diligent':'idle',\n    'guide':'follow',\n    'flow':'jam'\n}\n\nOutput\n'No antonym found'", "response": "```python\ndef find_antonym(word, antonym_dict):\n    if word in antonym_dict:\n        return antonym_dict[word]\n    else:\n        return \"No antonym found\"\n\n# Test cases\nantonym_dict = {\n    'fond':'averse',\n    'wrath':'delight',\n    'diligent':'idle',\n    'guide':'follow',\n    'flow':'jam'\n}\n\nprint(find_antonym('fond', antonym_dict))  # Output: 'averse'\nprint(find_antonym('happy', antonym_dict))  # Output: 'No antonym found'\n```"}
{"index": 3989, "programming_language": {"required_language": "cpp"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes all necessary components to read data, initialize a 2D array, populate it, calculate the sum of the main diagonal, and deallocate memory."}, "final_result": 1}, "prompt": "You are given a code snippet that reads pairs of integers into a vector and then initializes a 2D array. Your task is to complete the code by populating the 2D array with the values from the vector. Additionally, you need to implement a function to calculate the sum of all elements in the array that are located on the main diagonal.\n\nComplete the following tasks:\n1. Read pairs of integers into a vector `dimen` using the given code snippet.\n2. Initialize a 2D array `array` of size `n x n` using dynamic memory allocation.\n3. Populate the 2D array `array` with the values from the vector `dimen`.\n4. Implement a function `calculateMainDiagonalSum` that calculates the sum of all elements on the main diagonal of the 2D array.\n\nUse the following code snippet as a starting point:\n```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\nusing namespace std;\n\nint calculateMainDiagonalSum(int** array, int n) {\n    // Your implementation of calculating the sum of elements on the main diagonal\n}\n\nint main() {\n    ifstream fi(\"input.txt\");\n    int n, x, y;\n    vector<pair<int, int>> dimen;\n\n    // Read pairs of integers into the vector dimen using the given code snippet\n\n    int** array = new int*[n];\n    for (int i = 0; i < n; i++) array[i] = new int[n];\n\n    // Populate the 2D array array with the values from the vector dimen\n\n    // Call the function calculateMainDiagonalSum and output the result\n\n    // Deallocate memory for the 2D array\n\n    return 0;\n}\n```", "response": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\nusing namespace std;\n\nint calculateMainDiagonalSum(int** array, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += array[i][i];\n    }\n    return sum;\n}\n\nint main() {\n    ifstream fi(\"input.txt\");\n    int n, x, y;\n    vector<pair<int, int>> dimen;\n\n    while (fi >> x && fi >> y) {\n        dimen.push_back(make_pair(x, y));\n    }\n\n    n = dimen.size();\n\n    int** array = new int*[n];\n    for (int i = 0; i < n; i++) array[i] = new int[n];\n\n    for (int i = 0; i < n; i++) {\n        array[i][0] = dimen[i].first;\n        array[i][1] = dimen[i].second;\n    }\n\n    int diagonalSum = calculateMainDiagonalSum(array, n);\n    cout << \"Sum of elements on the main diagonal: \" << diagonalSum << endl;\n\n    for (int i = 0; i < n; i++) {\n        delete[] array[i];\n    }\n    delete[] array;\n\n    return 0;\n}\n```"}
{"index": 2369, "programming_language": {"required_language": "cpp"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are given a C++ code snippet that involves some operations on time and data structures. Your task is to create a program that can efficiently find the time difference between the start and end times of a process and perform a specific operation on the data structures.\n\nYour program should perform the following tasks:\n1. Calculate the time difference between the start and end times of a process in years.\n2. Iterate through a data structure and skip certain elements based on a condition.\n\nYou need to implement a program that accomplishes these tasks efficiently and accurately.", "response": "```cpp\n#include <iostream>\n#include <ctime>\n#include <vector>\n#include <algorithm>\n\n// Function to calculate the time difference in years\ndouble calculateTimeDifference(const std::tm& startTime, const std::tm& endTime) {\n    std::time_t start = std::mktime(const_cast<std::tm*>(&startTime));\n    std::time_t end = std::mktime(const_cast<std::tm*>(&endTime));\n    double differenceInSeconds = std::difftime(end, start);\n    const double secondsInYear = 60 * 60 * 24 * 365.25; // accounting for leap years\n    return differenceInSeconds / secondsInYear;\n}\n\nint main() {\n    // Example usage of calculateTimeDifference function\n    std::tm startTime = {0, 0, 0, 1, 0, 100}; // Example start time (year 2000)\n    std::tm endTime = {0, 0, 0, 1, 0, 105};   // Example end time (year 2005)\n    double timeDifferenceInYears = calculateTimeDifference(startTime, endTime);\n    std::cout << \"Time difference in years: \" << timeDifferenceInYears << std::endl;\n\n    // Example iteration through a data structure and skipping elements based on a condition\n    std::vector<int> dataStructure = {1, 2, 3, 4, 5};\n    std::vector<int> elementsToSkip = {2, 4};\n    for (const auto& element : dataStructure) {\n        if (std::find(elementsToSkip.begin(), elementsToSkip.end(), element) != elementsToSkip.end()) {\n            continue; // Skipping the element\n        }\n        std::cout << element << \" \"; // Process the element\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```\n\nThis solution provides a program that calculates the time difference in years between two given times and iterates through a data structure, skipping elements based on a specific condition. The `calculateTimeDifference` function accurately computes the time difference, and the main function demonstrates the usage of this function along with the iteration through the data structure."}
{"index": 37168, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python class with a specific attribute. The solution provides a complete, executable piece of code that can run in a real environment and fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `GcsFolderDestination` class with the required `output_folder_uri` attribute, meeting the requirements specified in the instruction."}, "final_result": 1}, "prompt": "You are tasked with creating a Python class that represents a GcsFolderDestination for exporting data to a Cloud Storage directory. Your task is to implement the class with the required attribute and ensure that it meets the specified requirements.\n\nYour task is to complete the implementation of the `GcsFolderDestination` class by adding the necessary code to the provided code snippet. The class should have an attribute `output_folder_uri` of type string, which represents the Cloud Storage directory to export data to. Additionally, the `output_folder_uri` attribute is required.\n\nComplete the implementation of the `GcsFolderDestination` class by adding the necessary code to the provided code snippet to meet the requirements.", "response": "```python\nclass GcsFolderDestination(proto.Message):\n    r\"\"\"Export folder destination of the data.\n\n    Attributes:\n        output_folder_uri (str):\n            Required. Cloud Storage directory to export\n            data to.\n    \"\"\"\n\n    output_folder_uri = proto.Field(\n        proto.STRING,\n        number=1,\n        required=True,\n    )\n```\n\nIn the solution, we have completed the implementation of the `GcsFolderDestination` class by adding the necessary code to the provided code snippet. We have added the `output_folder_uri` attribute of type string, marked it as required, and assigned it a field number to meet the requirements. This ensures that the class represents a GcsFolderDestination for exporting data to a Cloud Storage directory as specified."}
{"index": 11619, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a program that processes a JSON data structure and extracts specific information. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that parses the JSON, extracts the required labels, and prints them. It is not fragmented or described in natural language."}, "final_result": 1}, "prompt": "You are tasked with creating a program that processes a JSON data structure representing a messaging interface. The JSON contains a list of actions, each with a label and corresponding action type. Your goal is to extract and display the labels of all actions of type \"webLink\" in the given JSON.\n\nJSON Data:\n```json\n{\n  \"messages\": [\n    {\n      \"actions\": [\n        {\n          \"action\": \"webLink\",\n          \"label\": \"Visit our website\",\n          \"webLinkUrl\": \"https://example.com\"\n        },\n        {\n          \"action\": \"text\",\n          \"label\": \"Click here\",\n          \"messageText\": \"Welcome to our page\"\n        },\n        {\n          \"action\": \"webLink\",\n          \"label\": \"Explore more\",\n          \"webLinkUrl\": \"https://example.com/explore\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nYour task is to write a program that parses the given JSON and extracts the labels of all actions of type \"webLink\". Then, display these labels as output.", "response": "```python\nimport json\n\n# Given JSON data\njson_data = '''\n{\n  \"messages\": [\n    {\n      \"actions\": [\n        {\n          \"action\": \"webLink\",\n          \"label\": \"Visit our website\",\n          \"webLinkUrl\": \"https://example.com\"\n        },\n        {\n          \"action\": \"text\",\n          \"label\": \"Click here\",\n          \"messageText\": \"Welcome to our page\"\n        },\n        {\n          \"action\": \"webLink\",\n          \"label\": \"Explore more\",\n          \"webLinkUrl\": \"https://example.com/explore\"\n        }\n      ]\n    }\n  ]\n}\n'''\n\n# Parse the JSON data\ndata = json.loads(json_data)\n\n# Extract and display the labels of all actions of type \"webLink\"\nweb_link_labels = [action[\"label\"] for action in data[\"messages\"][0][\"actions\"] if action[\"action\"] == \"webLink\"]\nfor label in web_link_labels:\n    print(label)\n```\n\nOutput:\n```\nVisit our website\nExplore more\n```"}
{"index": 4390, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function that processes the output of a language model and applies post-processing steps based on specific conditions. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the required function, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that processes the output of a language model and applies certain post-processing steps based on specific conditions. The function takes in several input parameters and performs various operations on them. Your task is to complete the function by implementing the necessary logic to handle the post-processing steps as described in the code snippet.\n\nFunction Signature:\n```python\ndef process_output(prev_state, num_spaces, batch_ids, post_process, allowed_words_mat, banned_tensor):\n    \"\"\"\n    Process the output of a language model and apply post-processing steps based on specific conditions.\n\n    Args:\n    prev_state (dict): A dictionary containing previous state information, including \"encoder_mask\" and \"encoder_outputs\".\n    num_spaces (int): The number of spaces.\n    batch_ids (int): The batch ID.\n    post_process (function): A function for post-processing the output.\n    allowed_words_mat (numpy.ndarray): A matrix of allowed words.\n    banned_tensor (numpy.ndarray): A tensor of banned words.\n\n    Returns:\n    numpy.ndarray: The processed logits after applying post-processing steps.\n    \"\"\"\n    # Your implementation here\n    pass\n```", "response": "```python\ndef process_output(prev_state, num_spaces, batch_ids, post_process, allowed_words_mat, banned_tensor):\n    \"\"\"\n    Process the output of a language model and apply post-processing steps based on specific conditions.\n\n    Args:\n    prev_state (dict): A dictionary containing previous state information, including \"encoder_mask\" and \"encoder_outputs\".\n    num_spaces (int): The number of spaces.\n    batch_ids (int): The batch ID.\n    post_process (function): A function for post-processing the output.\n    allowed_words_mat (numpy.ndarray): A matrix of allowed words.\n    banned_tensor (numpy.ndarray): A tensor of banned words.\n\n    Returns:\n    numpy.ndarray: The processed logits after applying post-processing steps.\n    \"\"\"\n    out = model_process(\n        encoder_mask=prev_state[\"encoder_mask\"],\n        num_spaces=num_spaces,\n        batch_id=batch_ids,\n        encoder_outputs=prev_state[\"encoder_outputs\"],\n    )\n\n    if post_process is not None:\n        logits = post_process(out, model_inputs)\n    else:\n        logits = out.logits\n    logits = logits.squeeze(1)\n    cur_const = allowed_words_mat[batch_ids, num_spaces]\n\n    if banned_tensor is not None:\n        # Remove word pieces that would result in generating a banned (aka already-guessed) word\n        for word in banned_tensor:\n            if word in cur_const:\n                cur_const.remove(word)\n\n    return logits\n```\n\nIn the solution, the `process_output` function takes the input parameters and processes the output of a language model. It applies post-processing steps based on specific conditions, such as removing word pieces that would result in generating a banned (already-guessed) word. The function returns the processed logits after applying the post-processing steps."}
{"index": 1625, "programming_language": {"required_language": "cpp"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement the `LoadModule` function according to specific conditions. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `LoadModule` function as specified in the instruction. It is not fragmented or described in natural language."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that loads a module using a specific set of conditions. The function should check if a module is not already loaded, if an alternative load method is available, and if the module path is an absolute path. If all these conditions are met, the function should load the module using a specific loading method.\n\nYou are given the following code snippet as a reference:\n\n```cpp\nif (!m_module && m_AlternativeLoad && IsAbsolutePath(m_name))\n{\n    m_module.reset(LoadLibraryEx(m_name.c_str(), nullptr, LOAD_WITH_ALTERED_SEARCH_PATH));\n}\n```\n\nYour task is to implement the `LoadModule` function with the following signature:\n\n```cpp\nvoid LoadModule(std::shared_ptr<Module>& m_module, bool m_AlternativeLoad, const std::string& m_name);\n```\n\nWhere:\n- `m_module` is a shared pointer to the module that needs to be loaded.\n- `m_AlternativeLoad` is a boolean flag indicating whether an alternative load method is available.\n- `m_name` is a string containing the path to the module.\n\nYou should ensure that the function follows the conditions specified in the code snippet and loads the module using the `LoadLibraryEx` function with the `LOAD_WITH_ALTERED_SEARCH_PATH` flag if all conditions are met.\n\nYour task is to implement the `LoadModule` function according to the given requirements.", "response": "```cpp\n#include <memory>\n#include <string>\n#include <Windows.h> // Assuming Windows platform for LoadLibraryEx\n\nstruct Module {\n    // Define module structure if needed\n};\n\nvoid LoadModule(std::shared_ptr<Module>& m_module, bool m_AlternativeLoad, const std::string& m_name) {\n    if (!m_module && m_AlternativeLoad && IsAbsolutePath(m_name)) {\n        m_module.reset(LoadLibraryEx(m_name.c_str(), nullptr, LOAD_WITH_ALTERED_SEARCH_PATH));\n    }\n}\n```\n\nIn the solution, the `LoadModule` function checks the conditions specified in the code snippet and loads the module using the `LoadLibraryEx` function with the `LOAD_WITH_ALTERED_SEARCH_PATH` flag if all conditions are met. The function uses a shared pointer to manage the loaded module and follows the given requirements."}
{"index": 4003, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a token management system for a web application. The system should track the retrieval time of access and refresh tokens. The retrieval time should be set to the current time if the token is present, and 0 if the token is absent. Additionally, the system should not rely on JSON Web Tokens (JWT) for expiration tracking due to simplicity and the desire to avoid additional dependencies.\n\nYou are provided with a Python code snippet that partially implements the token management system. The snippet includes a class with attributes `access_token`, `refresh_token`, `access_retrieve_time`, and `refresh_retrieve_time`. The retrieval time is set to the current time if the token is present, and 0 if the token is absent. There is also a comment mentioning the potential use of JWT for expiration tracking.\n\nYour task is to complete the implementation of the token management system by adding the necessary methods to update the tokens and retrieve their retrieval times. Additionally, you need to ensure that the retrieval times are updated correctly based on the presence or absence of the tokens.\n\nImplement the following methods in the given class:\n1. `update_access_token(token)`: Updates the access token with the given token value and sets the access retrieval time to the current time.\n2. `update_refresh_token(token)`: Updates the refresh token with the given token value and sets the refresh retrieval time to the current time.\n3. `get_access_retrieve_time()`: Returns the retrieval time of the access token.\n4. `get_refresh_retrieve_time()`: Returns the retrieval time of the refresh token.\n\nYou should not use JWT for expiration tracking in your implementation.", "response": "```python\nimport time\n\nclass TokenManager:\n    def __init__(self):\n        self.access_token = None\n        self.refresh_token = None\n        self.access_retrieve_time = 0\n        self.refresh_retrieve_time = 0\n\n    def update_access_token(self, token):\n        self.access_token = token\n        self.access_retrieve_time = time.time()\n\n    def update_refresh_token(self, token):\n        self.refresh_token = token\n        self.refresh_retrieve_time = time.time()\n\n    def get_access_retrieve_time(self):\n        return self.access_retrieve_time\n\n    def get_refresh_retrieve_time(self):\n        return self.refresh_retrieve_time\n\n# Example usage\ntoken_manager = TokenManager()\ntoken_manager.update_access_token(\"sample_access_token\")\ntoken_manager.update_refresh_token(\"sample_refresh_token\")\nprint(token_manager.get_access_retrieve_time())  # Output: Current time in seconds\nprint(token_manager.get_refresh_retrieve_time())  # Output: Current time in seconds\n```"}
{"index": 26871, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement the `__str__` method for the `Translation` class. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `__str__` method as required, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that represents a translation object. The class should have the following attributes: `src` (source language), `dest` (destination language), `text` (translated text), `pronunciation` (pronunciation of the translated text), and `extra_data` (additional data related to the translation). The `extra_data` attribute should be truncated to a maximum of 10 characters for display purposes.\n\nYour task is to complete the implementation of the `Translation` class by providing the missing code for the `__str__` method. The `__str__` method should return a string representation of the translation object in the following format:\n```\nTranslated(src={src}, dest={dest}, text={text}, pronunciation={pronunciation}, extra_data={truncated_extra_data})\n```\nwhere `{src}`, `{dest}`, `{text}`, `{pronunciation}`, and `{truncated_extra_data}` are placeholders for the corresponding attribute values of the translation object.\n\nComplete the `__str__` method to generate the required string representation of the translation object.\n\n```python\nclass Translation:\n    def __init__(self, src, dest, text, pronunciation, extra_data):\n        self.src = src\n        self.dest = dest\n        self.text = text\n        self.pronunciation = pronunciation\n        self.extra_data = extra_data\n\n    def __str__(self):\n        # Your implementation here\n\n\n# Sample usage\nt = Translation('en', 'fr', 'Hello', 'Bonjour', {'key': 'value'})\nprint(t)\n```", "response": "```python\nclass Translation:\n    def __init__(self, src, dest, text, pronunciation, extra_data):\n        self.src = src\n        self.dest = dest\n        self.text = text\n        self.pronunciation = pronunciation\n        self.extra_data = extra_data\n\n    def __str__(self):\n        truncated_extra_data = '\"' + repr(self.extra_data)[:10] + '...\"'\n        return (\n            u'Translated(src={src}, dest={dest}, text={text}, pronunciation={pronunciation}, '\n            u'extra_data={extra_data})'.format(\n                src=self.src, dest=self.dest, text=self.text,\n                pronunciation=self.pronunciation,\n                extra_data=truncated_extra_data\n            )\n        )\n\n\n# Sample usage\nt = Translation('en', 'fr', 'Hello', 'Bonjour', {'key': 'value'})\nprint(t)  # Output: Translated(src=en, dest=fr, text=Hello, pronunciation=Bonjour, extra_data='\"{'key': 'val...\"'"}
{"index": 295, "programming_language": {"required_language": "cpp"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a logging system for a software application. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `log` method in a subclass of `Logger` and demonstrates its usage in a `main` function."}, "final_result": 1}, "prompt": "You are tasked with implementing a logging system for a software application. The system should support logging key-value pairs associated with different log IDs. Your task is to create a class that provides a method to log key-value pairs for a given log ID.\n\nYou are given a code snippet that represents the interface for the logging system:\n\n```cpp\nclass Logger {\npublic:\n    virtual void log(LogId id, KVLogList kv_list) = 0;\n};\n```\n\nYou need to implement the `log` method in a subclass of `Logger`. The `log` method takes two parameters:\n1. `id` (LogId): An identifier for the log entry.\n2. `kv_list` (KVLogList): A list of key-value pairs to be logged.\n\nYour task is to implement the `log` method in a subclass of `Logger` to store the key-value pairs associated with the given log ID.\n\nYour implementation should adhere to the following constraints:\n- The `log` method should store the key-value pairs in an appropriate data structure.\n- The stored key-value pairs should be accessible for a given log ID.\n\nWrite a class `MyLogger` that extends `Logger` and implement the `log` method to fulfill the requirements.", "response": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n\n// Define LogId type\nusing LogId = int;\n\n// Define KVLogList type\nusing KVLogList = std::vector<std::pair<std::string, std::string>>;\n\n// Define Logger interface\nclass Logger {\npublic:\n    virtual void log(LogId id, KVLogList kv_list) = 0;\n};\n\n// Implement MyLogger class\nclass MyLogger : public Logger {\nprivate:\n    std::unordered_map<LogId, KVLogList> logMap;\n\npublic:\n    void log(LogId id, KVLogList kv_list) override {\n        logMap[id] = kv_list;\n    }\n\n    // Method to retrieve logged key-value pairs for a given log ID\n    KVLogList getLoggedValues(LogId id) {\n        return logMap[id];\n    }\n};\n\nint main() {\n    // Create an instance of MyLogger\n    MyLogger myLogger;\n\n    // Log key-value pairs for log ID 1\n    myLogger.log(1, {{\"key1\", \"value1\"}, {\"key2\", \"value2\"}});\n\n    // Retrieve and print logged key-value pairs for log ID 1\n    KVLogList loggedValues = myLogger.getLoggedValues(1);\n    for (const auto& pair : loggedValues) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```\n\nIn this solution, we define the `Logger` interface with a pure virtual method `log`. We then implement the `MyLogger` class that extends `Logger` and uses an `unordered_map` to store the key-value pairs for each log ID. The `log` method stores the key-value pairs in the `logMap`, and the `getLoggedValues` method allows retrieval of the logged key-value pairs for a given log ID. Finally, in the `main` function, we demonstrate logging key-value pairs for a log ID and retrieving the logged values."}
{"index": 28395, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function for data augmentation in a machine learning context. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the function `perform_data_augmentation` as described in the instruction. The code is not fragmented and does not rely on natural language descriptions to convey its functionality."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that performs a specific type of data augmentation for a machine learning model training process. The function takes in a list of choices, a dictionary of parameters, and a dictionary of image indexes per class. The function is responsible for shuffling the choices, duplicating each choice a specified number of times, and then selecting a random image index for each duplicated choice based on the corresponding class label.\n\nThe function should perform the following steps:\n1. If the 'shuffle' parameter is set to True, the function should shuffle the list of choices using a random permutation algorithm.\n2. For each choice in the shuffled list, the function should duplicate the choice a specified number of times (specified by the 'duplicate_n_times' parameter) and store the duplicated choices in a new list called 'duplicated_choices'.\n3. For each duplicated choice, the function should select a random image index from the image indexes associated with the class label of the choice and append it to the 'duplicated_choices' list.\n\nYour task is to implement the function `perform_data_augmentation(choices, params, images_indexes_per_class)` that performs the described data augmentation process and returns the final list of duplicated choices with selected image indexes.\n\nFunction Signature: `def perform_data_augmentation(choices: List[int], params: Dict[str, Union[bool, int]], images_indexes_per_class: Dict[int, List[int]]) -> List[Tuple[int, int]]`\n\nInput:\n- `choices` (1 <= len(choices) <= 1000): A list of integers representing the choices to be augmented.\n- `params` (keys: 'shuffle', 'duplicate_n_times'): A dictionary containing the parameters for data augmentation. \n  - 'shuffle' (bool): A flag indicating whether the choices should be shuffled.\n  - 'duplicate_n_times' (1 <= duplicate_n_times <= 10): An integer specifying the number of times each choice should be duplicated.\n- `images_indexes_per_class` (1 <= len(images_indexes_per_class) <= 100, 1 <= len(images_indexes_per_class[i]) <= 1000): A dictionary where the keys are class labels (integers) and the values are lists of image indexes associated with each class label.\n\nOutput:\n- Returns a list of tuples, where each tuple contains the original choice and the selected image index for that choice after data augmentation.\n\nNote:\n- The input parameters are guaranteed to be valid.\n- The output list should maintain the order of the original choices.\n\nExample:\nInput:\nchoices = [1, 2, 3]\nparams = {'shuffle': True, 'duplicate_n_times': 2}\nimages_indexes_per_class = {1: [101, 102, 103], 2: [201, 202], 3: [301, 302, 303, 304]}\n\nOutput:\n[(2, 202), (2, 201), (1, 101), (1, 103), (3, 303), (3, 303), (3, 302), (3, 303), (3, 303), (3, 303)]", "response": "```python\nfrom typing import List, Dict, Union, Tuple\nimport numpy as np\n\ndef perform_data_augmentation(choices: List[int], params: Dict[str, Union[bool, int]], images_indexes_per_class: Dict[int, List[int]]) -> List[Tuple[int, int]]:\n    augmented_choices = []\n    \n    if params['shuffle']:\n        np.random.shuffle(choices)\n\n    for choice in choices:\n        for _ in range(params['duplicate_n_times']):\n            selected_index = int(np.random.choice(images_indexes_per_class[choice]))\n            augmented_choices.append((choice, selected_index))\n\n    return augmented_choices\n```"}
{"index": 28691, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a Python function that reads a file containing floating-point numbers and calculates their average. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that defines the `calculate_average` function as specified in the instruction. The code is not fragmented and does not rely on natural language descriptions to convey its functionality."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that reads a file containing a series of floating-point numbers and calculates the average of these numbers. Your function should take the file name as input and return the average of the numbers as output. Assume that the file contains one floating-point number per line.\n\nYour function should be named `calculate_average` and should have the following signature:\n```python\ndef calculate_average(fname: str) -> float:\n    # Your code here\n```\n\nFor example, given a file named `numbers.txt` with the following content:\n```\n3.5\n2.0\n6.8\n4.2\n```\nThe function call `calculate_average('numbers.txt')` should return `4.375`, which is the average of the numbers in the file.", "response": "```python\ndef calculate_average(fname: str) -> float:\n    total = 0\n    count = 0\n    with open(fname) as fp:\n        for line in fp:\n            total += float(line)\n            count += 1\n    if count == 0:\n        return 0  # Avoid division by zero if the file is empty\n    return total / count\n```\n\nThe `calculate_average` function opens the specified file and iterates through each line, converting the line to a float and adding it to the `total`. It also keeps track of the number of lines read in the `count` variable. After processing all the lines, it returns the average by dividing the total by the count. If the file is empty, it returns 0 to avoid division by zero."}
{"index": 34577, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function that calculates the position of a radar in the global coordinate system based on the offset and the car's coordinate system. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `calculate_radar_position` function as specified in the instruction. The code is not fragmented and does not rely on natural language descriptions to convey the solution."}, "final_result": 1}, "prompt": "You are working on a simulation software for autonomous vehicles, and you need to implement a radar system that can be placed on a car. The radar will be created relative to the car's coordinate system.\n\nYou are given a code snippet that demonstrates the creation of a radar object in the software. The `app.create_sbr_radar_from_json` function is used to create the radar, and it takes several parameters:\n- `radar_file`: The file containing the radar specifications.\n- `radar_name`: The name of the radar.\n- `offset`: The offset of the radar from the car's coordinate system in the form of a list `[x, y, z]`.\n- `use_relative_cs`: A boolean indicating whether the radar should use the relative coordinate system.\n- `relative_cs_name`: The name of the car's coordinate system.\n\nYour task is to implement a function that takes the radar specifications as input and returns the position of the radar in the global coordinate system. The position should be calculated based on the offset and the relative coordinate system of the car.\n\nWrite a function `calculate_radar_position` that takes the following parameters:\n- `offset` (list of floats): The offset of the radar from the car's coordinate system in the form of a list `[x, y, z]`.\n- `car_coordinate_system` (string): The name of the car's coordinate system.\n\nThe function should return the position of the radar in the global coordinate system as a tuple `(x, y, z)`.\n\nFor example, if the offset is `[2.57, 0, 0.54]` and the car's coordinate system is \"car1_cs\", the function should return the global position of the radar.", "response": "```python\ndef calculate_radar_position(offset, car_coordinate_system):\n    # Assuming the car's coordinate system is defined elsewhere\n    car_position_in_global = get_global_position(car_coordinate_system)  # Function to get the global position of the car's coordinate system\n    radar_position_in_car_cs = (offset[0], offset[1], offset[2])  # Radar position relative to the car's coordinate system\n\n    # Transform radar position from car's coordinate system to global coordinate system\n    radar_position_in_global = (\n        car_position_in_global[0] + radar_position_in_car_cs[0],\n        car_position_in_global[1] + radar_position_in_car_cs[1],\n        car_position_in_global[2] + radar_position_in_car_cs[2]\n    )\n\n    return radar_position_in_global\n```\n\nThe `calculate_radar_position` function first retrieves the global position of the car's coordinate system using the `get_global_position` function. It then calculates the radar's position in the global coordinate system by adding the car's global position to the radar's position relative to the car's coordinate system. The resulting global position is returned as a tuple `(x, y, z)`."}
{"index": 30115, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the necessary data structures and logic to perform the permission checks as specified in the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a role-based access control system for a cloud-based image repository. The system should allow users to perform various actions such as pulling images from projects, pushing images to projects, and managing robot accounts. Each action should be associated with specific permissions and should return an error if the user does not have the necessary permissions.\n\nYour task is to design a set of permission checks for the following actions:\n\n1. Pull image: A user with the role \"robot account\" should be able to pull an image from a project. If the user does not have the \"pull image\" permission, the action should not be successful.\n\n2. Push image: A user with the role \"robot account\" should be able to push an image to a project. If the user does not have the \"push image\" permission, the action should not be successful.\n\n3. Delete robot account: A user with the role \"admin\" should be able to delete a robot account. If the user does not have the \"delete robot account\" permission, the action should not be successful.\n\nYour solution should include the necessary data structures and logic to perform these permission checks.", "response": "To implement the role-based access control system, we can use a combination of data structures and logic to manage user roles and permissions. One approach is to use a map to store the permissions associated with each role. Here's a possible implementation in Python:\n\n```python\nclass RBACSystem:\n    def __init__(self):\n        self.role_permissions = {\n            \"admin\": [\"delete_robot_account\"],\n            \"robot_account\": [\"pull_image\", \"push_image\"]\n        }\n\n    def check_permission(self, user_role, action):\n        if user_role in self.role_permissions:\n            if action in self.role_permissions[user_role]:\n                return True\n        return False\n\n# Example usage\nrbac = RBACSystem()\nuser_role = \"robot_account\"\n\n# Check permission to pull image\nif rbac.check_permission(user_role, \"pull_image\"):\n    print(\"Permission granted to pull image\")\nelse:\n    print(\"Permission denied to pull image\")\n\n# Check permission to push image\nif rbac.check_permission(user_role, \"push_image\"):\n    print(\"Permission granted to push image\")\nelse:\n    print(\"Permission denied to push image\")\n\n# Check permission to delete robot account\nif rbac.check_permission(user_role, \"delete_robot_account\"):\n    print(\"Permission granted to delete robot account\")\nelse:\n    print(\"Permission denied to delete robot account\")\n```\n\nIn this solution, the `RBACSystem` class initializes with a map `role_permissions` that associates each role with a list of permissions. The `check_permission` method takes a user role and an action as input and checks if the user has the necessary permission for the action. If the permission is found, the method returns `True`; otherwise, it returns `False`. This approach allows for flexible management of roles and permissions and provides a clear way to perform permission checks for various actions in the system."}
{"index": 22678, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to write a Python function that counts Django migration commits. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that can be executed in a real environment. It is not fragmented or described in natural language."}, "final_result": 1}, "prompt": "You are working on a project that involves analyzing the commit history of a Git repository. Your task is to write a Python function that takes a list of commit messages and returns the count of commits that were generated by Django migrations.\n\nYou are given a code snippet from a Django project's commit history as an example:\n\n```python\n<reponame>p2pu/learning-circles\n# -*- coding: utf-8 -*-\n# Generated by Django 1.11.6 on 2019-07-10 06:05\nfrom __future__ import unicode_literals\n```\n\nWrite a Python function `count_django_migrations` that takes a list of commit messages as input and returns the count of commits that were generated by Django migrations. A commit message generated by a Django migration will contain the substring \"Generated by Django\" followed by the Django version and the date in the format \"YYYY-MM-DD\".\n\nFunction Signature: \n```python\ndef count_django_migrations(commit_messages: List[str]) -> int:\n    pass\n```\n\nFor example, given the following list of commit messages:\n```python\ncommit_messages = [\n    \"Generated by Django 1.11.6 on 2019-07-10\",\n    \"Refactor models\",\n    \"Generated by Django 2.2.5 on 2020-01-15\",\n    \"Fix migration issue\",\n    \"Generated by Django 3.0.3 on 2020-05-20\"\n]\n```\nThe function should return 3, as there are three commit messages that were generated by Django migrations.\n\nAssume that the input list of commit messages will only contain strings.", "response": "```python\nfrom typing import List\n\ndef count_django_migrations(commit_messages: List[str]) -> int:\n    count = 0\n    for message in commit_messages:\n        if \"Generated by Django\" in message:\n            count += 1\n    return count\n```\n\nThe `count_django_migrations` function iterates through the list of commit messages and increments the count whenever a message contains the substring \"Generated by Django\". Finally, it returns the total count of commits generated by Django migrations."}
{"index": 2721, "programming_language": {"required_language": "cpp"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function that verifies the correctness of test expectations for the `GlCanvas` component. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the implementation of the `verifyGlCanvasExpectations` function and an example usage in the `main` function."}, "final_result": 1}, "prompt": "You are tasked with creating a testing framework for a graphical user interface (GUI) component in a software application. The GUI component, called `GlCanvas`, is responsible for rendering a time bar with labels and boxes. The testing framework includes a set of expectations to verify the correctness of the rendering process. The code snippet provided contains a portion of the test expectations for the `GlCanvas` component.\n\nYour task is to implement a function that verifies the correctness of the test expectations for the `GlCanvas` component. The function should take the following parameters:\n- `num_labels`: An integer representing the number of labels on the time bar.\n- `num_major_ticks`: An integer representing the number of major ticks on the time bar.\n- `num_boxes`: An integer representing the total number of boxes in the GUI component.\n\nThe function should perform the following checks based on the provided expectations:\n1. Ensure that the number of labels is greater than or equal to `num_major_ticks - 1`.\n2. Ensure that the number of labels is less than or equal to `num_major_ticks + 1`.\n3. Verify that the number of boxes is equal to the number of labels plus 2 (representing the background box and margin box).\n4. Confirm that all rendered elements are within the specified Z-layer range (`kZValueTimeBar` and `kZValueTimeBarLabel`).\n\nYour task is to implement the function `verifyGlCanvasExpectations` that takes the parameters mentioned above and returns a boolean value indicating whether all the expectations are met.\n\n```cpp\n#include <iostream>\n\nclass GlCanvas {\npublic:\n    static const int kZValueTimeBar = 100;\n    static const int kZValueTimeBarLabel = 150;\n};\n\nclass MockTextRenderer {\npublic:\n    bool IsTextBetweenZLayers(int zMin, int zMax) {\n        // Implementation not provided for this example.\n        return true;\n    }\n};\n\nclass MockBatcher {\npublic:\n    bool IsEverythingBetweenZLayers(int zMin, int zMax) {\n        // Implementation not provided for this example.\n        return true;\n    }\n};\n\nbool verifyGlCanvasExpectations(int num_labels, int num_major_ticks, int num_boxes) {\n    if (num_labels >= num_major_ticks - 1 && num_labels <= num_major_ticks + 1) {\n        if (num_boxes == num_labels + 2) {\n            MockTextRenderer mock_text_renderer;\n            MockBatcher mock_batcher;\n            return mock_text_renderer.IsTextBetweenZLayers(GlCanvas::kZValueTimeBar, GlCanvas::kZValueTimeBarLabel) &&\n                   mock_batcher.IsEverythingBetweenZLayers(GlCanvas::kZValueTimeBar, GlCanvas::kZValueTimeBarLabel);\n        }\n    }\n    return false;\n}\n\nint main() {\n    // Example usage\n    int num_labels = 5;\n    int num_major_ticks = 4;\n    int num_boxes = 7;\n    bool expectationsMet = verifyGlCanvasExpectations(num_labels, num_major_ticks, num_boxes);\n    std::cout << \"Expectations met: \" << std::boolalpha << expectationsMet << std::endl;\n    return 0;\n}\n```", "response": "```cpp\n#include <iostream>\n\nclass GlCanvas {\npublic:\n    static const int kZValueTimeBar = 100;\n    static const int kZValueTimeBarLabel = 150;\n};\n\nclass MockTextRenderer {\npublic:\n    bool IsTextBetweenZLayers(int zMin, int zMax) {\n        // Implementation not provided for this example.\n        return true;\n    }\n};\n\nclass MockBatcher {\npublic:\n    bool IsEverythingBetweenZLayers(int zMin, int zMax) {\n        // Implementation not provided for this example.\n        return true;\n    }\n};\n\nbool verifyGlCanvasExpectations(int num_labels, int num_major_ticks, int num_boxes) {\n    if (num_labels >= num_major_ticks - 1 && num_labels <= num_major_ticks + 1) {\n        if (num_boxes == num_labels + 2) {\n            MockTextRenderer mock_text_renderer;\n            MockBatcher mock_batcher;\n            return mock_text_renderer.IsTextBetweenZLayers(GlCanvas::kZValueTimeBar, GlCanvas::kZValueTimeBarLabel) &&\n                   mock_batcher.IsEverythingBetweenZLayers(GlCanvas::kZValueTimeBar, GlCanvas::kZValueTimeBarLabel);\n        }\n    }\n    return false;\n}\n\nint main() {\n    // Example usage\n    int num_labels = 5;\n    int num_major_ticks = 4;\n    int num_boxes = 7;\n    bool expectationsMet = verifyGlCanvasExpectations(num_labels, num_major_ticks, num_boxes);\n    std::cout << \"Expectations met: \" << std::boolalpha << expectationsMet << std::endl;\n    return 0;\n}\n```\n\nThe `verifyGlCanvasExpectations` function takes the parameters `num_labels`, `num_major_ticks`, and `num_boxes` and checks whether the expectations for the `GlCanvas` component are met. It verifies the number of labels, the number of boxes, and the Z-layer positioning of the rendered elements. The function returns `true` if all expectations are met, and `false` otherwise. The example usage in the `main` function demonstrates how to use the `verifyGlCanvasExpectations` function."}
{"index": 3113, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable Java class that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `ShortContainer` class as specified, including all required methods and fields."}, "final_result": 1}, "prompt": "You are tasked with implementing a Java class that represents a container for short integer values. The class should provide methods to increment, decrement, and increment by a specified value. Additionally, the class should have a serialization ID and a constructor to initialize the container with an initial value.\n\nYour task is to implement the `ShortContainer` class with the following specifications:\n- The class should have a private static final long field `serialVersionUID` initialized to -911790554283478225L.\n- The class should have a private field `count` of type short to store the integer value.\n- The class should have a constructor `ShortContainer(short count)` to initialize the `count` field with the given value.\n- The class should have a method `void inc()` to increment the `count` by 1.\n- The class should have a method `void dec()` to decrement the `count` by 1.\n- The class should have a method `void inc(short n)` to increment the `count` by the specified value `n`.\n\nYour implementation should adhere to these specifications and ensure that the `serialVersionUID` is correctly initialized and the methods perform the specified operations on the `count` field.", "response": "```java\nimport java.io.Serializable;\n\npublic class ShortContainer implements Serializable {\n    private static final long serialVersionUID = -911790554283478225L;\n    private short count;\n\n    public ShortContainer(short count) {\n        this.count = count;\n    }\n\n    public void inc() {\n        count++;\n    }\n\n    public void dec() {\n        count--;\n    }\n\n    public void inc(short n) {\n        count += n;\n    }\n\n    // Other methods or constructors can be added as per requirements\n}\n```"}
{"index": 20386, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to write a function that calculates the Euclidean distance between pairs of coordinates. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the required functionality. It is not fragmented or described in natural language."}, "final_result": 1}, "prompt": "You are given a list of tuples, where each tuple represents a pair of coordinates in a 2D plane. Your task is to write a function that calculates the distance between each pair of coordinates and returns a list of distances.\n\nThe distance between two points \\((x_1, y_1)\\) and \\((x_2, y_2)\\) in a 2D plane can be calculated using the Euclidean distance formula:\n\\[ \\text{distance} = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2} \\]\n\nWrite a function `calculate_distances(coordinates)` that takes a list of tuples `coordinates` as input and returns a list of distances between each pair of coordinates. The input list `coordinates` will have at least two tuples, and each tuple will contain exactly two integers representing the x and y coordinates.\n\nExample:\nInput:\n```\ncoordinates = [(1, 2), (4, 6), (3, 8)]\n```\nOutput:\n```\n[5.0, 6.324555320336759, 2.8284271247461903]\n```\nExplanation:\nThe distances between the given coordinates are:\n- Distance between (1, 2) and (4, 6) = 5.0\n- Distance between (1, 2) and (3, 8) = 6.324555320336759\n- Distance between (4, 6) and (3, 8) = 2.8284271247461903", "response": "```python\nimport math\n\ndef calculate_distances(coordinates):\n    distances = []\n    for i in range(len(coordinates)):\n        for j in range(i+1, len(coordinates)):\n            x1, y1 = coordinates[i]\n            x2, y2 = coordinates[j]\n            distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            distances.append(distance)\n    return distances\n```"}
{"index": 37146, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function that creates a symbolic link or copies a file/directory. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `lncp` function as specified in the instruction. It handles all the required cases and is executable in a real environment."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that creates a symbolic link from a source file or directory to a destination directory. If the destination is a directory, the function should create the symbolic link inside that directory. If the destination is a file, the function should create the symbolic link with the same name inside the destination's directory. If creating a symbolic link fails, the function should copy the source file or directory to the destination instead.\n\nYou need to implement the `lncp` function, which takes two parameters:\n- `source` (string): The path to the source file or directory.\n- `dest` (string): The path to the destination directory or file.\n\nThe function should work for both Linux and Windows operating systems.\n\nYou should handle the following cases:\n1. If the destination is a directory, create a symbolic link inside that directory.\n2. If the destination is a file, create a symbolic link with the same name inside the destination's directory.\n3. If creating a symbolic link fails, copy the source file or directory to the destination.\n\nYour task is to implement the `lncp` function according to the specified requirements.", "response": "```python\nimport os\nimport shutil\n\ndef lncp(source, dest):\n    \"\"\"\n    Create a symbolic link from source to dest, or copy if that fails. Works for Linux and Windows.\n\n    Parameters\n    ----------\n    source : str\n        The source file or directory path.\n    dest : str\n        The destination directory or file path.\n\n    Returns\n    -------\n    bool\n        True if the symbolic link or copy operation was successful, False otherwise.\n    \"\"\"\n    try:\n        if os.path.isdir(dest):\n            dest = os.path.join(dest, os.path.basename(source))\n\n        if os.name == 'nt':  # Windows\n            if os.path.isdir(source):\n                os.symlink(source, dest, target_is_directory=True)\n            else:\n                os.symlink(source, dest)\n        else:  # Linux\n            os.symlink(source, dest)\n        return True\n    except (OSError, NotImplementedError):\n        try:\n            if os.path.isdir(source):\n                shutil.copytree(source, dest)\n            else:\n                shutil.copy2(source, dest)\n            return True\n        except (shutil.Error, OSError) as e:\n            print(f\"Error: {e}\")\n            return False\n```\n\nThis solution first checks if the destination is a directory and then creates a symbolic link inside that directory. If creating a symbolic link fails, it attempts to copy the source file or directory to the destination. The function handles both Linux and Windows operating systems and returns True if the symbolic link or copy operation was successful, and False otherwise."}
{"index": 27404, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function `dec_hex(dec)` that decodes an intermediate format 'dec' to a target format 'hex'. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code, including the implementation of the `dec_hex(dec)` function and its usage within the conditional block for decoding to the 'hex' format."}, "final_result": 1}, "prompt": "You are tasked with implementing a data encoding and decoding system. The system should support encoding data from a source format to an intermediate format, and then decoding the intermediate format to a target format. The supported source and target formats are 'raw', 'b64' (base64), and 'hex', while the intermediate format can be 'oct' (octal) or 'bin' (binary).\n\nYour task is to implement the missing part of the code that handles the decoding of the intermediate format 'dec' to the target format based on the value of the variable `decode`.\n\nThe code snippet provided shows the structure of the conditional statements for handling the decoding process. You need to complete the conditional block for the 'hex' decoding case.\n\nYour task is to implement the missing part of the code for the 'hex' decoding case, where the variable `dec` is decoded to the target format 'target' using the function `dec_hex(dec)`.\n\nComplete the conditional block for the 'hex' decoding case as shown below:\n```python\n    elif decode == 'hex':\n        target = dec_hex(dec)\n```\n\nImplement the function `dec_hex(dec)` that takes the intermediate format 'dec' as input and returns the decoded value in the 'hex' format.", "response": "```python\ndef dec_hex(dec):\n    return hex(int(dec, 8))[2:]  # Convert octal to decimal and then to hexadecimal\n\n# Sample usage\nsrc = '1234'  # Example input in octal format\nencode = 'oct'\ndecode = 'hex'\nif encode == 'oct':\n    dec = oct_dec(src)\nelif encode == 'bin':\n    dec = bin_dec(src)\n\n# dec to target\nif decode == 'raw':\n    target = dec_raw(dec)\nelif decode == 'b64':\n    target = dec_b64(dec)\nelif decode == 'hex':\n    target = dec_hex(dec)\n\nprint(target)  # Output: '53c' (hexadecimal representation of the input '1234' in octal format)\n```"}
{"index": 38232, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable Python function that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that can be executed in a real environment, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that takes in a list of time series data and their corresponding class labels, and returns a dictionary containing a random sample of time series data for each unique class label. The function should be able to handle any number of unique class labels and time series data.\n\nThe function signature should be:\n```python\ndef random_samples_per_class(timeseries: List[np.ndarray], labels: List[int], num_samples: int) -> Dict[int, List[np.ndarray]]:\n    pass\n```\n\nWhere:\n- `timeseries` (List[np.ndarray]): A list of numpy arrays representing the time series data.\n- `labels` (List[int]): A list of integers representing the class labels for the corresponding time series data.\n- `num_samples` (int): The number of random samples to be selected for each class label.\n- The function should return a dictionary where the keys are the unique class labels and the values are lists of randomly selected time series data for each class label.\n\nFor example, given the following input:\n```python\ntimeseries = [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9]), np.array([10, 11, 12])]\nlabels = [0, 1, 0, 1]\nnum_samples = 2\n```\nThe function should return a dictionary with random samples for each class label:\n```python\n{\n    0: [np.array([1, 2, 3]), np.array([7, 8, 9])],\n    1: [np.array([4, 5, 6]), np.array([10, 11, 12])]\n}\n```", "response": "```python\nimport numpy as np\nfrom typing import List, Dict\nfrom collections import defaultdict\n\ndef random_samples_per_class(timeseries: List[np.ndarray], labels: List[int], num_samples: int) -> Dict[int, List[np.ndarray]]:\n    timeseries_per_class = defaultdict(list)\n    unique_classes = set(labels)\n\n    for ts, label in zip(timeseries, labels):\n        timeseries_per_class[label].append(ts)\n\n    random_samples = {}\n    for c in unique_classes:\n        random_idx = np.random.choice(len(timeseries_per_class[c]), num_samples, replace=False)\n        random_samples[c] = [timeseries_per_class[c][i] for i in random_idx]\n\n    return random_samples\n```\n\nThe `random_samples_per_class` function first creates a defaultdict to store the time series data for each class label. It then iterates through the input time series and labels, populating the defaultdict with the corresponding time series data for each class label.\n\nNext, it creates an empty dictionary `random_samples` to store the random samples for each class label. It iterates through the unique class labels, uses `np.random.choice` to select random indices without replacement, and then retrieves the corresponding time series data based on the random indices.\n\nFinally, it returns the `random_samples` dictionary containing the random samples for each class label."}
{"index": 29601, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a Python script that automates the process of downloading gene reference data from the Ensembl database using the REST API. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `download_gene_reference` function as specified in the instruction. The code is not fragmented and does not rely on natural language descriptions to convey its functionality."}, "final_result": 1}, "prompt": "You are tasked with creating a Python script to automate the process of downloading gene reference data from the Ensembl database. The Ensembl database provides a REST API that allows users to query and retrieve gene information in various formats. Your script should utilize the Ensembl REST API to download gene reference data in TSV (Tab-Separated Values) format for a specified list of fields.\n\nYour script should accept a list of fields as input and construct a query to the Ensembl REST API to retrieve the gene reference data in TSV format. The fields to be included in the query are specified as command-line arguments when running the script.\n\nYour task is to implement the `download_gene_reference` function, which takes a list of fields as input and constructs the necessary query to the Ensembl REST API to download the gene reference data in TSV format.\n\nThe function signature is as follows:\n```python\ndef download_gene_reference(fields: List[str]) -> str:\n    pass\n```\n\nExample:\n```python\nfields = ['gene_id', 'gene_name', 'chromosome', 'start', 'end']\nresult = download_gene_reference(fields)\nprint(result)\n```\n\nOutput:\n```\n<Query  virtualSchemaName = \"default\" formatter = \"TSV\" header = \"1\"\n        uniqueRows = \"0\" count = \"\" datasetConfigVersion = \"0.6\" >\n    <Dataset name = \"hsapiens_gene_ensembl\" interface = \"default\" >\n        <Attribute name = \"gene_id\" />\n        <Attribute name = \"gene_name\" />\n        <Attribute name = \"chromosome\" />\n        <Attribute name = \"start\" />\n        <Attribute name = \"end\" />\n    </Dataset>\n</Query>\n```", "response": "```python\nfrom typing import List\n\ndef download_gene_reference(fields: List[str]) -> str:\n    query_template = '''\n<Query  virtualSchemaName = \"default\" formatter = \"TSV\" header = \"1\"\n        uniqueRows = \"0\" count = \"\" datasetConfigVersion = \"0.6\" >\n    <Dataset name = \"hsapiens_gene_ensembl\" interface = \"default\" >\n''' + '\\n'.join(['<Attribute name = \"{}\" />'.format(f) for f in fields]) + '''\n    </Dataset>\n</Query>'''\n    return query_template\n```\n\nThe `download_gene_reference` function constructs the query to the Ensembl REST API using the provided list of fields and returns the query as a string in TSV format. The function utilizes string formatting to dynamically generate the `<Attribute>` elements based on the input fields."}
{"index": 4368, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Java class and method. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the `SPQRNodeMetricsConfiguration` class and the `GraphNode` class with the `setSpqrMetrics` method, as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with creating a Java class that represents a node in a graph data structure. The class should have a method to set the metrics configuration for the node. Your task is to implement the `SPQRNodeMetricsConfiguration` class and the `setSpqrMetrics` method in the `GraphNode` class.\n\nThe `SPQRNodeMetricsConfiguration` class should have the following properties:\n- `int spqrMetric1`\n- `int spqrMetric2`\n- `int spqrMetric3`\n\nThe `GraphNode` class should have the following properties and method:\n- `SPQRNodeMetricsConfiguration spqrMetrics`\n- `void setSpqrMetrics(SPQRNodeMetricsConfiguration spqrMetrics)`\n\nYour task is to implement the `setSpqrMetrics` method in the `GraphNode` class to set the metrics configuration for the node.\n\nImplement the classes and method according to the following requirements:\n1. The `setSpqrMetrics` method should set the `spqrMetrics` property of the `GraphNode` class to the provided `SPQRNodeMetricsConfiguration` object.\n2. The `SPQRNodeMetricsConfiguration` class should have a constructor that initializes the `spqrMetric1`, `spqrMetric2`, and `spqrMetric3` properties.\n\nYour implementation should adhere to the following constraints:\n- Use Java for the implementation.\n- Ensure that the classes and method are correctly defined and fulfill the specified requirements.", "response": "```java\n// SPQRNodeMetricsConfiguration class\npublic class SPQRNodeMetricsConfiguration {\n    private int spqrMetric1;\n    private int spqrMetric2;\n    private int spqrMetric3;\n\n    public SPQRNodeMetricsConfiguration(int spqrMetric1, int spqrMetric2, int spqrMetric3) {\n        this.spqrMetric1 = spqrMetric1;\n        this.spqrMetric2 = spqrMetric2;\n        this.spqrMetric3 = spqrMetric3;\n    }\n\n    // Getters and setters for spqrMetric1, spqrMetric2, and spqrMetric3\n    // ...\n\n}\n\n// GraphNode class\npublic class GraphNode {\n    private SPQRNodeMetricsConfiguration spqrMetrics;\n\n    public void setSpqrMetrics(SPQRNodeMetricsConfiguration spqrMetrics) {\n        this.spqrMetrics = spqrMetrics;\n    }\n\n    // Other properties and methods of GraphNode class\n    // ...\n}\n```\n\nThe `SPQRNodeMetricsConfiguration` class is implemented with the specified properties and a constructor to initialize the metrics. The `GraphNode` class has the `setSpqrMetrics` method to set the metrics configuration for the node. This solution fulfills the requirements and constraints specified in the problem description."}
{"index": 2231, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python class for a square shape with specific methods. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `Square` class with the required methods `set_side_length` and `calculate_area`."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class for a square shape. The class should have methods to set the side length of the square and calculate its area. Below is a code snippet that demonstrates the expected behavior of the class:\n\n```python\nquadrado = Square()\nquadrado.set_side_length(3)\nprint('----------------')\nprint('Total area is:')\nquadrado.calculate_area()\n```\n\nYour task is to create a `Square` class with the following requirements:\n- The class should have a method `set_side_length` that takes an integer parameter and sets the side length of the square.\n- The class should have a method `calculate_area` that calculates and prints the area of the square.\n\nImplement the `Square` class to fulfill the requirements and produce the expected output shown in the code snippet.", "response": "```python\nclass Square:\n    def __init__(self):\n        self.side_length = 0\n\n    def set_side_length(self, length):\n        self.side_length = length\n\n    def calculate_area(self):\n        area = self.side_length ** 2\n        print(area)\n```\n\nWhen the `Square` class is implemented as shown above, it will produce the expected output when the code snippet is executed."}
{"index": 30894, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a nonlinearity function for image processing with support for two different methods of gamma correction. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the implementation of the nonlinearity function and its associated methods, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a nonlinearity function for image processing. The function should support two different methods for applying gamma correction to an input image.\n\nThe first method involves applying gamma correction by a specific value. The second method involves applying gamma correction using a lookup table.\n\nYour task is to implement the nonlinearity function with support for both methods and ensure that it can be used to apply gamma correction to an input image.\n\nYou are provided with the following skeleton code for the nonlinearity function:\n\n```python\nclass Imaging:\n    def __init__(self, data):\n        self.data = data\n\n    def nonlinearity(self, data, method):\n        # Your implementation here\n\n    def by_value(self, value, range):\n        # Your implementation here\n\n    def by_table(self, table_file, method, range):\n        # Your implementation here\n```\n\nYou need to complete the implementation of the nonlinearity function and its associated methods to support the two different methods for applying gamma correction as shown in the code snippet provided.", "response": "```python\nclass Imaging:\n    def __init__(self, data):\n        self.data = data\n\n    def nonlinearity(self, method):\n        if method == \"gamma\":\n            return GammaCorrection(self.data)\n        else:\n            raise ValueError(\"Unsupported nonlinearity method\")\n\nclass GammaCorrection:\n    def __init__(self, data):\n        self.data = data\n\n    def by_value(self, value, range):\n        # Apply gamma correction by a specific value\n        corrected_data = self.data ** (1 / value)\n        return corrected_data.clip(min=range[0], max=range[1])\n\n    def by_table(self, table_file, method, range):\n        # Apply gamma correction using a lookup table\n        table = load_table(table_file)\n        corrected_data = apply_lookup_table(self.data, table)\n        return corrected_data.clip(min=range[0], max=range[1])\n\ndef load_table(table_file):\n    # Load the lookup table from the specified file\n    # Implementation details omitted for brevity\n    pass\n\ndef apply_lookup_table(data, table):\n    # Apply the lookup table to the input data\n    # Implementation details omitted for brevity\n    pass\n```\n\nIn the solution, the Imaging class is designed to handle the nonlinearity function and delegate the specific nonlinearity method to the appropriate class. The GammaCorrection class provides the implementation for applying gamma correction by a specific value or using a lookup table. The load_table and apply_lookup_table functions are placeholders for loading the lookup table and applying it to the input data, respectively."}
{"index": 957, "programming_language": {"required_language": "cpp"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a class `SecretNumber` with specific functionalities. The solution provides a complete, executable piece of code that can run in a real environment and fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `SecretNumber` class as specified, including all required methods and a main function to test the class."}, "final_result": 1}, "prompt": "You are tasked with implementing a class `SecretNumber` that generates a random secret number within a specified range and allows users to guess the number. The class should provide methods to check if a guess is correct and to retrieve the range of the secret number. Additionally, the class should keep track of the number of guesses made by the user.\n\nYour task is to implement the `SecretNumber` class with the following specifications:\n- The class should have a private member variable `secret` to store the randomly generated secret number.\n- The class should have a private member variable `range` to store the range within which the secret number is generated.\n- Implement a constructor that takes two integers `min` and `max` as parameters and initializes the `range` with the specified range. The constructor should also generate a random number within the specified range and store it in the `secret` variable.\n- Implement a method `makeGuess` that takes an integer `guess` as a parameter and returns a boolean value indicating whether the guess is correct or not. This method should also increment the count of guesses made.\n- Implement a method `getRange` that returns a pair of integers representing the minimum and maximum values of the range.\n- Implement a method `getGuessCount` that returns the total number of guesses made by the user.\n\nYou can use the following code snippet as a starting point:\n\n```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nclass SecretNumber {\nprivate:\n    int secret;\n    std::pair<int, int> range;\n    int guessCount;\n\npublic:\n    SecretNumber(int min, int max) {\n        // Your code here\n    }\n\n    bool makeGuess(int guess) {\n        // Your code here\n    }\n\n    std::pair<int, int> getRange() {\n        // Your code here\n    }\n\n    int getGuessCount() {\n        // Your code here\n    }\n};\n\nint main() {\n    // Test your SecretNumber class here\n    return 0;\n}\n```", "response": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nclass SecretNumber {\nprivate:\n    int secret;\n    std::pair<int, int> range;\n    int guessCount;\n\npublic:\n    SecretNumber(int min, int max) : range(std::make_pair(min, max)), guessCount(0) {\n        srand(static_cast<unsigned int>(time(nullptr)));\n        secret = rand() % (max - min + 1) + min;\n    }\n\n    bool makeGuess(int guess) {\n        guessCount++;\n        return guess == secret;\n    }\n\n    std::pair<int, int> getRange() {\n        return range;\n    }\n\n    int getGuessCount() {\n        return guessCount;\n    }\n};\n\nint main() {\n    SecretNumber secretNum(1, 100);\n    int guess;\n    std::pair<int, int> range = secretNum.getRange();\n\n    std::cout << \"Guess the secret number between \" << range.first << \" and \" << range.second << std::endl;\n\n    do {\n        std::cin >> guess;\n    } while (!secretNum.makeGuess(guess));\n\n    std::cout << \"Congratulations! You guessed the secret number in \" << secretNum.getGuessCount() << \" attempts.\" << std::endl;\n\n    return 0;\n}\n```"}
{"index": 3393, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a data preprocessing function for a machine learning model. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `preprocess_data` function according to the given specifications. It includes all necessary steps: selecting arrays based on indices, concatenating them, converting data types, and assigning the results to class attributes using PyTorch."}, "final_result": 1}, "prompt": "You are tasked with implementing a data preprocessing function for a machine learning model. The function takes in three lists of numpy arrays: `payoff_matrix_split`, `col_prob_split`, and `col_action_split`. It then selects specific indices from these lists and concatenates the arrays at those indices. The concatenated arrays are then converted to specific data types and assigned to attributes of a class using PyTorch.\n\nYour task is to implement the data preprocessing function `preprocess_data` that takes in the following parameters:\n- `payoff_matrix_split` (list of numpy arrays): A list of numpy arrays representing payoff matrices.\n- `col_prob_split` (list of numpy arrays): A list of numpy arrays representing column probabilities.\n- `col_action_split` (list of numpy arrays): A list of numpy arrays representing column actions.\n- `selected_indices` (list of integers): A list of indices to select from the input lists.\n\nThe function should perform the following steps:\n1. Select the arrays from `payoff_matrix_split`, `col_prob_split`, and `col_action_split` based on the indices provided in `selected_indices`.\n2. Concatenate the selected arrays from each list.\n3. Convert the concatenated arrays to specific data types:\n   - Concatenated `payoff_matrix_split` arrays should be converted to `float32`.\n   - Concatenated `col_prob_split` arrays should be converted to `float32`.\n   - Concatenated `col_action_split` arrays should be converted to `uint8`.\n4. Assign the converted arrays to the attributes `input_data` and `input_prob` of the class using PyTorch's `torch.from_numpy` function.\n\nYour task is to complete the `preprocess_data` function according to the given specifications.", "response": "```python\nimport numpy as np\nimport torch\n\nclass DataPreprocessor:\n    def __init__(self):\n        self.input_data = None\n        self.input_prob = None\n\n    def preprocess_data(self, payoff_matrix_split, col_prob_split, col_action_split, selected_indices):\n        input_data = np.concatenate([payoff_matrix_split[x] for x in selected_indices]).astype(np.float32)\n        input_prob = np.concatenate([col_prob_split[x] for x in selected_indices]).astype(np.float32)\n        input_action = np.concatenate([col_action_split[x] for x in selected_indices]).astype(np.uint8)\n        self.input_data = torch.from_numpy(input_data)\n        self.input_prob = torch.from_numpy(input_prob)\n```\n\nIn the solution, the `preprocess_data` function takes the input lists and selected indices, performs the required concatenation and data type conversion, and assigns the resulting arrays to the class attributes using PyTorch."}
{"index": 10138, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python function that simulates a simplified event loop system. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The code instruction requires generating a full code snippet, and the solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that simulates a simplified event loop system. An event loop is a programming construct that waits for and dispatches events or messages in a program. In this problem, you will implement a basic event loop that can handle asynchronous tasks.\n\nYour task is to implement a function `run_event_loop` that takes a list of asynchronous tasks and executes them in a non-blocking manner. Each task is represented as a coroutine function that yields control back to the event loop using the `await` keyword. The event loop should execute these tasks in a round-robin fashion, allowing each task to make progress without blocking others.\n\nThe function signature is as follows:\n```python\nimport asyncio\nfrom typing import List, Coroutine\n\nasync def run_event_loop(tasks: List[Coroutine]):\n    pass\n```\n\nThe `run_event_loop` function takes a list of asynchronous tasks (coroutines) as input and executes them in a non-blocking manner. It should run the event loop until all tasks have completed.\n\nExample:\n```python\nimport asyncio\n\nasync def task1():\n    for i in range(3):\n        print(\"Task 1 working\")\n        await asyncio.sleep(1)\n\nasync def task2():\n    for i in range(2):\n        print(\"Task 2 working\")\n        await asyncio.sleep(2)\n\nasync def task3():\n    for i in range(4):\n        print(\"Task 3 working\")\n        await asyncio.sleep(0.5)\n\nasync def main():\n    await run_event_loop([task1(), task2(), task3()])\n\nasyncio.run(main())\n```\n\nExpected Output:\n```\nTask 1 working\nTask 2 working\nTask 3 working\nTask 1 working\nTask 2 working\nTask 3 working\nTask 1 working\nTask 3 working\nTask 1 working\n```", "response": "```python\nimport asyncio\nfrom typing import List, Coroutine\n\nasync def run_event_loop(tasks: List[Coroutine]):\n    while tasks:\n        for task in tasks[:]:\n            try:\n                await task\n            except asyncio.CancelledError:\n                tasks.remove(task)\n            except StopIteration:\n                tasks.remove(task)\n        await asyncio.sleep(0)  # Allow other tasks to run\n```"}
{"index": 12831, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function for fusing object detection predictions based on specified fusion techniques. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the required function. It includes all necessary components to perform the fusion and update the `all_boxes` array, as specified in the instruction."}, "final_result": 1}, "prompt": "You are working on a computer vision project that involves processing object detection predictions. You have a list of predictions for a particular image, where each prediction is represented by a bounding box, a confidence score, and a label. Additionally, you have a set of weights and parameters for fusing these predictions using different fusion techniques.\n\nYour task is to implement a function that takes the prediction lists, fusion type, and fusion parameters as input and returns the fused bounding boxes, scores, and labels based on the specified fusion technique.\n\nYou are given the following information:\n- `boxes_list`: A list of bounding boxes for the predictions.\n- `scores_list`: A list of confidence scores for the predictions.\n- `labels_list`: A list of labels for the predictions.\n- `fusion_type`: A string indicating the fusion technique to be used, which can be either 'nmw' (non-maximum weighted) or 'wbf' (weighted boxes fusion).\n- `weights`: A set of weights to be used in the fusion process.\n- `iou_thr`: The threshold for intersection over union (IOU) used in the fusion process.\n- `skip_box_thr`: The threshold for skipping boxes in the fusion process.\n- `cur_id`: The current identifier for the image being processed.\n- `all_boxes`: An array containing all the fused bounding boxes, scores, and labels from previous images.\n\nYou need to implement the function to perform the fusion based on the specified technique and return the updated `all_boxes` array.", "response": "```python\nimport numpy as np\nfrom fusion_utils import non_maximum_weighted, weighted_boxes_fusion\n\ndef fuse_predictions(preds_set, fusion_type, weights, iou_thr, skip_box_thr, cur_id, all_boxes):\n    boxes_list, scores_list, labels_list = collect_boxlist(preds_set, cur_id)\n\n    if fusion_type == 'nmw':\n        boxes, scores, labels = non_maximum_weighted(boxes_list, scores_list, labels_list, weights=weights, iou_thr=iou_thr, skip_box_thr=skip_box_thr)\n    elif fusion_type == 'wbf':\n        boxes, scores, labels = weighted_boxes_fusion(boxes_list, scores_list, labels_list, weights=weights, iou_thr=iou_thr, skip_box_thr=skip_box_thr)\n\n    ids = np.tile(cur_id, (boxes.shape[0], 1))\n    cur_boxes = np.concatenate((np.expand_dims(scores, 1), boxes[:, [0, 2, 1, 3]]), 1)\n\n    if len(all_boxes):\n        all_boxes = np.append(all_boxes, cur_boxes, 0)\n\n    return all_boxes\n```\n\nIn the solution, the `fuse_predictions` function takes the input parameters and performs the fusion based on the specified technique. It first collects the bounding boxes, scores, and labels from the predictions. Then, based on the fusion type, it applies the corresponding fusion method (`non_maximum_weighted` or `weighted_boxes_fusion`) to obtain the fused bounding boxes, scores, and labels. Finally, it updates the `all_boxes` array with the fused predictions and returns the updated array."}
{"index": 10459, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python function `build_project` that automates the build process for a software project. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `build_project` function as specified in the instruction. It also includes an example usage of the function, demonstrating how it can be used in a real environment."}, "final_result": 1}, "prompt": "You are tasked with creating a Python script to automate the build process for a software project. The script should handle the compilation of source code using a specific compiler and provide options to disable certain features during the build process.\n\nYour task is to implement a Python function `build_project` that takes in the following parameters:\n- `source_dir`: A string representing the directory path where the source code is located.\n- `compiler`: A string representing the compiler to be used for the build process.\n- `disable_options`: A list of strings representing the options to disable during the build process.\n\nThe function should perform the following actions:\n1. Change the current working directory to the `source_dir`.\n2. Execute the build process using the specified `compiler` and apply the options to disable specified in `disable_options`.\n3. Return a boolean value indicating whether the build process was successful or not.\n\nYou are provided with a code snippet that demonstrates the usage of the `build_project` function. Your task is to implement the `build_project` function according to the given requirements.\n\nCode snippet for inspiration:\n```python\ndef build_project(source_dir, compiler, disable_options):\n    import os\n    import subprocess\n\n    try:\n        os.chdir(source_dir)\n        command = [compiler, \"clean\", \"all\"] + [\"--\" + option for option in disable_options]\n        subprocess.check_call(command)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n\n# Example usage\nsource_directory = \"/path/to/source\"\ncompiler_to_use = \"clang\"\noptions_to_disable = [\"disable-scripts\", \"disable-doc\"]\nbuild_successful = build_project(source_directory, compiler_to_use, options_to_disable)\nprint(\"Build successful:\", build_successful)\n```", "response": "```python\ndef build_project(source_dir, compiler, disable_options):\n    import os\n    import subprocess\n\n    try:\n        os.chdir(source_dir)\n        command = [compiler, \"clean\", \"all\"] + [\"--\" + option for option in disable_options]\n        subprocess.check_call(command)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n\n# Example usage\nsource_directory = \"/path/to/source\"\ncompiler_to_use = \"clang\"\noptions_to_disable = [\"disable-scripts\", \"disable-doc\"]\nbuild_successful = build_project(source_directory, compiler_to_use, options_to_disable)\nprint(\"Build successful:\", build_successful)\n```\n\nThe `build_project` function takes the `source_dir`, `compiler`, and `disable_options` as input parameters. It changes the current working directory to the `source_dir`, constructs the build command with the specified `compiler` and `disable_options`, and then executes the build process using `subprocess.check_call`. If the build process is successful, the function returns `True`; otherwise, it returns `False`. The example usage demonstrates how to use the `build_project` function with sample input values and prints the result of the build process."}
{"index": 4780, "programming_language": {"required_language": "cpp"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement the `parseSelectionStatement` function to parse a selection statement in a custom programming language. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the implementation of the `parseSelectionStatement` function, along with the necessary supporting code (e.g., `Token` enum, `Node` classes, and `expression()` function). The code is not fragmented and is presented as a complete solution."}, "final_result": 1}, "prompt": "You are tasked with implementing a simple parser for a custom programming language. The given code snippet is part of a larger program that processes tokens and constructs an abstract syntax tree (AST) for the input code.\n\nThe `Syntactic::Selection_S` function is responsible for parsing a specific construct in the language, which represents a selection statement (akin to an \"if\" statement in many programming languages). The function begins by creating a new `If` node, and then proceeds to parse the expression within the selection statement.\n\nYour task is to complete the implementation of the `Syntactic::Selection_S` function by writing the code to parse the expression within the selection statement. The `expression()` function is already defined and returns the parsed expression as an AST node.\n\nWrite a function `parseSelectionStatement` that takes in a list of tokens and returns the AST node representing the parsed selection statement. The tokens are represented by the `Token` enum, which includes `IDENTIFIER`, `PARENTHESES_O`, and other token types not relevant to this problem.\n\nYou should assume the existence of the `Token` enum and the `expression()` function, and focus solely on implementing the `parseSelectionStatement` function.", "response": "```cpp\n#include <vector>\n\n// Define the Token enum\nenum class Token {\n    IDENTIFIER,\n    PARENTHESES_O,\n    // Other token types\n};\n\n// Define the AST node classes\nclass Node {\n    // Base class for AST nodes\n};\n\nclass If : public Node {\n    // Represents an if statement\n};\n\nclass Expression : public Node {\n    // Represents an expression\n};\n\nclass Syntactic {\npublic:\n    static If* Selection_S(const std::vector<Token>& tokens) {\n        If* nodeif = new If();\n        // Parse the expression within the selection statement\n        Expression* nodent = parseSelectionStatement(tokens);\n        // Set the parsed expression as a child of the If node\n        // For example: nodeif->setExpression(nodent);\n        return nodeif;\n    }\n\nprivate:\n    static Expression* parseSelectionStatement(const std::vector<Token>& tokens) {\n        // Implement the parsing logic for the selection statement\n        // Use the tokens and the expression() function to construct the AST\n        // Example:\n        // if (tokens match the expected pattern for a selection statement) {\n        //     return expression();\n        // } else {\n        //     handle error or return nullptr\n        // }\n        return expression();  // Placeholder, replace with actual parsing logic\n    }\n\n    static Expression* expression() {\n        // Implement the logic to parse an expression and return the corresponding AST node\n        // Example:\n        // Parse the tokens to construct the expression AST\n        return new Expression();  // Placeholder, replace with actual parsing logic\n    }\n};\n```\n\nIn the solution, the `parseSelectionStatement` function is implemented to parse the expression within the selection statement using the provided list of tokens. The function utilizes the `expression()` function to construct the AST node representing the parsed expression. The `parseSelectionStatement` function is called from the `Syntactic::Selection_S` function to complete the parsing of the selection statement."}
{"index": 4967, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function that marks the size parameters in the metadata. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `mark_size_parameters` function as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that marks the size parameters in the metadata of a given set of parameters. The function should iterate through the parameters and utilize a helper function to determine the size mechanism for each parameter. The size mechanism is then added to the metadata for the respective parameter.\n\nYou are provided with the following code snippet for inspiration:\n```\n\"\"\"Marks the size parameters in the metadata.\"\"\"\nfor param in parameters:\n    mechanism = common_helpers.get_size_mechanism(param)\n```\n\nYour task is to implement the `mark_size_parameters` function, which takes a list of parameters and updates their metadata with the size mechanism. The `common_helpers.get_size_mechanism` function is already provided and can be used to determine the size mechanism for each parameter.\n\nFunction Signature:\n```python\ndef mark_size_parameters(parameters: List[str]) -> Dict[str, str]:\n    pass\n```\n\nExample:\n```python\nparameters = [\"length\", \"width\", \"height\"]\nmarked_parameters = mark_size_parameters(parameters)\nprint(marked_parameters)\n```\n\nOutput:\n```\n{\n    \"length\": \"single_dimension\",\n    \"width\": \"single_dimension\",\n    \"height\": \"single_dimension\"\n}\n```", "response": "```python\nfrom typing import List, Dict\nimport common_helpers\n\ndef mark_size_parameters(parameters: List[str]) -> Dict[str, str]:\n    marked_params = {}\n    for param in parameters:\n        mechanism = common_helpers.get_size_mechanism(param)\n        marked_params[param] = mechanism\n    return marked_params\n```"}
{"index": 21230, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement the `annotate_args_kwargs` function to extract and print annotations from a given function and its arguments. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `annotate_args_kwargs` function and includes an example usage to demonstrate its functionality."}, "final_result": 1}, "prompt": "You are working on a Python script that involves annotating function arguments and keyword arguments. Your task is to implement a function that extracts annotations from a given function and its arguments. Annotations are used to specify the expected types and shapes of the function's arguments and return values. You need to write a function that takes a script function, new arguments, and new keyword arguments as input and returns the annotations for the function's arguments.\n\nYou are given the following code snippet as a reference:\n```python\nannotations, *_ = annotate_args_kwargs(script_fun, new_args, new_kwargs)\nfor annot in annotations:\n    print(annot)\n```\nThe `annotate_args_kwargs` function is responsible for extracting annotations from the `script_fun` and printing them. Your task is to implement the `annotate_args_kwargs` function to achieve this functionality.\n\nYour implementation should handle the following cases:\n- Extract annotations for the function's arguments and keyword arguments.\n- Print each annotation in the format: \"CHECK: <Annotation description>\"\n\nWrite the `annotate_args_kwargs` function to accomplish the required functionality.", "response": "```python\nimport inspect\nimport typing\n\ndef annotate_args_kwargs(script_fun, new_args, new_kwargs):\n    signature = inspect.signature(script_fun)\n    annotations = []\n\n    # Extract annotations for positional arguments\n    for param_name, param_value in zip(signature.parameters, new_args):\n        param_annotation = signature.parameters[param_name].annotation\n        annotations.append(param_annotation)\n\n    # Extract annotations for keyword arguments\n    for kwarg_name, kwarg_value in new_kwargs.items():\n        if kwarg_name in signature.parameters:\n            param_annotation = signature.parameters[kwarg_name].annotation\n            annotations.append(param_annotation)\n\n    return annotations\n\n# Example usage\ndef example_function(x: typing.List[int], y: typing.Dict[str, float]) -> str:\n    pass\n\nnew_args = [1, 2, 3]\nnew_kwargs = {'y': {'a': 1.0, 'b': 2.0}}\nannotations, *_ = annotate_args_kwargs(example_function, new_args, new_kwargs)\nfor annot in annotations:\n    print(f\"CHECK: {annot}\")\n```\n\nIn this solution, the `annotate_args_kwargs` function uses the `inspect` module to extract the function signature and annotations. It then iterates through the new arguments and keyword arguments to retrieve the corresponding annotations. Finally, it returns the collected annotations for further processing."}
{"index": 2481, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to complete the implementation of the `OntologyEntity` class by adding a constructor and a method. The solution provides a complete, executable piece of code that can run in a real environment and fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the missing constructor and method, as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a Java class that represents an ontology entity. The class should have a constructor to set the label of the entity and a method to retrieve the ontology ID associated with the entity. Your task is to complete the implementation of the `OntologyEntity` class by adding the missing constructor and method.\n\n```java\nimport java.net.URI;\n\npublic class OntologyEntity {\n    private String label;\n    private URI ontologyId;\n\n    // Add a constructor to set the label of the entity\n    public OntologyEntity(String label) {\n        this.label = label;\n    }\n\n    // Add a method to retrieve the ontology ID associated with the entity\n    public URI getOntologyId() {\n        return this.ontologyId;\n    }\n}\n```\n\nYour task is to complete the `OntologyEntity` class by adding the missing constructor and method as per the given specifications.", "response": "```java\nimport java.net.URI;\n\npublic class OntologyEntity {\n    private String label;\n    private URI ontologyId;\n\n    // Constructor to set the label of the entity\n    public OntologyEntity(String label) {\n        this.label = label;\n    }\n\n    // Method to set the ontology ID associated with the entity\n    public void setOntologyId(URI ontologyId) {\n        this.ontologyId = ontologyId;\n    }\n\n    // Method to retrieve the ontology ID associated with the entity\n    public URI getOntologyId() {\n        return this.ontologyId;\n    }\n}\n```\n\nIn the solution, the missing `setOntologyId` method has been added to set the ontology ID associated with the entity. This completes the implementation of the `OntologyEntity` class as per the given specifications."}
{"index": 23407, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a Python function that processes a list of tweets and extracts media URLs from tweets containing a specific hashtag. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the function `extract_media_urls` as specified in the instruction. The code is not fragmented and is executable in a real environment."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that processes a list of tweets and extracts media URLs from tweets that contain a specific hashtag. The function should take in two parameters: a list of tweets and a hashtag. Each tweet is represented as a dictionary with keys \"text\" for the tweet content and \"entities\" for any associated media. The \"entities\" key maps to a dictionary with a \"media\" key that contains a list of media URLs. Your task is to implement the function `extract_media_urls(tweets, hashtag)` that returns a list of media URLs from tweets containing the specified hashtag.\n\nFunction Signature: `def extract_media_urls(tweets: List[Dict[str, Union[str, Dict[str, List[str]]]], hashtag: str) -> List[str]:`\n\nExample:\n```python\ntweets = [\n    {\"text\": \"Check out this amazing photo! #nature\", \"entities\": {\"media\": [\"https://example.com/photo1.jpg\"]}},\n    {\"text\": \"New adventure! #travel #nature\", \"entities\": {\"media\": [\"https://example.com/photo2.jpg\", \"https://example.com/photo3.jpg\"]}},\n    {\"text\": \"Exploring the wilderness #nature\", \"entities\": {\"media\": []}},\n    {\"text\": \"Beautiful sunset #nature #photography\", \"entities\": {\"media\": [\"https://example.com/photo4.jpg\"]}}\n]\n\nhashtag = \"nature\"\n\nprint(extract_media_urls(tweets, hashtag))\n# Output: [\"https://example.com/photo1.jpg\", \"https://example.com/photo2.jpg\", \"https://example.com/photo3.jpg\", \"https://example.com/photo4.jpg\"]\n```", "response": "```python\nfrom typing import List, Dict, Union\n\ndef extract_media_urls(tweets: List[Dict[str, Union[str, Dict[str, List[str]]]], hashtag: str) -> List[str]:\n    media_urls = []\n    for tweet in tweets:\n        if hashtag in tweet[\"text\"]:\n            media_urls.extend(tweet[\"entities\"][\"media\"])\n    return media_urls\n```"}
{"index": 29020, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a custom validator for a form model in a Python application. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the implementation of the `MandatoryValidator` class and a test case to validate its functionality."}, "final_result": 1}, "prompt": "You are tasked with implementing a custom validator for a form model in a Python application. The form model consists of various fields, such as TextField and UniqueIdField, and each field can have different validation rules. The custom validator, MandatoryValidator, should ensure that all mandatory fields are filled in by the user before the form can be submitted.\n\nYour task is to implement the `MandatoryValidator` class, which should check if all mandatory fields in the form are filled. A field is considered mandatory if its `required` attribute is set to `True`. If any mandatory field is left empty, the validator should raise a `ValidationError` with an appropriate error message.\n\nYou are provided with a code snippet that sets up the initial test case for the `MandatoryValidator`. The `setUp` method initializes the validator and creates several TextField instances, some of which are marked as required and others as optional.\n\nYour implementation should ensure that the `MandatoryValidator` correctly identifies the mandatory fields that are left empty and raises a `ValidationError` with the appropriate error message.", "response": "```python\nclass ValidationError(Exception):\n    pass\n\nclass MandatoryValidator:\n    def validate(self, fields):\n        empty_mandatory_fields = [field.name for field in fields if field.required and not field.value]\n        if empty_mandatory_fields:\n            error_message = f\"The following mandatory fields are empty: {', '.join(empty_mandatory_fields)}\"\n            raise ValidationError(error_message)\n\n# Test the MandatoryValidator\nclass TestMandatoryValidator(unittest.TestCase):\n    def setUp(self):\n        self.validator = MandatoryValidator()\n        self.field1 = TextField('a', 'a', 'a')\n        self.field2 = TextField('b', 'b', 'b', required=False)\n        self.field3 = TextField('c', 'c', 'c')\n        self.field4 = TextField('d', 'd', 'd')\n        self.fields = [self.field1, self.field2, self.field3, self.field4]\n\n    def test_empty_mandatory_field(self):\n        self.field3.value = ''  # Simulate an empty mandatory field\n        with self.assertRaises(ValidationError) as context:\n            self.validator.validate(self.fields)\n        self.assertEqual(str(context.exception), \"The following mandatory fields are empty: c\")\n```"}
{"index": 20352, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python class that processes TREC queries. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `TrecQueries` class and its `process_query` method, as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that extends a base class and handles TREC (Text REtrieval Conference) queries. The TREC queries are defined using a dictionary with regular expressions as keys and corresponding values. The class should be able to process these queries and provide descriptions and narratives based on the input.\n\nYour task is to complete the implementation of the `TrecQueries` class by adding a method `process_query` that takes a query string as input and returns the description and narrative based on the matching regular expressions in the TREC queries dictionary.\n\nThe TREC queries dictionary is provided as follows:\n```python\ntrec_queries = {\n    '<desc> *(Description:)?': 'description',\n    '<narr> *(Narrative:)?': 'narrative'\n}\n```\n\nThe `TrecQueries` class should have the following structure:\n```python\nclass BaseQueries:\n    # Base class for queries\n\nclass TrecQueries(BaseQueries):\n    def __init__(self, trec_queries):\n        # Initialize with the TREC queries dictionary\n\n    def process_query(self, query):\n        # Process the query and return the description and narrative based on the matching regular expressions\n```\n\nFor example, if the input query is \"Description: Retrieve all documents related to Python programming\", the `process_query` method should return:\n```python\n{\n    'description': 'Retrieve all documents related to Python programming',\n    'narrative': None\n}\n```\nIf the input query is \"Narrative: Find relevant articles about machine learning\", the `process_query` method should return:\n```python\n{\n    'description': None,\n    'narrative': 'Find relevant articles about machine learning'\n}\n```", "response": "```python\nimport re\n\nclass BaseQueries:\n    # Base class for queries\n\nclass TrecQueries(BaseQueries):\n    def __init__(self, trec_queries):\n        self.trec_queries = trec_queries\n\n    def process_query(self, query):\n        result = {'description': None, 'narrative': None}\n        for pattern, key in self.trec_queries.items():\n            match = re.search(pattern, query)\n            if match:\n                result[key] = query.replace(match.group(0), '').strip()\n        return result\n```\nThe `TrecQueries` class extends the `BaseQueries` class and initializes with the provided TREC queries dictionary. The `process_query` method iterates through the TREC queries dictionary, searches for matches in the input query using regular expressions, and populates the result dictionary with the description and narrative based on the matches found. If no match is found for a particular category, the corresponding value in the result dictionary is set to `None`."}
{"index": 37598, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The code-instruction requires generating a full code snippet, and the solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a simple asynchronous TCP server using Python's asyncio library. Your task is to create a class that represents a TCP service and allows clients to connect and send data. The service should be able to handle multiple client connections concurrently.\n\nYour task is to complete the implementation of the `TestTcpService` class, which should have the following features:\n1. Accept incoming TCP connections on the specified host and port.\n2. Handle multiple client connections concurrently.\n3. Receive data from connected clients and store it in a shared data structure.\n\nYou are provided with a code snippet that shows the usage of the `TestTcpService` class. The `aiomisc_unused_port` is a function that returns an unused port number for the service to listen on. The `loop` parameter is the asyncio event loop.\n\nYour implementation should allow the `TestTcpService` to accept incoming connections, receive data from clients, and store the received data in a shared data structure.\n\nYou can assume that the `aiomisc_unused_port` function returns a valid unused port number, and the `loop` parameter is a valid asyncio event loop.\n\nYour task is to complete the implementation of the `TestTcpService` class to fulfill the requirements mentioned above.\n\n```python\nimport asyncio\n\nclass TestTcpService:\n    def __init__(self, host, port, **kwargs):\n        self.host = host\n        self.port = port\n        self.DATA = []\n\n    async def handle_client(self, reader, writer):\n        data = await reader.read(100)\n        message = data.decode()\n        print(f\"Received data: {message} from {writer.get_extra_info('peername')}\")\n        self.DATA.append(message)\n\n    async def start_service(self):\n        server = await asyncio.start_server(\n            self.handle_client, self.host, self.port)\n        async with server:\n            await server.serve_forever()\n\nasync def main():\n    loop = asyncio.get_running_loop()\n    service = TestTcpService(\"127.0.0.1\", aiomisc_unused_port(), **{\"loop\": loop})\n    await service.start_service()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```", "response": "```python\nimport asyncio\n\nclass TestTcpService:\n    def __init__(self, host, port, **kwargs):\n        self.host = host\n        self.port = port\n        self.DATA = []\n\n    async def handle_client(self, reader, writer):\n        data = await reader.read(100)\n        message = data.decode()\n        print(f\"Received data: {message} from {writer.get_extra_info('peername')}\")\n        self.DATA.append(message)\n\n    async def start_service(self):\n        server = await asyncio.start_server(\n            self.handle_client, self.host, self.port)\n        async with server:\n            await server.serve_forever()\n\nasync def main():\n    loop = asyncio.get_running_loop()\n    service = TestTcpService(\"127.0.0.1\", aiomisc_unused_port(), **{\"loop\": loop})\n    await service.start_service()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nThe provided solution completes the implementation of the `TestTcpService` class to fulfill the requirements. It initializes the TCP service with the specified host and port, defines a method to handle incoming client connections, and starts the service to accept and handle client connections concurrently. The received data from clients is stored in the shared `DATA` list. The `main` function initializes the event loop and starts the TCP service."}
{"index": 24790, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The code-instruction requires generating a full code snippet, and the solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with creating a Python class to manage trucking events. The class should have the following functionalities:\n\n1. Initialize the event with an event ID, trucker's WhatsApp number, and date.\n2. Provide a method to update the trucker's WhatsApp number.\n3. Provide a method to update the event date.\n4. Provide a method to display the event details.\n\nYour task is to complete the implementation of the `TruckingEvent` class by adding the required methods.\n\n```python\nclass TruckingEvent:\n    def __init__(self, event_id, trucker_whatsapp, date):\n        self.event_id = event_id\n        self.trucker_whatsapp = trucker_whatsapp\n        self.date = date\n\n    def update_whatsapp(self, new_whatsapp):\n        # Add code to update the trucker's WhatsApp number\n        self.trucker_whatsapp = new_whatsapp\n\n    def update_date(self, new_date):\n        # Add code to update the event date\n        self.date = new_date\n\n    def display_details(self):\n        # Add code to display the event details\n        print(f\"Event ID: {self.event_id}\")\n        print(f\"Trucker's WhatsApp: {self.trucker_whatsapp}\")\n        print(f\"Event Date: {self.date}\")\n```", "response": "```python\nclass TruckingEvent:\n    def __init__(self, event_id, trucker_whatsapp, date):\n        self.event_id = event_id\n        self.trucker_whatsapp = trucker_whatsapp\n        self.date = date\n\n    def update_whatsapp(self, new_whatsapp):\n        self.trucker_whatsapp = new_whatsapp\n\n    def update_date(self, new_date):\n        self.date = new_date\n\n    def display_details(self):\n        print(f\"Event ID: {self.event_id}\")\n        print(f\"Trucker's WhatsApp: {self.trucker_whatsapp}\")\n        print(f\"Event Date: {self.date}\")\n```\nThis solution provides a complete implementation of the `TruckingEvent` class with the required functionalities. The `update_whatsapp` method updates the trucker's WhatsApp number, the `update_date` method updates the event date, and the `display_details` method displays the event details."}
{"index": 5215, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `Config` class and its factory method as required."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class `Config` that can be initialized using a factory method `subreddit` and has specific properties and behaviors. The `Config` class should have an `env` property that can take values from the list ['development', 'testing', 'production'], a `name` property that is set based on the input to the factory method, and a `__str__` method that returns a specific string based on the `name` property.\n\nYour task is to implement the `Config` class with the required properties and methods, and ensure that it passes the provided unit test `test_init_by_factory`. The unit test uses `mock_loader` and `mock_valid_directory` to assert that the `Config` is initialized correctly and its properties are set as expected.\n\nYour implementation should satisfy the following conditions:\n1. The `Config` class should have a factory method `subreddit` that takes a subreddit name as input and returns an instance of `Config` with the `env` property set to one of ['development', 'testing', 'production'] (chosen randomly) and the `name` property set to the input subreddit name.\n2. The `Config` class should have a property `env` that can take values from the list ['development', 'testing', 'production'].\n3. The `Config` class should have a property `name` that is set based on the input to the factory method.\n4. The `Config` class should have a `__str__` method that returns '/r/{name} configuration' where `{name}` is the value of the `name` property.\n\nYou are not required to implement the unit test, only the `Config` class and its factory method.", "response": "```python\nimport random\n\nclass Config:\n    def __init__(self, env, name):\n        self.env = env\n        self.name = name\n\n    def __str__(self):\n        return f'/r/{self.name} configuration'\n\n    @classmethod\n    def subreddit(cls, name):\n        env = random.choice(['development', 'testing', 'production'])\n        return cls(env, name)\n```\nIn the solution, the `Config` class is implemented with the required properties and methods. The `subreddit` factory method initializes a `Config` instance with a random `env` property and the input `name` property. The `__str__` method returns the specific string '/r/{name} configuration' based on the `name` property. This implementation satisfies the conditions outlined in the problem description."}
{"index": 12193, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable Python function that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that can be executed in a real environment, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that takes a list of URLs and returns a dictionary containing the domain names as keys and the unique URLs associated with each domain as values. The domain name should be extracted from the URL and should not include the protocol (e.g., 'http://' or 'https://').\n\nCreate a function called `organize_urls` that accepts a list of URLs as input and returns a dictionary where the keys are the domain names and the values are lists of unique URLs associated with each domain.\n\nFor example, given the following list of URLs:\n```python\nurls = [\n    'https://labelqa.estafeta.com/EstafetaLabel20/services/EstafetaLabelWS?wsdl',\n    'https://label.estafeta.com/EstafetaLabel20/services/EstafetaLabelWS?wsdl',\n    'https://trackingqa.estafeta.com/Service.asmx?wsdl',\n    'https://tracking.estafeta.com/Service.asmx?wsdl',\n    'http://frecuenciacotizador.estafeta.com/Service.asmx?wsdl',\n    'http://frecuenciacotizador.estafeta.com/Service.asmx?wsdl',\n]\n```\nThe function call `organize_urls(urls)` should return the following dictionary:\n```python\n{\n    'labelqa.estafeta.com': [\n        'https://labelqa.estafeta.com/EstafetaLabel20/services/EstafetaLabelWS?wsdl'\n    ],\n    'label.estafeta.com': [\n        'https://label.estafeta.com/EstafetaLabel20/services/EstafetaLabelWS?wsdl'\n    ],\n    'trackingqa.estafeta.com': [\n        'https://trackingqa.estafeta.com/Service.asmx?wsdl'\n    ],\n    'tracking.estafeta.com': [\n        'https://tracking.estafeta.com/Service.asmx?wsdl'\n    ],\n    'frecuenciacotizador.estafeta.com': [\n        'http://frecuenciacotizador.estafeta.com/Service.asmx?wsdl'\n    ]\n}\n```", "response": "```python\nfrom urllib.parse import urlparse\n\ndef organize_urls(urls):\n    domain_urls = {}\n    for url in urls:\n        parsed_url = urlparse(url)\n        domain = parsed_url.netloc\n        if domain not in domain_urls:\n            domain_urls[domain] = [url]\n        else:\n            if url not in domain_urls[domain]:\n                domain_urls[domain].append(url)\n    return domain_urls\n```\n\nThe `organize_urls` function first imports the `urlparse` function from the `urllib.parse` module. It then initializes an empty dictionary `domain_urls` to store the domain names and their associated unique URLs.\n\nNext, the function iterates through the input list of URLs. For each URL, it uses `urlparse` to extract the domain name and checks if the domain is already a key in the `domain_urls` dictionary. If not, it adds the domain as a key with the URL as the value. If the domain already exists in the dictionary, it appends the URL to the list of URLs associated with that domain, but only if the URL is not already present in the list.\n\nFinally, the function returns the `domain_urls` dictionary containing the domain names as keys and the unique URLs associated with each domain as values."}
{"index": 1336, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality of a library management system."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code, including both the `Library` class and the `LibraryApp` class with a `main` method to demonstrate the functionality."}, "final_result": 1}, "prompt": "You are tasked with creating a simple Java program that simulates a library management system. The system should allow users to add, remove, and search for books in the library. Additionally, users should be able to check out and return books.\n\nYour task is to implement the `Library` class, which will manage the library's collection of books. The `Book` class has already been provided for you. You need to implement the following methods in the `Library` class:\n\n1. `addBook(Book book)`: Adds a book to the library.\n2. `removeBook(String title)`: Removes a book from the library based on its title.\n3. `searchByTitle(String title)`: Searches for a book in the library based on its title and returns the book if found, otherwise returns `null`.\n4. `checkOutBook(String title)`: Marks a book as checked out based on its title.\n5. `returnBook(String title)`: Marks a checked-out book as returned based on its title.\n\nYou should also create a `LibraryApp` class with a `main` method to demonstrate the functionality of the `Library` class. The `main` method should create a library, add some books, perform various operations, and display the results.\n\nThe `Book` class has the following structure:\n```java\npublic class Book {\n    private String title;\n    private String author;\n\n    public Book(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n\n    // Getters and setters\n}\n```\n\nYou should assume that the `Book` class has appropriate getters and setters for the `title` and `author` fields.", "response": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Library {\n    private List<Book> books;\n\n    public Library() {\n        this.books = new ArrayList<>();\n    }\n\n    public void addBook(Book book) {\n        books.add(book);\n        System.out.println(\"Book added: \" + book.getTitle());\n    }\n\n    public void removeBook(String title) {\n        for (Book book : books) {\n            if (book.getTitle().equals(title)) {\n                books.remove(book);\n                System.out.println(\"Book removed: \" + title);\n                return;\n            }\n        }\n        System.out.println(\"Book not found: \" + title);\n    }\n\n    public Book searchByTitle(String title) {\n        for (Book book : books) {\n            if (book.getTitle().equals(title)) {\n                return book;\n            }\n        }\n        return null;\n    }\n\n    public void checkOutBook(String title) {\n        for (Book book : books) {\n            if (book.getTitle().equals(title)) {\n                book.setCheckedOut(true);\n                System.out.println(\"Book checked out: \" + title);\n                return;\n            }\n        }\n        System.out.println(\"Book not found: \" + title);\n    }\n\n    public void returnBook(String title) {\n        for (Book book : books) {\n            if (book.getTitle().equals(title)) {\n                book.setCheckedOut(false);\n                System.out.println(\"Book returned: \" + title);\n                return;\n            }\n        }\n        System.out.println(\"Book not found: \" + title);\n    }\n}\n```\n\n```java\npublic class LibraryApp {\n    public static void main(String[] args) {\n        Library library = new Library();\n\n        Book book1 = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n        Book book2 = new Book(\"To Kill a Mockingbird\", \"Harper Lee\");\n        Book book3 = new Book(\"1984\", \"George Orwell\");\n\n        library.addBook(book1);\n        library.addBook(book2);\n        library.addBook(book3);\n\n        library.removeBook(\"To Kill a Mockingbird\");\n\n        Book foundBook = library.searchByTitle(\"The Great Gatsby\");\n        if (foundBook != null) {\n            System.out.println(\"Book found: \" + foundBook.getTitle());\n        } else {\n            System.out.println(\"Book not found\");\n        }\n\n        library.checkOutBook(\"1984\");\n        library.returnBook(\"1984\");\n    }\n}\n```"}
{"index": 16103, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `KeyValueStore` class with the specified functionality."}, "final_result": 1}, "prompt": "You are tasked with implementing a class that simulates a simple key-value store. The class, named `KeyValueStore`, should have the following functionality:\n1. It should have a private attribute `_store` that stores key-value pairs.\n2. It should have a method `set_value(key, value)` that sets the value for a given key.\n3. It should have a method `get_value(key)` that returns the value for a given key.\n4. It should have a method `delete_key(key)` that deletes a key-value pair from the store.\n\nYou need to implement the `KeyValueStore` class with the specified functionality.", "response": "```python\nclass KeyValueStore:\n    def __init__(self):\n        self._store = {}\n\n    def set_value(self, key, value):\n        self._store[key] = value\n\n    def get_value(self, key):\n        return self._store.get(key, None)\n\n    def delete_key(self, key):\n        if key in self._store:\n            del self._store[key]\n```\nIn this solution, we define a class `KeyValueStore` with an internal dictionary `_store` to store key-value pairs. The `set_value` method sets the value for a given key, `get_value` retrieves the value for a given key, and `delete_key` removes a key-value pair from the store."}
{"index": 1568, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a class `ErrorResponseHandler` with a method `errorResponse` that handles different types of error responses and messages. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `ErrorResponseHandler` class and its `errorResponse` method according to the given specifications. It does not provide disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a simple web service that handles error responses. The provided code snippet is a method that returns a 404 error response with a custom message. Your task is to extend this functionality by creating a class that can handle different types of error responses and messages.\n\nYou are required to create a class named `ErrorResponseHandler` with the following specifications:\n- The class should have a method `errorResponse` that takes two parameters: an integer `statusCode` and a string `message`, and returns a `Response` object.\n- The `errorResponse` method should return a response with the provided status code and message.\n- The class should handle the following status codes: 400 (Bad Request), 401 (Unauthorized), 403 (Forbidden), and 404 (Not Found).\n- For any other status code, the method should return a response with status code 500 (Internal Server Error) and the provided message.\n\nYou should implement the `ErrorResponseHandler` class and its `errorResponse` method according to the given specifications.", "response": "```java\nimport javax.ws.rs.core.Response;\n\npublic class ErrorResponseHandler {\n    public Response errorResponse(int statusCode, String message) {\n        switch (statusCode) {\n            case 400:\n                return Response.status(400).entity(new Message(message)).build();\n            case 401:\n                return Response.status(401).entity(new Message(message)).build();\n            case 403:\n                return Response.status(403).entity(new Message(message)).build();\n            case 404:\n                return Response.status(404).entity(new Message(message)).build();\n            default:\n                return Response.status(500).entity(new Message(message)).build();\n        }\n    }\n\n    private static class Message {\n        private String message;\n\n        public Message(String message) {\n            this.message = message;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n    }\n}\n```\n\nThe `ErrorResponseHandler` class contains the `errorResponse` method that handles different status codes and returns the appropriate response with the provided message. The `Message` class is a simple wrapper for the error message."}
{"index": 5102, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a Python decorator function that measures the execution time of another function. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the decorator function and an example usage, demonstrating how the decorator can be applied to any function to measure its execution time."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that measures the execution time of another function. Your goal is to implement a decorator that can be applied to any function and prints the time taken for its execution in milliseconds.\n\nYour task is to create a decorator function called `measure_execution_time` that takes a function as input and returns a new function. When the new function is called, it should print the time taken for the original function's execution in milliseconds.\n\nYour decorator function should be implemented as follows:\n```python\nimport time\n\ndef measure_execution_time(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        execution_time_ms = (end_time - start_time) * 1000\n        print(f\"Execution time for {func.__name__}: {execution_time_ms:.2f} ms\")\n        return result\n    return wrapper\n```\n\nUsing the provided code snippet as inspiration, create a decorator function `measure_execution_time` that can be applied to any function to measure its execution time in milliseconds.", "response": "```python\nimport time\n\ndef measure_execution_time(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        execution_time_ms = (end_time - start_time) * 1000\n        print(f\"Execution time for {func.__name__}: {execution_time_ms:.2f} ms\")\n        return result\n    return wrapper\n\n# Example usage of the measure_execution_time decorator\n@measure_execution_time\ndef test_sleep_400ms():\n    time.sleep(0.4)\n\ntest_sleep_400ms()\n```\n\nWhen the `test_sleep_400ms` function is called, the decorator `measure_execution_time` will measure the time taken for its execution and print the result in milliseconds."}
{"index": 32726, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a text classification system using the Naive Bayes algorithm. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes preprocessing, training, and evaluation steps, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a text classification system using the Naive Bayes algorithm. The goal is to build a program that can classify text documents into predefined categories based on the words present in the documents. To achieve this, you will need to preprocess the text data, train a Naive Bayes classifier, and evaluate its performance.\n\nYou are provided with a code snippet that demonstrates the initial steps of the text classification process. The snippet shows the use of the `train_test_split` function to split the dataset into training and testing sets, and the `CountVectorizer` to convert text data into a document-term matrix. The comment in the code snippet indicates that Naive Bayes is a common method for text classification.\n\nYour task is to complete the implementation by training a Naive Bayes classifier using the training data and evaluating its performance on the testing data. Additionally, you need to report the accuracy of the classifier.\n\nYour program should include the following steps:\n1. Preprocess the text data using the `CountVectorizer` to convert it into a document-term matrix.\n2. Train a Naive Bayes classifier using the training data and the document-term matrix.\n3. Evaluate the classifier's performance on the testing data and calculate its accuracy.", "response": "```python\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\n\n# Assuming X_train, X_test, y_train, y_test are provided from the previous code snippet\n\n# Step 1: Preprocess the text data using CountVectorizer\nvectorizer = CountVectorizer()\nX_train_document_term_matrix = vectorizer.fit_transform(X_train)\nX_test_document_term_matrix = vectorizer.transform(X_test)\n\n# Step 2: Train a Naive Bayes classifier\nnaive_bayes_classifier = MultinomialNB()\nnaive_bayes_classifier.fit(X_train_document_term_matrix, y_train)\n\n# Step 3: Evaluate the classifier's performance and calculate accuracy\npredicted = naive_bayes_classifier.predict(X_test_document_term_matrix)\naccuracy = metrics.accuracy_score(y_test, predicted)\n\nprint(\"Naive Bayes Classifier Accuracy:\", accuracy)\n```\n\nThis solution completes the text classification process by training a Naive Bayes classifier using the training data and evaluating its performance on the testing data. The accuracy of the classifier is then calculated and reported."}
{"index": 15755, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to complete the implementation of the `show_logs` function. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that handles the truncation of warnings and appends the summary message when necessary. It also includes the display of errors and warnings, making it a complete implementation."}, "final_result": 1}, "prompt": "You are tasked with implementing a logging system for a web application using Python. The `show_logs` function is responsible for retrieving and displaying logged messages. The function uses the `get_flashed_messages` function to retrieve messages of specific categories, such as \"error\" and \"warning\". If the number of warnings exceeds a certain threshold, further warnings are truncated and a summary message is appended.\n\nYour task is to complete the implementation of the `show_logs` function by handling the truncation of warnings and appending the summary message when necessary.\n\nGiven:\n- The `get_flashed_messages` function retrieves flashed messages of specific categories.\n- The `MAX_WARNINGS` constant represents the maximum number of warnings to display.\n\nComplete the `show_logs` function to:\n1. Retrieve error messages using `get_flashed_messages` with the category filter \"error\".\n2. Retrieve warning messages using `get_flashed_messages` with the category filter \"warning\".\n3. If the number of warnings exceeds `MAX_WARNINGS`, truncate the warnings to `MAX_WARNINGS` and append a summary message: \"Too many warnings (>MAX_WARNINGS) - Skipping further warnings...\"\n\nYour implementation should handle the truncation and appending of the summary message correctly.\n\n```python\nMAX_WARNINGS = 5  # Example value for the maximum number of warnings to display\n\ndef show_logs():\n    errors = get_flashed_messages(category_filter=[\"error\"])\n    warnings = get_flashed_messages(category_filter=[\"warning\"])\n    if len(warnings) > MAX_WARNINGS:\n        warnings = warnings[:MAX_WARNINGS]\n        warnings.append(\n            f\"Too many warnings (>{MAX_WARNINGS}) - Skipping further warnings...\"\n    # Your implementation here\n```", "response": "```python\nMAX_WARNINGS = 5  # Example value for the maximum number of warnings to display\n\ndef show_logs():\n    errors = get_flashed_messages(category_filter=[\"error\"])\n    warnings = get_flashed_messages(category_filter=[\"warning\"])\n    if len(warnings) > MAX_WARNINGS:\n        warnings = warnings[:MAX_WARNINGS]\n        warnings.append(\n            f\"Too many warnings (>{MAX_WARNINGS}) - Skipping further warnings...\"\n    # Solution: Truncating and appending summary message\n    # Truncate warnings and append summary message if necessary\n    if len(warnings) > MAX_WARNINGS:\n        warnings = warnings[:MAX_WARNINGS]\n        warnings.append(\n            f\"Too many warnings (>{MAX_WARNINGS}) - Skipping further warnings...\"\n    # Display errors and warnings\n    print(\"Errors:\")\n    for error in errors:\n        print(error)\n    print(\"Warnings:\")\n    for warning in warnings:\n        print(warning)\n```"}
{"index": 15348, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python class that simulates a simple bank account with specific methods. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes all the required methods for the `BankAccount` class, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that simulates a simple bank account. The class should have methods for depositing funds, withdrawing funds, and checking the current balance. Additionally, the class should have a method for transferring funds to another bank account.\n\nYour task is to complete the implementation of the `BankAccount` class by adding the necessary methods and ensuring that the account balance is updated correctly after each transaction.\n\nThe initial code snippet provided is as follows:\n```python\nfrom .client import Check\n```\nYou are not required to use the `Check` class directly, but it serves as a placeholder to indicate that the `BankAccount` class should be implemented in a separate file or module.\n\nYour implementation should include the following methods:\n1. `__init__(self, initial_balance)`: Initializes the bank account with the given initial balance.\n2. `deposit(self, amount)`: Adds the specified amount to the account balance.\n3. `withdraw(self, amount)`: Subtracts the specified amount from the account balance.\n4. `get_balance(self)`: Returns the current balance of the account.\n5. `transfer(self, recipient, amount)`: Transfers the specified amount from the current account to the recipient's account.\n\nYou should ensure that the account balance cannot go below zero, and the transfer method should handle cases where the current account does not have sufficient funds for the transfer.", "response": "```python\nclass BankAccount:\n    def __init__(self, initial_balance):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")\n\n    def get_balance(self):\n        return self.balance\n\n    def transfer(self, recipient, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            recipient.deposit(amount)\n        else:\n            print(\"Insufficient funds for transfer\")\n```\nThis implementation ensures that the `BankAccount` class has the required methods for managing the account balance and transferring funds. The `withdraw` method checks for sufficient funds before deducting the amount, and the `transfer` method handles cases where the current account does not have enough funds for the transfer."}
{"index": 35576, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that processes a given string containing a series of commands and returns the final position of a robot. The robot starts at position (0, 0) on a 2D grid and can move in four directions: up, down, left, and right. Each command is represented by a single character: 'U' for up, 'D' for down, 'L' for left, and 'R' for right. The input string may also contain other characters, which should be ignored.\n\nYou need to write a function `finalPosition(commands: str) -> Tuple[int, int]` that takes in a string `commands` and returns a tuple representing the final position of the robot after executing all the commands.\n\nFor example, given the input string \"UURDR\", the robot would move up twice, right once, and then down and right. Thus, the final position would be (1, 1).\n\nAssume that the input string `commands` will not be empty and will only contain valid command characters ('U', 'D', 'L', 'R').\n\nWrite a function to solve this problem efficiently.", "response": "```python\nfrom typing import Tuple\n\ndef finalPosition(commands: str) -> Tuple[int, int]:\n    x, y = 0, 0  # Initial position of the robot\n    for command in commands:\n        if command == 'U':\n            y += 1\n        elif command == 'D':\n            y -= 1\n        elif command == 'L':\n            x -= 1\n        elif command == 'R':\n            x += 1\n    return x, y\n```\n\nThe `finalPosition` function iterates through each command character in the input string and updates the robot's position based on the command. After processing all the commands, it returns the final position as a tuple of integers representing the x and y coordinates."}
{"index": 23538, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable Python function that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that can be executed in a real environment."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that extracts and returns the bot invite link from a given string. The bot invite link is enclosed within backticks and is followed by a newline character and the actual link in Markdown format. The function should take a string as input and return the bot invite link if found, or return \"Bot invite link not found\" if no bot invite link is present.\n\nFor example, given the input string:\n```\n''' `bot invite link:`\n<https://discord.com/api/oauth2/authorize?client_id=732933945057869867&permissions=538569921&scope=bot>'''\n```\nThe function should return:\n```\nhttps://discord.com/api/oauth2/authorize?client_id=732933945057869867&permissions=538569921&scope=bot\n```", "response": "```python\nimport re\n\ndef extract_bot_invite_link(input_string):\n    # Using regular expression to find the bot invite link\n    match = re.search(r'`bot invite link:`\\s*<([^>]*)>', input_string)\n    if match:\n        return match.group(1)\n    else:\n        return \"Bot invite link not found\"\n```\n\nThe `extract_bot_invite_link` function uses the `re` module to search for the bot invite link within the input string. It looks for the specific pattern of backticks followed by \"bot invite link:\" and then captures the URL within angle brackets. If a match is found, it returns the captured URL; otherwise, it returns \"Bot invite link not found\"."}
{"index": 20329, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment to fulfill the intended functionality of organizing files in a directory."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes all necessary steps to achieve the task, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a file organization system using Python. The goal is to create a program that can organize files in a specified directory based on their types (e.g., images, documents, videos, etc.) into separate subdirectories.\n\nYou are provided with a Python library, `Library`, which offers the following functionalities:\n- `find_library(directory)`: A static method that takes a directory path as input and returns the location of the library.\n- `Library(location)`: A class that represents the library at a specific location.\n- `organize_all()`: A method of the `Library` class that organizes all the files in the library based on their types into separate subdirectories.\n\nYour task is to write a Python program that utilizes the `Library` class to organize files in a given directory.\n\nYour program should perform the following steps:\n1. Find the location of the library in the current working directory using the `find_library` method.\n2. Create an instance of the `Library` class at the located directory.\n3. Organize all the files in the library using the `organize_all` method.\n\nYour program should be able to handle various file types and organize them into appropriate subdirectories based on their types.\n\nWrite a Python program that accomplishes the file organization task using the provided `Library` class.", "response": "```python\nimport os\nfrom .library import Library\n\ndef main():\n    current_directory = os.getcwd()\n    location = Library.find_library(current_directory)\n    library = Library(location)\n    library.organize_all()\n```\nIn the solution, the `os` module is used to get the current working directory. Then, the `find_library` method is called to locate the library in the current directory. After obtaining the library location, an instance of the `Library` class is created, and the `organize_all` method is invoked to organize the files in the library based on their types into separate subdirectories."}
{"index": 16282, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to complete the implementation of a Python class for controlling a robotic vehicle's motors based on received messages. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the implementation of the `processTwist` method and any other necessary methods or attributes to control the motors based on the received messages."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class for controlling a robotic vehicle's motors based on received messages. The class has an initialization method and a message received method. Your task is to complete the implementation of the class by adding the necessary code to process the received messages and control the motors.\n\nThe provided code snippet includes a partial implementation of the class. The `__init__` method initializes a variable `rightDir` and prints a message. The `msg_received` method is called whenever a message is received and currently checks if the message type is `MsgType.TWIST` before calling the `processTwist` method with the received velocity and omega.\n\nYour task is to complete the class by implementing the `processTwist` method and any other necessary methods or attributes to control the motors based on the received messages.\n\nYour implementation should adhere to the following requirements:\n- Implement the `processTwist` method to control the motors based on the received velocity and omega values.\n- Assume that the `processTwist` method will be responsible for translating the received velocity and omega into motor control commands.\n- You can assume that the necessary motor control interfaces or methods are available for use within the class.\n\nComplete the class implementation to control the robotic vehicle's motors based on the received messages.\n\n```python\nclass RoboticVehicleController:\n    def __init__(self):\n        self.rightDir = 0\n        print(\"Motors Initialized\")\n\n    def msg_received(self, msg, msg_type):\n        # This gets called whenever any message is received\n        if msg_type == MsgType.TWIST:\n            self.processTwist(msg.velocity, msg.omega)\n\n    def processTwist(self, velocity, omega):\n        # Implement motor control based on received velocity and omega\n        # Your code here to control the motors based on the received messages\n        pass  # Placeholder for the implementation\n```", "response": "```python\nclass RoboticVehicleController:\n    def __init__(self):\n        self.rightDir = 0\n        print(\"Motors Initialized\")\n\n    def msg_received(self, msg, msg_type):\n        # This gets called whenever any message is received\n        if msg_type == MsgType.TWIST:\n            self.processTwist(msg.velocity, msg.omega)\n\n    def processTwist(self, velocity, omega):\n        # Implement motor control based on received velocity and omega\n        # Example implementation: Assuming motor control methods are available\n        left_motor_speed = velocity - omega\n        right_motor_speed = velocity + omega\n        # Example: Set motor speeds using available motor control methods\n        set_left_motor_speed(left_motor_speed)\n        set_right_motor_speed(right_motor_speed)\n```\nIn the solution, the `processTwist` method is implemented to control the motors based on the received velocity and omega values. The example implementation calculates the left and right motor speeds based on the received velocity and omega and then sets the motor speeds using available motor control methods."}
{"index": 18486, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `process_arrays` function as specified in the instruction."}, "final_result": 1}, "prompt": "You are given a Python code snippet that involves manipulation of NumPy arrays. Your task is to implement a function that performs similar operations on NumPy arrays.\n\nYou need to write a Python function called `process_arrays` that takes two NumPy arrays `z1` and `z2` as input and performs the following operations:\n1. Create a copy of `z2` and store it in a new variable `z2_copy`.\n2. Normalize the array `z2` by dividing each element by its maximum value.\n3. Calculate the difference between `z1` and the normalized `z2` array and store it in a new variable `dog_not_norm`.\n4. Normalize the difference array obtained in step 3 by dividing each element by the maximum value of the difference array. Store the result in a new variable `dog`.\n5. Set all negative values in the `dog` array to 0.\n\nYour task is to implement the `process_arrays` function to perform the above operations and return the resulting `z2_copy`, normalized `z2`, `dog_not_norm`, and the final `dog` arrays.\n\nNote: You can assume that the input arrays `z1` and `z2` will be 1-dimensional NumPy arrays of the same length.", "response": "```python\nimport numpy as np\n\ndef process_arrays(z1, z2):\n    z2_copy = np.copy(z2)\n    z2_normalized = z2 / np.max(z2)\n    dog_not_norm = z1 - z2_normalized\n    dog_normalized = (z1 - z2_normalized) / np.max(z1 - z2_normalized)\n    dog_normalized[dog_normalized < 0] = 0\n    return z2_copy, z2_normalized, dog_not_norm, dog_normalized\n```\n\nThe `process_arrays` function first creates a copy of `z2` using `np.copy`. Then, it normalizes `z2` by dividing each element by its maximum value. Next, it calculates the difference between `z1` and the normalized `z2` array and stores it in `dog_not_norm`. After that, it normalizes the difference array by dividing each element by its maximum value and sets all negative values to 0. Finally, it returns the resulting arrays as specified in the problem description."}
{"index": 30091, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python class that dynamically sets its attributes based on a given dictionary. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the class definition, constructor, method, and a test case. It is not fragmented or described in natural language."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that dynamically sets its attributes based on a given dictionary. Your goal is to create a class that takes a dictionary as input and sets its keys as attributes of the class instance, with their corresponding values. You should then implement a method to print all the attributes and their values.\n\nCreate a Python class `DynamicAttributes` with the following specifications:\n- The class should have a constructor `__init__` that takes a dictionary `info` as input and sets its keys as attributes of the class instance, with their corresponding values.\n- Implement a method `print_attributes` that prints all the attributes and their values in the format \"attribute: value\" on separate lines.\n\nYour task is to complete the implementation of the `DynamicAttributes` class according to the given specifications.\n\nExample:\nFor the dictionary `info = {'name': 'John', 'age': 25, 'city': 'New York'}`, the following code snippet:\n```\nobj = DynamicAttributes(info)\nobj.print_attributes()\n```\nshould produce the output:\n```\nname: John\nage: 25\ncity: New York\n```", "response": "```python\nclass DynamicAttributes:\n    def __init__(self, info):\n        for key in info.keys():\n            setattr(self, key, info[key])\n\n    def print_attributes(self):\n        for attr, value in vars(self).items():\n            print(f\"{attr}: {value}\")\n\n# Test the implementation\ninfo = {'name': 'John', 'age': 25, 'city': 'New York'}\nobj = DynamicAttributes(info)\nobj.print_attributes()\n```"}
{"index": 10762, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a function that calculates the average score of a game and rounds it to the nearest integer. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the required function, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are given a list of integers representing the scores of a game. Your task is to implement a function `calculate_average_score(scores)` that calculates the average score of the game. The function should return the average score rounded to the nearest integer.\n\nExample:\nFor the list of scores: [85, 92, 78, 90, 88], the average score is (85 + 92 + 78 + 90 + 88) / 5 = 86.6, which rounds to 87.\n\nFunction signature: \n```python\ndef calculate_average_score(scores: List[int]) -> int:\n    pass\n```", "response": "```python\nfrom typing import List\n\ndef calculate_average_score(scores: List[int]) -> int:\n    total_score = sum(scores)\n    average_score = total_score / len(scores)\n    return round(average_score)\n```\n\nThe `calculate_average_score` function takes a list of scores as input. It calculates the total score by summing all the scores in the list and then divides it by the number of scores to obtain the average score. Finally, it rounds the average score to the nearest integer and returns the result."}
{"index": 7882, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the required functionality as described in the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that processes and overlays keypoint data onto an image using the OpenCV library. The function takes in the following parameters:\n- `left_display`: A 2D array representing the left display image.\n- `overlay`: A 2D array representing the overlay image.\n- `cv_kp`: A tuple containing the x and y coordinates of a keypoint detected in the left display image.\n- `kp_spine`: A tuple containing the x and y coordinates of another keypoint detected in the left display image.\n- `left_hip`: A tuple containing the x and y coordinates of the left hip keypoint.\n- `right_hip`: A tuple containing the x and y coordinates of the right hip keypoint.\n- `color`: A tuple representing the color to be used for drawing the keypoints.\n\nThe function should perform the following operations:\n1. Check if the `cv_kp` coordinates are within the bounds of the `left_display` image, and if so, draw a filled circle at those coordinates using the specified `color`.\n2. Check if the `kp_spine` coordinates are within the bounds of the `left_display` image, and if the `left_hip` and `right_hip` coordinates are greater than 0, draw a filled circle at the `kp_spine` coordinates using the specified `color`.\n3. Overlay the modified `left_display` onto the `overlay` image using a weighted addition operation.\n\nYour task is to implement the function `process_and_overlay` that takes in the aforementioned parameters and performs the required operations as described.", "response": "```python\nimport cv2\nimport numpy as np\n\ndef process_and_overlay(left_display, overlay, cv_kp, kp_spine, left_hip, right_hip, color):\n    if cv_kp[0] < left_display.shape[1] and cv_kp[1] < left_display.shape[0]:\n        cv2.circle(left_display, (int(cv_kp[0]), int(cv_kp[1])), 3, color, -1)\n    if (kp_spine[0] < left_display.shape[1] and kp_spine[1] < left_display.shape[0] and\n            left_hip[0] > 0 and left_hip[1] > 0 and right_hip[0] > 0 and right_hip[1] > 0):\n        cv2.circle(left_display, (int(kp_spine[0]), int(kp_spine[1])), 3, color, -1)\n    \n    result = cv2.addWeighted(left_display, 0.9, overlay, 0.1, 0.0)\n    return result\n```\n\nThe `process_and_overlay` function first checks if the `cv_kp` coordinates are within the bounds of the `left_display` image and draws a filled circle at those coordinates using the specified `color`. Then, it checks if the `kp_spine` coordinates are within the bounds of the `left_display` image and if the `left_hip` and `right_hip` coordinates are greater than 0, and draws a filled circle at the `kp_spine` coordinates using the specified `color`. Finally, it overlays the modified `left_display` onto the `overlay` image using a weighted addition operation and returns the resulting image."}
{"index": 251, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `process_assignment_status` function as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that processes the status of an assignment and returns a corresponding value. The function should take into account the comments in the code snippet provided and return the appropriate value based on the assignment status.\n\nFunction Signature:\n```python\ndef process_assignment_status() -> int:\n    pass\n```\n\nThe code snippet provided contains a comment indicating that the return value is \"UNDERWAY\" and then returns `AssignmentStatus.ASSIGNMENT_UNDERWAY`. Your task is to create the `process_assignment_status` function that adheres to the following rules:\n- If the comment indicates \"UNDERWAY\", the function should return 0.\n- If the comment indicates \"COMPLETE\", the function should return 1.\n- If the comment indicates \"PENDING\", the function should return 2.\n\nYou are not allowed to modify the existing code snippet or the `AssignmentStatus` enum.\n\nExample:\nIf the comment indicates \"UNDERWAY\", the function should return 0.", "response": "```python\nfrom enum import Enum\n\nclass AssignmentStatus(Enum):\n    ASSIGNMENT_UNDERWAY = 0\n    ASSIGNMENT_COMPLETE = 1\n    ASSIGNMENT_PENDING = 2\n\ndef process_assignment_status() -> int:\n    # Parse the comment in the code snippet\n    comment = \"UNDERWAY\"  # Replace with actual parsing logic\n\n    # Return the appropriate value based on the comment\n    if comment == \"UNDERWAY\":\n        return AssignmentStatus.ASSIGNMENT_UNDERWAY.value\n    elif comment == \"COMPLETE\":\n        return AssignmentStatus.ASSIGNMENT_COMPLETE.value\n    elif comment == \"PENDING\":\n        return AssignmentStatus.ASSIGNMENT_PENDING.value\n    else:\n        raise ValueError(\"Invalid assignment status comment\")\n```\nIn the solution, we define an `AssignmentStatus` enum to represent the possible assignment statuses. The `process_assignment_status` function parses the comment and returns the corresponding value based on the comment's content. If the comment does not match any of the expected statuses, a `ValueError` is raised."}
{"index": 26581, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement the `name` method in the `TestCase` class. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the implementation of the `name` method and a test case to verify its functionality."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that represents a simple test case. The class should have a method `name` that returns the name of the test case. Your goal is to write the `name` method to pass the given assertion test.\n\nYour task is to complete the `TestCase` class by implementing the `name` method so that it returns the name of the test case.\n\n```python\nimport unittest\n\nclass TestCase(unittest.TestCase):\n    def __init__(self, name):\n        super().__init__()\n        self._name = name\n\n    def name(self):\n        # Your implementation here\n        pass\n\n# Test case\ntest = TestCase('test')\n```", "response": "```python\nimport unittest\n\nclass TestCase(unittest.TestCase):\n    def __init__(self, name):\n        super().__init__()\n        self._name = name\n\n    def name(self):\n        return self._name\n\n# Test case\ntest = TestCase('test')\nassert test.name() == 'test'\n```"}
{"index": 30965, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a Python function that calculates the total disk space available on a Docker system after pulling specific Docker images. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the necessary imports, function definition, and logic to pull Docker images and calculate the total disk space available. It does not consist of multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that calculates the total disk space available on a Docker system after pulling specific Docker images. The function should utilize the `python_on_whales` library to interact with Docker and retrieve the disk space information.\n\nWrite a Python function `calculate_total_disk_space` that takes in a list of Docker image names as input and returns the total disk space available on the Docker system after pulling these images. The function should use the `python_on_whales` library to pull the images and then calculate the total disk space available.\n\nThe function signature should be:\n```python\ndef calculate_total_disk_space(image_names: List[str]) -> int:\n    pass\n```\n\nFor example, if the function is called with `calculate_total_disk_space([\"busybox\", \"busybox:1\"])`, it should pull the `busybox` and `busybox:1` images using the `python_on_whales` library and then calculate the total disk space available on the Docker system.\n\nAssume that the necessary imports and setup for using the `python_on_whales` library are already done.", "response": "```python\nfrom typing import List\nfrom python_on_whales import docker\n\ndef calculate_total_disk_space(image_names: List[str]) -> int:\n    # Pull the specified Docker images\n    for image_name in image_names:\n        docker.pull(image_name)\n\n    # Get the disk space information after pulling the images\n    disk_space_info = docker.system.disk_free()\n\n    # Calculate the total disk space available\n    total_disk_space = sum(disk_space_info.values())\n\n    return total_disk_space\n```\n\nThe `calculate_total_disk_space` function first pulls the specified Docker images using the `docker.pull` method from the `python_on_whales` library. Then, it retrieves the disk space information using `docker.system.disk_free()` and calculates the total disk space available by summing the values from the disk space information dictionary. Finally, it returns the total disk space available on the Docker system after pulling the specified images."}
{"index": 15983, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python function that updates a dictionary with a new key-value pair. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `update_dictionary` function as specified in the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python function that processes a dictionary and updates it with a new key-value pair. The function should take in three parameters: the original dictionary, the key for the new entry, and the corresponding value. Your task is to write a function `update_dictionary` that performs the following:\n- If the key already exists in the dictionary, update its value with the new value provided.\n- If the key does not exist, add a new key-value pair to the dictionary.\n\nThe function signature is:\n```python\ndef update_dictionary(original_dict: dict, key: str, value) -> dict:\n    pass\n```\n\nFor example, given the original dictionary `{'name': 'Alice', 'age': 25}` and the key-value pair to be added/updated as `('city', 'New York')`, the function should return `{'name': 'Alice', 'age': 25, 'city': 'New York'}`.", "response": "```python\ndef update_dictionary(original_dict: dict, key: str, value) -> dict:\n    original_dict[key] = value\n    return original_dict\n```\n\nThe `update_dictionary` function takes the original dictionary, the key, and the value as input parameters. It then updates the original dictionary with the new key-value pair. If the key already exists in the dictionary, its value is updated with the new value. If the key does not exist, a new key-value pair is added to the dictionary. Finally, the updated dictionary is returned."}
{"index": 18332, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable Python function that fulfills the intended functionality of comparing two directories while ignoring specific files."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that can be executed in a real environment. It includes the necessary imports, function definition, and example usage."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function that compares the contents of two directories and ensures that they are identical, except for specific files that should be ignored. Your function should take in two directory paths and a list of filenames to ignore, and then perform the comparison. If any differences are found in the directories, the function should raise an AssertionError with a message indicating the different files.\n\nYou are provided with a code snippet that demonstrates the use of the `os.listdir` function to retrieve the files in a directory and a `filecmp.dircmp` object to compare the directories. The `ignore` list is used to filter out specific files from the comparison.\n\nYour task is to implement the `compare_directories` function according to the given requirements.", "response": "```python\nimport os\nimport filecmp\n\ndef compare_directories(dir1, dir2, ignore_list):\n    # Get the list of files in dir1, excluding those in the ignore_list\n    ignore = [f for f in os.listdir(dir1) if f not in ignore_list]\n    \n    # Perform directory comparison, ignoring the specified files\n    comp = filecmp.dircmp(dir1, dir2, ignore=ignore)\n    \n    # Check if there are any different files\n    if len(comp.diff_files) > 0:\n        # Raise an AssertionError with the different files\n        raise AssertionError(f\"Different files: {comp.diff_files}\")\n    else:\n        print(\"Directories are identical\")\n\n# Example usage\ndir1 = '/path/to/dir1'\ndir2 = '/path/to/dir2'\nignore_files = ['file1.txt', 'file2.txt']\ncompare_directories(dir1, dir2, ignore_files)\n```\n\nIn the solution, the `compare_directories` function takes in the paths of two directories and a list of filenames to ignore. It then uses list comprehension to create the `ignore` list, filtering out the files specified in the `ignore_list`. The `filecmp.dircmp` object is used to compare the directories while ignoring the specified files. If there are any differences found, an AssertionError is raised with a message indicating the different files. Otherwise, a message indicating that the directories are identical is printed."}
{"index": 737, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a custom data structure and a specific method within it. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the `AdapterDataSet` class and the `countItemsWithProperty` method, meeting the requirement of generating a full code snippet."}, "final_result": 1}, "prompt": "You are tasked with implementing a custom data structure called `AdapterDataSet` in Java. The `AdapterDataSet` class extends `ArrayList` and implements `List`, `RandomAccess`, `Cloneable`, and `Serializable` interfaces. The class is designed to hold elements of type `E`, which must extend the `BaseItem` class.\n\nYour task is to implement a method within the `AdapterDataSet` class that performs a specific operation on the elements it contains.\n\nMethod to Implement:\n```java\npublic int countItemsWithProperty(Predicate<? super E> predicate)\n```\n\nThis method should count the number of items in the `AdapterDataSet` that satisfy the given predicate. The `Predicate` interface is a functional interface that represents a predicate (boolean-valued function) of one argument.\n\nYour implementation should iterate through the elements of the `AdapterDataSet` and apply the provided predicate to each element. If the predicate returns `true` for an element, it should be counted. The method should return the total count of elements that satisfy the given predicate.\n\nYou are required to write the `countItemsWithProperty` method within the `AdapterDataSet` class.", "response": "```java\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.RandomAccess;\nimport java.io.Serializable;\nimport java.util.function.Predicate;\n\nclass BaseItem {\n    // Define the BaseItem class as per the requirements\n}\n\npublic class AdapterDataSet<E extends BaseItem> extends ArrayList<E> implements List<E>, RandomAccess, Cloneable, Serializable {\n    public AdapterDataSet() {\n        super();\n    }\n\n    public AdapterDataSet(Collection<? extends E> c) {\n        super(c);\n    }\n\n    public int countItemsWithProperty(Predicate<? super E> predicate) {\n        int count = 0;\n        for (E item : this) {\n            if (predicate.test(item)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```\n\nIn the solution, the `AdapterDataSet` class is extended from `ArrayList` and implements the required interfaces. The `countItemsWithProperty` method is implemented to iterate through the elements and apply the given predicate to each element, counting the elements that satisfy the predicate. The method returns the total count of elements that meet the specified condition."}
{"index": 6038, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement the `make_alpha_shape` method and any other necessary classes or functions to calculate the alpha shape of weighted points. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the implementation of the `calculate_alpha_shape` function and an example usage, rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a program to calculate the alpha shape of a set of weighted points in a 2D space. An alpha shape is a geometric shape that encloses a set of points, and it is determined by a parameter alpha. The alpha shape is defined as the intersection of all convex shapes containing the input points and having an empty interior. The input consists of a list of weighted points, each containing a 2D point and a weight. The alpha shape is calculated using the weighted points and the alpha parameter.\n\nYou are given the following code snippet as a starting point:\n\n```python\nlst_wp.append(Weighted_point_2(Point_2(14, 1), 1))\nwas.make_alpha_shape(lst_wp)\n```\n\nIn this code snippet, `lst_wp` is a list that contains weighted points, and `was` is an instance of a class that provides the `make_alpha_shape` method to calculate the alpha shape. The `Weighted_point_2` class represents a weighted point in 2D space, and the `Point_2` class represents a 2D point.\n\nYour task is to implement the `make_alpha_shape` method and any other necessary classes or functions to calculate the alpha shape of the given weighted points using the provided code snippet as a reference.\n\nWrite a program that takes the list of weighted points and the alpha parameter as input and calculates the alpha shape of the weighted points.", "response": "```python\nfrom CGAL.CGAL_Kernel import Point_2\nfrom CGAL.CGAL_Alpha_shape_2 import Alpha_shape_2\nfrom CGAL.CGAL_Alpha_shape_2 import Weighted_point_2\n\ndef calculate_alpha_shape(weighted_points, alpha):\n    alpha_shape = Alpha_shape_2()\n    for wp in weighted_points:\n        alpha_shape.add_weighted_point(wp)\n    alpha_shape.set_alpha(alpha)\n    alpha_shape.make_alpha_shape()\n    return alpha_shape\n\n# Example usage\nweighted_points = [Weighted_point_2(Point_2(14, 1), 1), Weighted_point_2(Point_2(10, 5), 2)]\nalpha_parameter = 0.5\nresulting_alpha_shape = calculate_alpha_shape(weighted_points, alpha_parameter)\n```"}
{"index": 1224, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a custom string manipulation function in Java. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `addPrefix` method as specified in the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a custom string manipulation function in Java. The function should take a string as input and return a modified version of the string with a specific prefix added to it.\n\nYou are given the following code snippet as a starting point:\n```java\npublic class StringManipulator {\n    public String addPrefix(String value) {\n        {\n            return \"Using - \" + value;\n        }\n    }\n}\n```\n\nYour task is to complete the `addPrefix` method in the `StringManipulator` class. The method should prepend the string \"Using - \" to the input `value` and return the modified string.\n\nWrite the complete implementation for the `addPrefix` method in the `StringManipulator` class.", "response": "```java\npublic class StringManipulator {\n    public String addPrefix(String value) {\n        return \"Using - \" + value;\n    }\n}\n```\n\nThe solution provides the complete implementation for the `addPrefix` method in the `StringManipulator` class. The method simply concatenates the string \"Using - \" with the input `value` and returns the modified string."}
{"index": 7666, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a class to track the maximum recursion depth reached during a series of recursive function calls. The class should provide methods to update the recursion depth and retrieve the maximum depth reached.\n\nYou are given a code snippet that partially defines the class. Your task is to complete the class by implementing the missing parts and ensuring that the class functions as intended.\n\nComplete the class `RecursionTracker` with the following specifications:\n- The class should have a property `max_recursion_depth` to store the maximum recursion depth reached.\n- Implement a setter method `num_guesses` to set the number of guesses (recursion depth) and update the `_num_iterations` attribute accordingly.\n- Implement a method `on_recursion` that takes the current recursion depth as a parameter and updates the `max_recursion_depth` if the provided depth exceeds the current maximum.\n- Implement a method `get_max_recursion_depth` that returns the maximum recursion depth reached.\n\nYour task is to complete the class according to the given specifications and ensure that the provided code snippet works as expected.\n\nComplete the class definition:\n\n```python\nclass RecursionTracker:\n    def __init__(self):\n        self._num_iterations = 0\n        self.max_recursion_depth = 0\n\n    @property\n    def num_guesses(self):\n        return self._num_iterations\n\n    @num_guesses.setter\n    def num_guesses(self, val):\n        self._num_iterations = val\n\n    def on_recursion(self, depth):\n        if depth > self.max_recursion_depth:\n            self.max_recursion_depth = depth\n\n    def get_max_recursion_depth(self):\n        return self.max_recursion_depth\n```", "response": "```python\nclass RecursionTracker:\n    def __init__(self):\n        self._num_iterations = 0\n        self.max_recursion_depth = 0\n\n    @property\n    def num_guesses(self):\n        return self._num_iterations\n\n    @num_guesses.setter\n    def num_guesses(self, val):\n        self._num_iterations = val\n\n    def on_recursion(self, depth):\n        if depth > self.max_recursion_depth:\n            self.max_recursion_depth = depth\n\n    def get_max_recursion_depth(self):\n        return self.max_recursion_depth\n```\n\nThe provided solution completes the `RecursionTracker` class by implementing the missing parts according to the given specifications. The class now accurately tracks the maximum recursion depth reached during a series of recursive function calls."}
{"index": 36590, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The code instruction requires generating a full code snippet, and the solution delivers a single, cohesive block of complete code."}, "final_result": 1}, "prompt": "You are tasked with creating a program to calculate the weekly wages of employees based on their hours worked and pay rate. The pay rate is provided as a constant value in the code snippet. \n\nWrite a function `calculate_wages(hours_worked)` that takes the number of hours worked by an employee as input and returns their total wages for the week. The wages are calculated using the following rules:\n- For the first 40 hours worked, the employee is paid at the provided pay rate.\n- For any hours worked beyond 40, the employee is paid at 1.5 times the pay rate.\n\nFor example, if an employee worked 45 hours, the wages would be calculated as follows:\n- 40 hours * pay_rate = regular wages\n- 5 hours * (1.5 * pay_rate) = overtime wages\n- Total wages = regular wages + overtime wages\n\nAssume that the `pay_rate` is always a positive integer.", "response": "```python\ndef calculate_wages(hours_worked):\n    pay_rate = 400  # Given pay rate\n    regular_hours = min(hours_worked, 40)  # Calculate regular hours worked (up to 40 hours)\n    overtime_hours = max(hours_worked - 40, 0)  # Calculate overtime hours worked (hours beyond 40)\n\n    regular_wages = regular_hours * pay_rate  # Calculate regular wages\n    overtime_wages = overtime_hours * 1.5 * pay_rate  # Calculate overtime wages\n\n    total_wages = regular_wages + overtime_wages  # Calculate total wages\n\n    return total_wages\n```\n\nThe `calculate_wages` function takes the input `hours_worked` and calculates the regular and overtime wages based on the provided pay rate. It then returns the total wages for the week based on the hours worked."}
{"index": 2309, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Java class for representing a comic book. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes all the required attributes and methods for the `ComicBook` class, as specified in the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a Java class for representing a comic book in an online comics store. The class should encapsulate the necessary attributes and methods to manage the details of a comic book, such as title, author, price, and availability.\n\nYour task is to complete the implementation of the `ComicBook` class, which is part of the `com.costa.luiz.comics.domain` package. The class should have the following attributes:\n\n- `title` (String): The title of the comic book.\n- `author` (String): The author of the comic book.\n- `price` (double): The price of the comic book.\n- `available` (boolean): Indicates whether the comic book is currently available for purchase.\n\nThe class should also provide the following methods:\n\n- `getTitle()`: A method that returns the title of the comic book.\n- `getAuthor()`: A method that returns the author of the comic book.\n- `getPrice()`: A method that returns the price of the comic book.\n- `isAvailable()`: A method that returns true if the comic book is available for purchase, and false otherwise.\n\nYou should also provide a constructor for the `ComicBook` class that accepts the title, author, price, and availability as parameters and initializes the corresponding attributes.\n\nComplete the implementation of the `ComicBook` class according to the given requirements.", "response": "```java\npackage com.costa.luiz.comics.domain;\n\npublic class ComicBook {\n    private String title;\n    private String author;\n    private double price;\n    private boolean available;\n\n    public ComicBook(String title, String author, double price, boolean available) {\n        this.title = title;\n        this.author = author;\n        this.price = price;\n        this.available = available;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n}\n```"}
{"index": 19343, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python function that processes a video file by removing a specified mask from each frame and then saves the processed frames to a new video file. The function should take the following parameters:\n\n- `Video_FILE`: A string representing the file path of the input video.\n- `maskFile`: A string representing the file path of the mask image to be used for inpainting.\n\nThe function should perform the following steps:\n1. Load the mask image from the provided `maskFile`.\n2. Initialize a video writer to create a new video file with the processed frames.\n3. Iterate through each frame of the input video.\n4. For each frame, apply the inpainting technique to remove the mask from the frame.\n5. Write the processed frame to the new video file.\n\nYour task is to complete the implementation of the `loadVideo` function to achieve the described functionality. You can assume that the `get_frames` function, which retrieves frames from the input video, is already provided.\n\n```python\nimport cv2\n\ndef loadVideo(Video_FILE, maskFile):\n    # Load the mask image\n    mask = cv2.imread(maskFile, 0)\n\n    # Initialize video writer for the new video\n    fourcc = cv2.VideoWriter_fourcc(*'MPV4')\n    video_out = cv2.VideoWriter('new_video.mp4', fourcc, 30, (480, 848))\n\n    # Iterate through each frame of the input video\n    for frame in get_frames(Video_FILE):\n        if frame is None:\n            break\n\n        # Apply inpainting to remove the mask from the frame\n        dst = cv2.inpaint(frame, mask, 3, cv2.INPAINT_TELEA)\n\n        # Write the processed frame to the new video file\n        video_out.write(dst)\n\n    # Release the video writer\n    video_out.release()\n```", "response": "```python\nimport cv2\n\ndef loadVideo(Video_FILE, maskFile):\n    # Load the mask image\n    mask = cv2.imread(maskFile, 0)\n\n    # Initialize video writer for the new video\n    fourcc = cv2.VideoWriter_fourcc(*'MPV4')\n    video_out = cv2.VideoWriter('new_video.mp4', fourcc, 30, (480, 848))\n\n    # Iterate through each frame of the input video\n    for frame in get_frames(Video_FILE):\n        if frame is None:\n            break\n\n        # Apply inpainting to remove the mask from the frame\n        dst = cv2.inpaint(frame, mask, 3, cv2.INPAINT_TELEA)\n\n        # Write the processed frame to the new video file\n        video_out.write(dst)\n\n    # Release the video writer\n    video_out.release()\n```\n\nThe provided solution completes the implementation of the `loadVideo` function as described in the problem. It loads the mask image, initializes a video writer, processes each frame by applying inpainting to remove the mask, and writes the processed frames to a new video file."}
{"index": 24049, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to create a Python class `Person` with a custom string representation. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the `Person` class definition, the `__init__` method, the `__str__` method, and example usage. It is not fragmented or described in natural language."}, "final_result": 1}, "prompt": "You are tasked with implementing a custom string representation for a Python class. Your goal is to create a class that, when converted to a string using the `str()` function, returns a specific attribute of the class instance. You should write a class `Person` with an attribute `name`, and override the `__str__` method to return the `name` attribute when the class instance is converted to a string.\n\nCreate a Python class `Person` with the following specifications:\n- The class should have a constructor `__init__` that takes a single parameter `name` and initializes an attribute `name` with the given value.\n- Override the `__str__` method to return the `name` attribute when the class instance is converted to a string using the `str()` function.\n\nYour task is to implement the `Person` class according to the given specifications.", "response": "```python\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self):\n        return self.name\n\n# Example usage\nperson1 = Person(\"Alice\")\nperson2 = Person(\"Bob\")\n\nprint(str(person1))  # Output: \"Alice\"\nprint(str(person2))  # Output: \"Bob\"\n```"}
{"index": 13758, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `update_high_scores` function as specified in the instruction."}, "final_result": 1}, "prompt": "You are tasked with creating a program to manage high scores for a video game. The program should prompt the user to input a new high score and then update the list of high scores accordingly. The high scores should be stored in descending order, and the program should display the updated list of high scores after each input.\n\nYour task is to implement a function `update_high_scores` that takes in the current list of high scores and the new high score as input and returns the updated list of high scores in descending order.\n\nThe function signature is:\n```python\ndef update_high_scores(high_scores: List[int], new_score: int) -> List[int]:\n    pass\n```\n\nFor example, given the current high scores list `[100, 80, 60, 40, 20]` and a new high score of `75`, the function should return `[100, 80, 75, 60, 40]`.", "response": "```python\nfrom typing import List\n\ndef update_high_scores(high_scores: List[int], new_score: int) -> List[int]:\n    high_scores.append(new_score)  # Add the new score to the list\n    high_scores.sort(reverse=True)  # Sort the list in descending order\n    return high_scores\n```\n\nThe `update_high_scores` function takes the current list of high scores and the new high score as input. It appends the new score to the list and then sorts the list in descending order using the `sort` method with the `reverse=True` parameter. Finally, it returns the updated list of high scores."}
{"index": 5883, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement the `_space_to_voxel` method within the `ImageProcessor` class. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `_space_to_voxel` method as required by the instruction. The code is not fragmented and is executable as a whole."}, "final_result": 1}, "prompt": "You are working on a project that involves processing and analyzing 3D image data. You have a class `ImageProcessor` with a method `convert_to_voxel_coordinates` that takes a pandas DataFrame `df` containing spatial coordinates in physical units (x, y, z), and converts them to voxel units based on the given spacing and origin. The method then creates a new DataFrame `df_voxel` containing the voxel coordinates and other information from the original DataFrame.\n\nYou need to implement the `_space_to_voxel` method within the `ImageProcessor` class, which takes the spatial coordinates in physical units, the spacing, and the origin as input, and returns the corresponding voxel coordinates.\n\nImplement the `_space_to_voxel` method to convert the spatial coordinates from physical units to voxel units based on the given spacing and origin. The voxel coordinates should be rounded to the nearest integer.\n\n```python\nclass ImageProcessor:\n    def __init__(self):\n        pass\n\n    def _space_to_voxel(self, coordinates, spacing, origin):\n        \"\"\"\n        Convert spatial coordinates from physical units to voxel units based on the given spacing and origin.\n\n        Parameters\n        ----------\n        coordinates : array-like\n            The spatial coordinates (x, y, z) in physical units.\n        spacing : array-like\n            The spacing of the voxel grid in each dimension (x, y, z).\n        origin : array-like\n            The origin of the voxel grid in physical units (x, y, z).\n\n        Returns\n        -------\n        voxel_coordinates : array-like\n            The corresponding voxel coordinates (x, y, z) rounded to the nearest integer.\n        \"\"\"\n        # Your implementation of _space_to_voxel goes here\n        pass\n\n    def convert_to_voxel_coordinates(self, df, spacing, origin):\n        \"\"\"\n        Convert spatial coordinates in the DataFrame from physical units to voxel units based on the given spacing and origin.\n\n        Parameters\n        ----------\n        df : :class:`pandas.DataFrame`\n            The DataFrame containing spatial coordinates (x, y, z) in physical units.\n        spacing : array-like\n            The spacing of the voxel grid in each dimension (x, y, z).\n        origin : array-like\n            The origin of the voxel grid in physical units (x, y, z).\n\n        Returns\n        -------\n        df_voxel : :class:`pandas.DataFrame`\n            DataFrame containing the voxel coordinates and other information from the original DataFrame.\n        \"\"\"\n        x = []\n        y = []\n        z = []\n        df_voxel = df.copy()\n        for index, row in df_voxel.iterrows():\n            vox = self._space_to_voxel(row[[\"x\", \"y\", \"z\"]].to_numpy(), spacing, origin)\n            x.append(vox[0])\n            y.append(vox[1])\n            z.append(vox[2])\n        df_voxel['voxel_x'] = x\n        df_voxel['voxel_y'] = y\n        df_voxel['voxel_z'] = z\n        return df_voxel\n```", "response": "```python\nclass ImageProcessor:\n    def __init__(self):\n        pass\n\n    def _space_to_voxel(self, coordinates, spacing, origin):\n        \"\"\"\n        Convert spatial coordinates from physical units to voxel units based on the given spacing and origin.\n\n        Parameters\n        ----------\n        coordinates : array-like\n            The spatial coordinates (x, y, z) in physical units.\n        spacing : array-like\n            The spacing of the voxel grid in each dimension (x, y, z).\n        origin : array-like\n            The origin of the voxel grid in physical units (x, y, z).\n\n        Returns\n        -------\n        voxel_coordinates : array-like\n            The corresponding voxel coordinates (x, y, z) rounded to the nearest integer.\n        \"\"\"\n        # Calculate the voxel coordinates\n        voxel_x = int(round((coordinates[0] - origin[0]) / spacing[0]))\n        voxel_y = int(round((coordinates[1] - origin[1]) / spacing[1]))\n        voxel_z = int(round((coordinates[2] - origin[2]) / spacing[2]))\n        return [voxel_x, voxel_y, voxel_z]\n\n    def convert_to_voxel_coordinates(self, df, spacing, origin):\n        \"\"\"\n        Convert spatial coordinates in the DataFrame from physical units to voxel units based on the given spacing and origin.\n\n        Parameters\n        ----------\n        df : :class:`pandas.DataFrame`\n            The DataFrame containing spatial coordinates (x, y, z) in physical units.\n        spacing : array-like\n            The spacing of the voxel grid in each dimension (x, y, z).\n        origin : array-like\n            The origin of the voxel grid in physical units (x, y, z).\n\n        Returns\n        -------\n        df_voxel : :class:`pandas.DataFrame`\n            DataFrame containing the voxel coordinates and other information from the original DataFrame.\n        \"\"\"\n        x = []\n        y = []\n        z = []\n        df_voxel = df.copy()\n        for index, row in df_voxel.iterrows():\n            vox = self._space_to_voxel(row[[\"x\", \"y\", \"z\"]].to_numpy(), spacing, origin)\n            x.append(vox[0])\n            y.append(vox[1])\n            z.append(vox[2])\n        df_voxel['voxel_x'] = x\n        df_voxel['voxel_y'] = y\n        df_voxel['voxel_z'] = z\n        return df_voxel\n```"}
{"index": 17978, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python class that represents an API request for updating API keys. The class should have specific fields and properties as described in the code snippet below.\n\nYour task is to create a Python class `ApikeysProjectsLocationsKeysPatchRequest` with the following fields:\n- `name` (string): A resource name for the key, following the format `projects//locations/global/keys/`.\n- `updateMask` (string): A field mask specifying which fields to be updated as part of the request.\n\nYour implementation should include appropriate documentation for the class and its fields.\n\nCreate the class and ensure that it adheres to the provided specifications.", "response": "```python\nclass ApikeysProjectsLocationsKeysPatchRequest:\n    \"\"\"\n    A class representing an API request for updating API keys.\n    \"\"\"\n    def __init__(self, name, updateMask):\n        \"\"\"\n        Initializes the ApikeysProjectsLocationsKeysPatchRequest object with the given parameters.\n\n        Args:\n        name (str): The resource name of the key.\n        updateMask (str): The field mask specifying which fields to be updated as part of the request.\n        \"\"\"\n        self.name = name\n        self.updateMask = updateMask\n\n# Example usage\nrequest = ApikeysProjectsLocationsKeysPatchRequest(\n    name=\"projects/123456867718/locations/global/keys/b7ff1f9f-8275-410a-94dd-3855ee9b5dd2\",\n    updateMask=\"display_name,restrictions\"\n)\n```\nIn this solution, we create a class `ApikeysProjectsLocationsKeysPatchRequest` with the specified fields `name` and `updateMask`. The `__init__` method initializes the object with the provided parameters, and example usage demonstrates how to create an instance of the class."}
{"index": 35784, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The code instruction requires generating a full code snippet, and the solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with creating a Python program to calculate the monthly mortgage payment for a house based on the user's salary, the house price, and the desired financing period. The program should prompt the user to input their current salary, the price of the house they intend to buy, and the number of years over which they plan to finance the house. The program should then calculate and display the monthly mortgage payment.\n\nYour program should follow these guidelines:\n- Prompt the user to input their current salary as a floating-point number.\n- Prompt the user to input the price of the house they intend to buy as a floating-point number.\n- Prompt the user to input the number of years over which they plan to finance the house as an integer.\n- Calculate the monthly mortgage payment using the formula: `monthly_payment = house_price / (years * 12)`.\n- Calculate the minimum salary required for the mortgage using the formula: `minimum_salary = 30% of the user's salary`.\n- Display the calculated monthly mortgage payment in the format: \"For a house of $X in Y years, the monthly payment will be $Z.\"", "response": "```python\n# Prompt the user to input their current salary, house price, and financing period\nsalary = float(input('What is your current salary? $'))\nhouse_price = float(input('What is the price of the house you intend to buy? $'))\nyears = int(input('In how many years do you plan to finance the house? '))\n\n# Calculate the monthly mortgage payment\nmonthly_payment = house_price / (years * 12)\n\n# Calculate the minimum salary required for the mortgage\nminimum_salary = salary * 30 / 100\n\n# Display the calculated monthly mortgage payment\nprint('For a house of ${:.2f} in {} year(s), the monthly payment will be ${:.2f}.'.format(house_price, years, monthly_payment))\n```"}
{"index": 8967, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to fix and implement the `solve(x)` function to reverse an integer and handle overflow. The solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that correctly implements the `solve(x)` function as specified in the instruction."}, "final_result": 1}, "prompt": "You are given a Python function `solve(x)` that takes an integer `x` as input. The function is intended to convert the integer `x` into a reversed integer and return the result. However, there are some issues with the given code snippet, and you are tasked with fixing the code to ensure it works as intended.\n\nYour task is to modify the given code snippet to correctly implement the `solve(x)` function. Specifically, you need to ensure that the function reverses the digits of the input integer `x` and returns the result. If the reversed integer overflows the 32-bit signed integer range, the function should return 0.\n\nFor example, if the input `x` is 123, the function should return 321. If the input `x` is -123, the function should return -321.\n\nYour task is to fix the given code snippet to correctly implement the `solve(x)` function according to the specified requirements.", "response": "```python\ndef solve(x):\n    if x == 0:\n        return 0\n\n    sign = 1 if x > 0 else -1\n    x = abs(x)\n    reversed_x = 0\n\n    while x > 0:\n        digit = x % 10\n        reversed_x = reversed_x * 10 + digit\n        x //= 10\n\n    reversed_x *= sign\n\n    if reversed_x < -2**31 or reversed_x > 2**31 - 1:\n        return 0\n    else:\n        return reversed_x\n```\n\nThe provided solution modifies the given code snippet to correctly implement the `solve(x)` function. It first handles the case where the input `x` is 0 and determines the sign of the input. Then, it iterates through the digits of the absolute value of `x`, reverses the digits, and applies the sign. Finally, it checks if the reversed integer falls within the 32-bit signed integer range and returns the result accordingly."}
{"index": 15384, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the required functionality as specified in the instruction."}, "final_result": 1}, "prompt": "You are tasked with implementing a Python function that simulates the behavior of a device manager. The function should perform a series of operations on a list of devices, including writing, erasing, and reloading them without reconfiguring. Each device is represented by a dictionary with the following structure:\n```python\n{\n    \"id\": <int>,\n    \"status\": <str>,\n    \"config\": <dict>\n}\n```\nThe function should perform the following operations on the list of devices:\n1. Write a new configuration to a device with a specific ID.\n2. Erase the configuration of a device with a specific ID.\n3. Reload a device with a specific ID without reconfiguring it.\n\nThe function signature is:\n```python\ndef write_erase_reload_device_without_reconfig(devices: List[Dict[str, Union[int, str, Dict[str, Any]]]], operation: str, device_id: int, new_config: Optional[Dict[str, Any]]) -> List[Dict[str, Union[int, str, Dict[str, Any]]]]:\n    pass\n```\nWhere:\n- `devices`: A list of dictionaries representing the devices.\n- `operation`: A string representing the operation to be performed. It can be one of the following: \"write\", \"erase\", or \"reload\".\n- `device_id`: An integer representing the ID of the device on which the operation should be performed.\n- `new_config`: An optional dictionary representing the new configuration to be written to the device. It is only provided when the `operation` is \"write\".\n\nThe function should return the updated list of devices after performing the specified operation.\n\nFor example, given the input:\n```python\ndevices = [\n    {\"id\": 1, \"status\": \"active\", \"config\": {\"param1\": 10, \"param2\": \"abc\"}},\n    {\"id\": 2, \"status\": \"inactive\", \"config\": {\"param1\": 20, \"param2\": \"xyz\"}}\n]\noperation = \"write\"\ndevice_id = 2\nnew_config = {\"param1\": 30, \"param2\": \"def\"}\n```\nThe function should update the list of devices by writing the new configuration to the device with ID 2 and return:\n```python\n[\n    {\"id\": 1, \"status\": \"active\", \"config\": {\"param1\": 10, \"param2\": \"abc\"}},\n    {\"id\": 2, \"status\": \"active\", \"config\": {\"param1\": 30, \"param2\": \"def\"}}\n]\n```", "response": "```python\nfrom typing import List, Dict, Union, Any, Optional\n\ndef write_erase_reload_device_without_reconfig(devices: List[Dict[str, Union[int, str, Dict[str, Any]]]], operation: str, device_id: int, new_config: Optional[Dict[str, Any]]) -> List[Dict[str, Union[int, str, Dict[str, Any]]]]:\n    for device in devices:\n        if device[\"id\"] == device_id:\n            if operation == \"write\":\n                device[\"config\"] = new_config\n            elif operation == \"erase\":\n                device[\"config\"] = {}\n            elif operation == \"reload\":\n                pass  # No action needed for reload without reconfiguring\n            else:\n                raise ValueError(\"Invalid operation\")\n            break\n    return devices\n```"}
{"index": 115, "programming_language": {"required_language": "java"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement the `addReceive` method in the `ReceiveService` class. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `addReceive` method as required by the instruction."}, "final_result": 1}, "prompt": "You are tasked with designing a system to manage product receiving in a warehouse. The system involves the use of Java and a relational database. The code snippet provided is a method from a service class that adds a new receive entry to the system. The method takes a `ReceiveVO` object as a parameter, which contains information about the receive operation. The method retrieves the user associated with the receive operation from the database, sets the receive date, and presumably performs additional operations not shown in the snippet.\n\nYour task is to implement the `addReceive` method in the `ReceiveService` class. You are provided with the following classes:\n\n1. `ReceiveService`: Contains the `addReceive` method to be implemented.\n2. `ReceiveVO`: Represents the data transfer object for receive operations, containing information such as the user name and receive date.\n3. `Receive`: Represents the entity for receive operations, with attributes such as user, receive date, and others not shown in the snippet.\n4. `User`: Represents the entity for users in the system, with attributes such as account and others not shown in the snippet.\n5. `UserDao`: Contains the method `getUserByAccount` to retrieve a user by their account.\n\nYour implementation should retrieve the user from the database using the `getUserByAccount` method of `UserDao`, set the user for the receive operation, and set the receive date from the `ReceiveVO` object.\n\nImplement the `addReceive` method in the `ReceiveService` class based on the provided code snippet and classes.", "response": "```java\n@Override\npublic boolean addReceive(ReceiveVO receiveVO) {\n    Receive receive = new Receive();\n    \n    // Retrieve the user from the database using the UserDao\n    User user = userDao.getUserByAccount(receiveVO.getUserName());\n    \n    // Set the user for the receive operation\n    receive.setUser(user);\n    \n    // Set the receive date from the ReceiveVO object\n    receive.setReceiveDate(receiveVO.getReceiveDate());\n    \n    // Perform additional operations related to adding the receive entry\n    \n    // Save the receive entity to the database or perform any necessary persistence operations\n    \n    return true; // Return true if the receive operation was successfully added\n}\n```\n\nIn the solution, the `addReceive` method retrieves the user from the database using the `getUserByAccount` method of `UserDao`, sets the user for the receive operation, and sets the receive date from the `ReceiveVO` object. Additionally, any necessary persistence operations are performed, and the method returns `true` if the receive operation was successfully added."}
{"index": 22952, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The code instruction requires generating a full code snippet, and the solution delivers a single, cohesive block of complete code rather than multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with implementing a custom iterator class in Python. Your iterator class should support the iteration protocol, allowing it to be used in a `for` loop or with the `next()` function.\n\nCreate a class called `CustomIterator` with the following specifications:\n- The class should have a constructor that takes a list of integers as input and initializes an index variable to 0.\n- Implement the `__iter__` method that returns the iterator object itself.\n- Implement the `__next__` method that returns the next element in the list and increments the index. If the end of the list is reached, it should raise a `StopIteration` exception.\n\nYour task is to complete the `CustomIterator` class by implementing the `__iter__` and `__next__` methods to make it a valid iterator.\n\n```python\nclass CustomIterator:\n    def __init__(self, data: list[int]):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index < len(self.data):\n            result = self.data[self.index]\n            self.index += 1\n            return result\n        else:\n            raise StopIteration\n\n# Example usage:\niterator = CustomIterator([1, 2, 3, 4, 5])\nfor element in iterator:\n    print(element)\n```", "response": "```python\nclass CustomIterator:\n    def __init__(self, data: list[int]):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index < len(self.data):\n            result = self.data[self.index]\n            self.index += 1\n            return result\n        else:\n            raise StopIteration\n\n# Example usage:\niterator = CustomIterator([1, 2, 3, 4, 5])\nfor element in iterator:\n    print(element)\n```\n\nThe provided solution implements a custom iterator class `CustomIterator` that takes a list of integers as input and allows iteration over its elements. The `__iter__` method returns the iterator object itself, and the `__next__` method returns the next element in the list and increments the index. If the end of the list is reached, it raises a `StopIteration` exception."}
{"index": 11756, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which is to implement a Python program that simulates a simple API routing system. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `APIRouter` class and demonstrates its functionality by including two sample routers for login and registration functionalities."}, "final_result": 1}, "prompt": "You are tasked with creating a Python program that simulates a simple API routing system. The program should allow the user to register and login, and it should handle routing requests to the appropriate endpoints based on the provided URL paths.\n\nYour task is to implement the `APIRouter` class, which will manage the routing of different API endpoints. The class should have a method `include_router` that allows adding new routers for different functionalities. Each router should have a prefix and a set of tags to categorize the endpoints it handles.\n\nThe `include_router` method should take in the following parameters:\n- `router`: The router object to be included.\n- `tags`: A list of tags to categorize the endpoints handled by the included router.\n- `prefix`: A string representing the prefix for the endpoints handled by the included router.\n\nThe program should be able to handle requests to different endpoints based on the provided URL paths and route them to the appropriate routers based on the prefixes.\n\nYour task is to implement the `APIRouter` class and demonstrate its functionality by including two sample routers for login and registration functionalities.", "response": "```python\nclass APIRouter:\n    def __init__(self):\n        self.routers = []\n\n    def include_router(self, router, tags, prefix):\n        self.routers.append((router, tags, prefix))\n\n    def route_request(self, url_path):\n        for router, tags, prefix in self.routers:\n            if url_path.startswith(prefix):\n                print(f\"Routing request for {url_path} to router with tags {tags}\")\n                # Here you can further process the request based on the matched router\n                return\n        print(f\"No router found to handle request for {url_path}\")\n\n# Sample usage\nclass LoginRouter:\n    pass  # Placeholder for the login router implementation\n\nclass RegisterRouter:\n    pass  # Placeholder for the register router implementation\n\nlogin_router = LoginRouter()\nregister_router = RegisterRouter()\n\nrouter = APIRouter()\nrouter.include_router(login_router, tags=[\"login\"], prefix=\"/api\")\nrouter.include_router(register_router, tags=[\"register\"], prefix=\"/api\")\n\nrouter.route_request(\"/api/login\")  # Output: Routing request for /api/login to router with tags ['login']\nrouter.route_request(\"/api/register\")  # Output: Routing request for /api/register to router with tags ['register']\nrouter.route_request(\"/api/profile\")  # Output: No router found to handle request for /api/profile\n```"}
{"index": 29047, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, which involves completing the implementation of the `Collector` class and the `get_collectors` method in the `Server` class. The solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that includes the implementation of the `Collector` class and the `get_collectors` method in the `Server` class. It does not consist of multiple disconnected fragments or a natural language description."}, "final_result": 1}, "prompt": "You are tasked with creating a Python class that represents a Collector and its associated Zone. The Collector class should have attributes for ID, UUID, name, and the Zone it belongs to. Additionally, you need to implement a method to retrieve a list of Collectors configured on the server using the provided code snippet as a reference.\n\nYour task is to complete the implementation of the `Collector` class and its associated method for retrieving Collectors from the server.\n\nComplete the following Python class:\n\n```python\nfrom typing import List\n\nclass Zone:\n    def __init__(self, zone_id: int, name: str):\n        self.id = zone_id\n        self.name = name\n\nclass Collector:\n    def __init__(self, collector_id: int, uuid: str, name: str, zone: Zone, server):\n        # Initialize attributes here\n        pass\n\nclass Server:\n    def get(self, endpoint: str):\n        # Simulated method to retrieve data from the server\n        pass\n\n    def get_collectors(self) -> List[Collector]:\n        '''Returns the Collectors configured on the server'''\n        collectors = []\n        # Implement the logic to retrieve collectors from the server using self.get('zone/collector')\n        # Create Collector objects and append them to the collectors list\n        return collectors\n```\n\nYour task is to complete the `Collector` class by initializing its attributes and implement the `get_collectors` method in the `Server` class to retrieve a list of Collectors from the server using the provided code snippet as a reference.", "response": "```python\nfrom typing import List\n\nclass Zone:\n    def __init__(self, zone_id: int, name: str):\n        self.id = zone_id\n        self.name = name\n\nclass Collector:\n    def __init__(self, collector_id: int, uuid: str, name: str, zone: Zone, server):\n        self.collector_id = collector_id\n        self.uuid = uuid\n        self.name = name\n        self.zone = zone\n        self.server = server\n\nclass Server:\n    def get(self, endpoint: str):\n        # Simulated method to retrieve data from the server\n        pass\n\n    def get_collectors(self) -> List[Collector]:\n        '''Returns the Collectors configured on the server'''\n        collectors = []\n        results = self.get('zone/collector')\n        for collector in results:\n            zone = Zone(collector['zone']['id'], collector['zone']['name'])\n            collectors.append(Collector(\n                collector['id'],\n                collector['uuid'],\n                collector['name'],\n                zone,\n                server=self,\n            ))\n        return collectors\n```\n\nIn the solution, the `Collector` class is completed by initializing its attributes in the constructor. The `get_collectors` method in the `Server` class retrieves a list of Collectors from the server using the provided code snippet as a reference. It creates `Collector` objects and appends them to the `collectors` list before returning the list of Collectors."}
{"index": 16190, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that fulfills the intended functionality."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that handles all specified conditions for the input parameters."}, "final_result": 1}, "prompt": "You are given a Python function that takes two parameters: `action` (a string representing a direction) and `degrees` (an integer representing the angle). The function is intended to return a value based on the input parameters. However, the code snippet provided is incomplete and contains some errors. Your task is to complete the function according to the following rules:\n\n- If the `action` is 'L' (representing left), the function should return 1.\n- If the `action` is 'R' (representing right), the function should return -1.\n- If the `degrees` is 180, the function should return 2.\n- If the `degrees` is 270, the function should return 3.\n\nYou need to complete the function and handle all possible cases for the input parameters `action` and `degrees`.\n\nComplete the given Python function to satisfy the above conditions.\n\n```python\ndef determine_value(action, degrees):\n    if action == 'L':\n        return 1\n    elif action == 'R':\n        return -1\n    elif degrees == 180:\n        return 2\n    elif degrees == 270:\n        return 3\n    else:\n        return 0  # Default case when none of the conditions are met\n```", "response": "```python\ndef determine_value(action, degrees):\n    if action == 'L':\n        return 1\n    elif action == 'R':\n        return -1\n    elif degrees == 180:\n        return 2\n    elif degrees == 270:\n        return 3\n    else:\n        return 0  # Default case when none of the conditions are met\n```\nThe solution completes the given Python function `determine_value` to handle all possible cases for the input parameters `action` and `degrees`. It returns the appropriate value based on the conditions specified in the problem description."}
{"index": 32770, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable piece of code that can run in a real environment and fulfill the intended functionality."}, "criteria_2": {"met": true, "reason": "The code-instruction requires generating a full code snippet, and the solution delivers a single, cohesive block of complete code."}, "final_result": 1}, "prompt": "You are tasked with implementing a function that processes a CSV file containing detection results for nodules in medical imaging data. The function should read the CSV file, process the data, and return a specific value based on the results. The CSV file contains information about detected nodules, such as their coordinates, sizes, and other relevant data. Your task is to write a function that can accurately process this information and return a specific value based on the detection results.\n\nFunction Signature:\n```python\ndef get_nodule_detection_value(results_filename: str, outputdir: str) -> float:\n    pass\n```\n\nInput:\n- `results_filename` (str): A string representing the file path of the CSV file containing the detection results.\n- `outputdir` (str): A string representing the directory path where the output will be stored.\n\nOutput:\n- (float): A specific value calculated based on the detection results from the CSV file.\n\nExample:\nSuppose the CSV file \"detection_results.csv\" contains the following data:\n```\nnodule_id,x,y,z,radius,confidence\n1,10,20,30,5,0.8\n2,15,25,35,4,0.7\n3,8,18,28,6,0.9\n```\nCalling `get_nodule_detection_value(\"detection_results.csv\", \"output\")` should return a calculated value based on the detection results.\n\nNote:\n- The CSV file will always have a header row with the following columns: \"nodule_id\", \"x\", \"y\", \"z\", \"radius\", \"confidence\".\n- The \"x\", \"y\", \"z\" columns represent the coordinates of the detected nodule.\n- The \"radius\" column represents the size of the detected nodule.\n- The \"confidence\" column represents the confidence level of the detection.", "response": "```python\nimport csv\nimport math\n\ndef get_nodule_detection_value(results_filename: str, outputdir: str) -> float:\n    with open(results_filename, 'r') as file:\n        reader = csv.DictReader(file)\n        total_confidence = 0\n        num_nodules = 0\n        for row in reader:\n            confidence = float(row['confidence'])\n            total_confidence += confidence\n            num_nodules += 1\n        average_confidence = total_confidence / num_nodules\n        return math.sqrt(average_confidence)  # Calculating the square root of the average confidence as the final value\n```\n\nIn the solution, we use the `csv` module to read the CSV file and calculate the average confidence level of the detected nodules. The function then returns the square root of the average confidence as the final value based on the detection results."}
{"index": 28537, "programming_language": {"required_language": "python"}, "evaluation": {"criteria_1": {"met": true, "reason": "The code instruction specifies a code generation task, and the solution provides a complete, executable Python function that can parse and categorize log messages as required."}, "criteria_2": {"met": true, "reason": "The solution delivers a single, cohesive block of complete code that implements the `parse_log_messages` function, fulfilling the intended functionality."}, "final_result": 1}, "prompt": "You are tasked with creating a Python function to parse and process log messages from a geospatial data processing application. The log messages are formatted using the `colorama` library for colored output and contain information about inserting layers into a schema, executing SQL commands, and performing geospatial operations.\n\nYour task is to implement a function `parse_log_messages(log_messages: List[str]) -> Dict[str, List[str]]` that takes a list of log messages as input and returns a dictionary containing parsed information. The keys of the dictionary should be 'insertions', 'sql_commands', and 'geospatial_operations', and the values should be lists of corresponding parsed messages.\n\nThe log messages contain the following types of information:\n1. Insertions: Messages containing information about inserting a layer into a schema, including the layer name, schema name, and geometry type.\n2. SQL Commands: Messages containing SQL commands.\n3. Geospatial Operations: Messages containing information about geospatial operations, such as vector translation and making valid geometries.\n\nThe function should parse the log messages and categorize them based on the type of information they contain. Each parsed message should be stripped of color codes and leading/trailing whitespace.\n\nExample:\nInput:\n```\nlog_messages = [\n    \"- inserting \\x1b[35mlayer_name\\x1b[39m into \\x1b[34mschema_name\\x1b[39m as \\x1b[36mgeometry_type\\x1b[39m\",\n    \"with \\x1b[36msql_command\\x1b[39m\",\n    \"- \\x1b[32mcompleted\\x1b[39m in \\x1b[36m0.123s\\x1b[39m\",\n    \"- \\x1b[36mmake valid\\x1b[39m\"\n]\n```\nOutput:\n```\n{\n    'insertions': ['inserting layer_name into schema_name as geometry_type'],\n    'sql_commands': ['with sql_command'],\n    'geospatial_operations': ['completed in 0.123s', 'make valid']\n}\n\nNote: The color codes have been removed, and the messages have been categorized based on their content.", "response": "```python\nfrom typing import List, Dict\nfrom colorama import Fore\n\ndef parse_log_messages(log_messages: List[str]) -> Dict[str, List[str]]:\n    parsed_messages = {'insertions': [], 'sql_commands': [], 'geospatial_operations': []}\n\n    for message in log_messages:\n        if message.startswith('- inserting'):\n            parsed_message = message.replace(Fore.MAGENTA, '').replace(Fore.BLUE, '').replace(Fore.CYAN, '').replace(Fore.RESET, '').replace('- inserting ', '').strip()\n            parsed_messages['insertions'].append(parsed_message)\n        elif 'with' in message:\n            parsed_message = message.replace(Fore.CYAN, '').replace(Fore.RESET, '').replace('with ', '').strip()\n            parsed_messages['sql_commands'].append(parsed_message)\n        elif '- completed' in message:\n            parsed_message = message.replace(Fore.GREEN, '').replace(Fore.CYAN, '').replace(Fore.RESET, '').replace('- ', '').strip()\n            parsed_messages['geospatial_operations'].append(parsed_message)\n        elif '- make valid' in message:\n            parsed_message = message.replace(Fore.CYAN, '').replace(Fore.RESET, '').replace('- ', '').strip()\n            parsed_messages['geospatial_operations'].append(parsed_message)\n\n    return parsed_messages\n```"}
